package nirvana.hall.api.entities

import scalikejdbc._
import org.joda.time.{DateTime}
import java.sql.{Clob}

case class SysImportSchema01(
  processOrder: Option[Long] = None,
  duplicate: Option[Long] = None,
  dumpFileid: Option[Long] = None,
  dumpPosition: Option[Long] = None,
  dumpLength: Option[Long] = None,
  dumpOrigLength: Option[Long] = None,
  dumpAllocation: Option[Long] = None,
  completedRows: Option[Long] = None,
  errorCount: Option[Long] = None,
  elapsedTime: Option[Long] = None,
  objectTypePath: Option[String] = None,
  objectPathSeqno: Option[Long] = None,
  objectType: Option[String] = None,
  inProgress: Option[String] = None,
  objectName: Option[String] = None,
  objectLongName: Option[String] = None,
  objectSchema: Option[String] = None,
  originalObjectSchema: Option[String] = None,
  originalObjectName: Option[String] = None,
  partitionName: Option[String] = None,
  subpartitionName: Option[String] = None,
  dataobjNum: Option[Long] = None,
  flags: Option[Long] = None,
  property: Option[Long] = None,
  trigflag: Option[Long] = None,
  creationLevel: Option[Long] = None,
  completionTime: Option[DateTime] = None,
  objectTablespace: Option[String] = None,
  sizeEstimate: Option[Long] = None,
  objectRow: Option[Long] = None,
  processingState: Option[String] = None,
  processingStatus: Option[String] = None,
  baseProcessOrder: Option[Long] = None,
  baseObjectType: Option[String] = None,
  baseObjectName: Option[String] = None,
  baseObjectSchema: Option[String] = None,
  ancestorProcessOrder: Option[Long] = None,
  domainProcessOrder: Option[Long] = None,
  parallelization: Option[Long] = None,
  unloadMethod: Option[Long] = None,
  loadMethod: Option[Long] = None,
  granules: Option[Long] = None,
  scn: Option[Long] = None,
  grantor: Option[String] = None,
  xmlClob: Option[Clob] = None,
  parentProcessOrder: Option[Long] = None,
  name: Option[String] = None,
  valueT: Option[String] = None,
  valueN: Option[Long] = None,
  isDefault: Option[Long] = None,
  fileType: Option[Long] = None,
  userDirectory: Option[String] = None,
  userFileName: Option[String] = None,
  fileName: Option[String] = None,
  extendSize: Option[Long] = None,
  fileMaxSize: Option[Long] = None,
  processName: Option[String] = None,
  lastUpdate: Option[DateTime] = None,
  workItem: Option[String] = None,
  objectNumber: Option[Long] = None,
  completedBytes: Option[Long] = None,
  totalBytes: Option[Long] = None,
  metadataIo: Option[Long] = None,
  dataIo: Option[Long] = None,
  cumulativeTime: Option[Long] = None,
  packetNumber: Option[Long] = None,
  instanceId: Option[Long] = None,
  oldValue: Option[String] = None,
  seed: Option[Long] = None,
  lastFile: Option[Long] = None,
  userName: Option[String] = None,
  operation: Option[String] = None,
  jobMode: Option[String] = None,
  queueTabnum: Option[Long] = None,
  controlQueue: Option[String] = None,
  statusQueue: Option[String] = None,
  remoteLink: Option[String] = None,
  version: Option[Long] = None,
  jobVersion: Option[String] = None,
  dbVersion: Option[String] = None,
  timezone: Option[String] = None,
  state: Option[String] = None,
  phase: Option[Long] = None,
  guid: Option[Array[Byte]] = None,
  startTime: Option[DateTime] = None,
  blockSize: Option[Long] = None,
  metadataBufferSize: Option[Long] = None,
  dataBufferSize: Option[Long] = None,
  degree: Option[Long] = None,
  platform: Option[String] = None,
  abortStep: Option[Long] = None,
  instance: Option[String] = None,
  clusterOk: Option[Long] = None,
  serviceName: Option[String] = None,
  objectIntOid: Option[String] = None) {

  def save()(implicit session: DBSession = SysImportSchema01.autoSession): SysImportSchema01 = SysImportSchema01.save(this)(session)

  def destroy()(implicit session: DBSession = SysImportSchema01.autoSession): Unit = SysImportSchema01.destroy(this)(session)

}


object SysImportSchema01 extends SQLSyntaxSupport[SysImportSchema01] {

  override val tableName = "SYS_IMPORT_SCHEMA_01"

  override val columns = Seq("PROCESS_ORDER", "DUPLICATE", "DUMP_FILEID", "DUMP_POSITION", "DUMP_LENGTH", "DUMP_ORIG_LENGTH", "DUMP_ALLOCATION", "COMPLETED_ROWS", "ERROR_COUNT", "ELAPSED_TIME", "OBJECT_TYPE_PATH", "OBJECT_PATH_SEQNO", "OBJECT_TYPE", "IN_PROGRESS", "OBJECT_NAME", "OBJECT_LONG_NAME", "OBJECT_SCHEMA", "ORIGINAL_OBJECT_SCHEMA", "ORIGINAL_OBJECT_NAME", "PARTITION_NAME", "SUBPARTITION_NAME", "DATAOBJ_NUM", "FLAGS", "PROPERTY", "TRIGFLAG", "CREATION_LEVEL", "COMPLETION_TIME", "OBJECT_TABLESPACE", "SIZE_ESTIMATE", "OBJECT_ROW", "PROCESSING_STATE", "PROCESSING_STATUS", "BASE_PROCESS_ORDER", "BASE_OBJECT_TYPE", "BASE_OBJECT_NAME", "BASE_OBJECT_SCHEMA", "ANCESTOR_PROCESS_ORDER", "DOMAIN_PROCESS_ORDER", "PARALLELIZATION", "UNLOAD_METHOD", "LOAD_METHOD", "GRANULES", "SCN", "GRANTOR", "XML_CLOB", "PARENT_PROCESS_ORDER", "NAME", "VALUE_T", "VALUE_N", "IS_DEFAULT", "FILE_TYPE", "USER_DIRECTORY", "USER_FILE_NAME", "FILE_NAME", "EXTEND_SIZE", "FILE_MAX_SIZE", "PROCESS_NAME", "LAST_UPDATE", "WORK_ITEM", "OBJECT_NUMBER", "COMPLETED_BYTES", "TOTAL_BYTES", "METADATA_IO", "DATA_IO", "CUMULATIVE_TIME", "PACKET_NUMBER", "INSTANCE_ID", "OLD_VALUE", "SEED", "LAST_FILE", "USER_NAME", "OPERATION", "JOB_MODE", "QUEUE_TABNUM", "CONTROL_QUEUE", "STATUS_QUEUE", "REMOTE_LINK", "VERSION", "JOB_VERSION", "DB_VERSION", "TIMEZONE", "STATE", "PHASE", "GUID", "START_TIME", "BLOCK_SIZE", "METADATA_BUFFER_SIZE", "DATA_BUFFER_SIZE", "DEGREE", "PLATFORM", "ABORT_STEP", "INSTANCE", "CLUSTER_OK", "SERVICE_NAME", "OBJECT_INT_OID")

  def apply(sis: SyntaxProvider[SysImportSchema01])(rs: WrappedResultSet): SysImportSchema01 = apply(sis.resultName)(rs)
  def apply(sis: ResultName[SysImportSchema01])(rs: WrappedResultSet): SysImportSchema01 = new SysImportSchema01(
    processOrder = rs.get(sis.processOrder),
    duplicate = rs.get(sis.duplicate),
    dumpFileid = rs.get(sis.dumpFileid),
    dumpPosition = rs.get(sis.dumpPosition),
    dumpLength = rs.get(sis.dumpLength),
    dumpOrigLength = rs.get(sis.dumpOrigLength),
    dumpAllocation = rs.get(sis.dumpAllocation),
    completedRows = rs.get(sis.completedRows),
    errorCount = rs.get(sis.errorCount),
    elapsedTime = rs.get(sis.elapsedTime),
    objectTypePath = rs.get(sis.objectTypePath),
    objectPathSeqno = rs.get(sis.objectPathSeqno),
    objectType = rs.get(sis.objectType),
    inProgress = rs.get(sis.inProgress),
    objectName = rs.get(sis.objectName),
    objectLongName = rs.get(sis.objectLongName),
    objectSchema = rs.get(sis.objectSchema),
    originalObjectSchema = rs.get(sis.originalObjectSchema),
    originalObjectName = rs.get(sis.originalObjectName),
    partitionName = rs.get(sis.partitionName),
    subpartitionName = rs.get(sis.subpartitionName),
    dataobjNum = rs.get(sis.dataobjNum),
    flags = rs.get(sis.flags),
    property = rs.get(sis.property),
    trigflag = rs.get(sis.trigflag),
    creationLevel = rs.get(sis.creationLevel),
    completionTime = rs.get(sis.completionTime),
    objectTablespace = rs.get(sis.objectTablespace),
    sizeEstimate = rs.get(sis.sizeEstimate),
    objectRow = rs.get(sis.objectRow),
    processingState = rs.get(sis.processingState),
    processingStatus = rs.get(sis.processingStatus),
    baseProcessOrder = rs.get(sis.baseProcessOrder),
    baseObjectType = rs.get(sis.baseObjectType),
    baseObjectName = rs.get(sis.baseObjectName),
    baseObjectSchema = rs.get(sis.baseObjectSchema),
    ancestorProcessOrder = rs.get(sis.ancestorProcessOrder),
    domainProcessOrder = rs.get(sis.domainProcessOrder),
    parallelization = rs.get(sis.parallelization),
    unloadMethod = rs.get(sis.unloadMethod),
    loadMethod = rs.get(sis.loadMethod),
    granules = rs.get(sis.granules),
    scn = rs.get(sis.scn),
    grantor = rs.get(sis.grantor),
    xmlClob = rs.get(sis.xmlClob),
    parentProcessOrder = rs.get(sis.parentProcessOrder),
    name = rs.get(sis.name),
    valueT = rs.get(sis.valueT),
    valueN = rs.get(sis.valueN),
    isDefault = rs.get(sis.isDefault),
    fileType = rs.get(sis.fileType),
    userDirectory = rs.get(sis.userDirectory),
    userFileName = rs.get(sis.userFileName),
    fileName = rs.get(sis.fileName),
    extendSize = rs.get(sis.extendSize),
    fileMaxSize = rs.get(sis.fileMaxSize),
    processName = rs.get(sis.processName),
    lastUpdate = rs.get(sis.lastUpdate),
    workItem = rs.get(sis.workItem),
    objectNumber = rs.get(sis.objectNumber),
    completedBytes = rs.get(sis.completedBytes),
    totalBytes = rs.get(sis.totalBytes),
    metadataIo = rs.get(sis.metadataIo),
    dataIo = rs.get(sis.dataIo),
    cumulativeTime = rs.get(sis.cumulativeTime),
    packetNumber = rs.get(sis.packetNumber),
    instanceId = rs.get(sis.instanceId),
    oldValue = rs.get(sis.oldValue),
    seed = rs.get(sis.seed),
    lastFile = rs.get(sis.lastFile),
    userName = rs.get(sis.userName),
    operation = rs.get(sis.operation),
    jobMode = rs.get(sis.jobMode),
    queueTabnum = rs.get(sis.queueTabnum),
    controlQueue = rs.get(sis.controlQueue),
    statusQueue = rs.get(sis.statusQueue),
    remoteLink = rs.get(sis.remoteLink),
    version = rs.get(sis.version),
    jobVersion = rs.get(sis.jobVersion),
    dbVersion = rs.get(sis.dbVersion),
    timezone = rs.get(sis.timezone),
    state = rs.get(sis.state),
    phase = rs.get(sis.phase),
    guid = rs.get(sis.guid),
    startTime = rs.get(sis.startTime),
    blockSize = rs.get(sis.blockSize),
    metadataBufferSize = rs.get(sis.metadataBufferSize),
    dataBufferSize = rs.get(sis.dataBufferSize),
    degree = rs.get(sis.degree),
    platform = rs.get(sis.platform),
    abortStep = rs.get(sis.abortStep),
    instance = rs.get(sis.instance),
    clusterOk = rs.get(sis.clusterOk),
    serviceName = rs.get(sis.serviceName),
    objectIntOid = rs.get(sis.objectIntOid)
  )

  val sis = SysImportSchema01.syntax("sis")

 override def autoSession = nirvana.hall.api.services.AutoSpringDataSourceSession()

  def find(processOrder: Option[Long], duplicate: Option[Long], dumpFileid: Option[Long], dumpPosition: Option[Long], dumpLength: Option[Long], dumpOrigLength: Option[Long], dumpAllocation: Option[Long], completedRows: Option[Long], errorCount: Option[Long], elapsedTime: Option[Long], objectTypePath: Option[String], objectPathSeqno: Option[Long], objectType: Option[String], inProgress: Option[String], objectName: Option[String], objectLongName: Option[String], objectSchema: Option[String], originalObjectSchema: Option[String], originalObjectName: Option[String], partitionName: Option[String], subpartitionName: Option[String], dataobjNum: Option[Long], flags: Option[Long], property: Option[Long], trigflag: Option[Long], creationLevel: Option[Long], completionTime: Option[DateTime], objectTablespace: Option[String], sizeEstimate: Option[Long], objectRow: Option[Long], processingState: Option[String], processingStatus: Option[String], baseProcessOrder: Option[Long], baseObjectType: Option[String], baseObjectName: Option[String], baseObjectSchema: Option[String], ancestorProcessOrder: Option[Long], domainProcessOrder: Option[Long], parallelization: Option[Long], unloadMethod: Option[Long], loadMethod: Option[Long], granules: Option[Long], scn: Option[Long], grantor: Option[String], xmlClob: Option[Clob], parentProcessOrder: Option[Long], name: Option[String], valueT: Option[String], valueN: Option[Long], isDefault: Option[Long], fileType: Option[Long], userDirectory: Option[String], userFileName: Option[String], fileName: Option[String], extendSize: Option[Long], fileMaxSize: Option[Long], processName: Option[String], lastUpdate: Option[DateTime], workItem: Option[String], objectNumber: Option[Long], completedBytes: Option[Long], totalBytes: Option[Long], metadataIo: Option[Long], dataIo: Option[Long], cumulativeTime: Option[Long], packetNumber: Option[Long], instanceId: Option[Long], oldValue: Option[String], seed: Option[Long], lastFile: Option[Long], userName: Option[String], operation: Option[String], jobMode: Option[String], queueTabnum: Option[Long], controlQueue: Option[String], statusQueue: Option[String], remoteLink: Option[String], version: Option[Long], jobVersion: Option[String], dbVersion: Option[String], timezone: Option[String], state: Option[String], phase: Option[Long], guid: Option[Array[Byte]], startTime: Option[DateTime], blockSize: Option[Long], metadataBufferSize: Option[Long], dataBufferSize: Option[Long], degree: Option[Long], platform: Option[String], abortStep: Option[Long], instance: Option[String], clusterOk: Option[Long], serviceName: Option[String], objectIntOid: Option[String])(implicit session: DBSession = autoSession): Option[SysImportSchema01] = {
    withSQL {
      select.from(SysImportSchema01 as sis).where.eq(sis.processOrder, processOrder).and.eq(sis.duplicate, duplicate).and.eq(sis.dumpFileid, dumpFileid).and.eq(sis.dumpPosition, dumpPosition).and.eq(sis.dumpLength, dumpLength).and.eq(sis.dumpOrigLength, dumpOrigLength).and.eq(sis.dumpAllocation, dumpAllocation).and.eq(sis.completedRows, completedRows).and.eq(sis.errorCount, errorCount).and.eq(sis.elapsedTime, elapsedTime).and.eq(sis.objectTypePath, objectTypePath).and.eq(sis.objectPathSeqno, objectPathSeqno).and.eq(sis.objectType, objectType).and.eq(sis.inProgress, inProgress).and.eq(sis.objectName, objectName).and.eq(sis.objectLongName, objectLongName).and.eq(sis.objectSchema, objectSchema).and.eq(sis.originalObjectSchema, originalObjectSchema).and.eq(sis.originalObjectName, originalObjectName).and.eq(sis.partitionName, partitionName).and.eq(sis.subpartitionName, subpartitionName).and.eq(sis.dataobjNum, dataobjNum).and.eq(sis.flags, flags).and.eq(sis.property, property).and.eq(sis.trigflag, trigflag).and.eq(sis.creationLevel, creationLevel).and.eq(sis.completionTime, completionTime).and.eq(sis.objectTablespace, objectTablespace).and.eq(sis.sizeEstimate, sizeEstimate).and.eq(sis.objectRow, objectRow).and.eq(sis.processingState, processingState).and.eq(sis.processingStatus, processingStatus).and.eq(sis.baseProcessOrder, baseProcessOrder).and.eq(sis.baseObjectType, baseObjectType).and.eq(sis.baseObjectName, baseObjectName).and.eq(sis.baseObjectSchema, baseObjectSchema).and.eq(sis.ancestorProcessOrder, ancestorProcessOrder).and.eq(sis.domainProcessOrder, domainProcessOrder).and.eq(sis.parallelization, parallelization).and.eq(sis.unloadMethod, unloadMethod).and.eq(sis.loadMethod, loadMethod).and.eq(sis.granules, granules).and.eq(sis.scn, scn).and.eq(sis.grantor, grantor).and.eq(sis.xmlClob, xmlClob).and.eq(sis.parentProcessOrder, parentProcessOrder).and.eq(sis.name, name).and.eq(sis.valueT, valueT).and.eq(sis.valueN, valueN).and.eq(sis.isDefault, isDefault).and.eq(sis.fileType, fileType).and.eq(sis.userDirectory, userDirectory).and.eq(sis.userFileName, userFileName).and.eq(sis.fileName, fileName).and.eq(sis.extendSize, extendSize).and.eq(sis.fileMaxSize, fileMaxSize).and.eq(sis.processName, processName).and.eq(sis.lastUpdate, lastUpdate).and.eq(sis.workItem, workItem).and.eq(sis.objectNumber, objectNumber).and.eq(sis.completedBytes, completedBytes).and.eq(sis.totalBytes, totalBytes).and.eq(sis.metadataIo, metadataIo).and.eq(sis.dataIo, dataIo).and.eq(sis.cumulativeTime, cumulativeTime).and.eq(sis.packetNumber, packetNumber).and.eq(sis.instanceId, instanceId).and.eq(sis.oldValue, oldValue).and.eq(sis.seed, seed).and.eq(sis.lastFile, lastFile).and.eq(sis.userName, userName).and.eq(sis.operation, operation).and.eq(sis.jobMode, jobMode).and.eq(sis.queueTabnum, queueTabnum).and.eq(sis.controlQueue, controlQueue).and.eq(sis.statusQueue, statusQueue).and.eq(sis.remoteLink, remoteLink).and.eq(sis.version, version).and.eq(sis.jobVersion, jobVersion).and.eq(sis.dbVersion, dbVersion).and.eq(sis.timezone, timezone).and.eq(sis.state, state).and.eq(sis.phase, phase).and.eq(sis.guid, guid).and.eq(sis.startTime, startTime).and.eq(sis.blockSize, blockSize).and.eq(sis.metadataBufferSize, metadataBufferSize).and.eq(sis.dataBufferSize, dataBufferSize).and.eq(sis.degree, degree).and.eq(sis.platform, platform).and.eq(sis.abortStep, abortStep).and.eq(sis.instance, instance).and.eq(sis.clusterOk, clusterOk).and.eq(sis.serviceName, serviceName).and.eq(sis.objectIntOid, objectIntOid)
    }.map(SysImportSchema01(sis.resultName)).single.apply()
  }

  def findAll()(implicit session: DBSession = autoSession): List[SysImportSchema01] = {
    withSQL(select.from(SysImportSchema01 as sis)).map(SysImportSchema01(sis.resultName)).list.apply()
  }

  def countAll()(implicit session: DBSession = autoSession): Long = {
    withSQL(select(sqls.count).from(SysImportSchema01 as sis)).map(rs => rs.long(1)).single.apply().get
  }

  def findBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Option[SysImportSchema01] = {
    withSQL {
      select.from(SysImportSchema01 as sis).where.append(where)
    }.map(SysImportSchema01(sis.resultName)).single.apply()
  }

  def findAllBy(where: SQLSyntax)(implicit session: DBSession = autoSession): List[SysImportSchema01] = {
    withSQL {
      select.from(SysImportSchema01 as sis).where.append(where)
    }.map(SysImportSchema01(sis.resultName)).list.apply()
  }

  def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {
    withSQL {
      select(sqls.count).from(SysImportSchema01 as sis).where.append(where)
    }.map(_.long(1)).single.apply().get
  }

  def create(
    processOrder: Option[Long] = None,
    duplicate: Option[Long] = None,
    dumpFileid: Option[Long] = None,
    dumpPosition: Option[Long] = None,
    dumpLength: Option[Long] = None,
    dumpOrigLength: Option[Long] = None,
    dumpAllocation: Option[Long] = None,
    completedRows: Option[Long] = None,
    errorCount: Option[Long] = None,
    elapsedTime: Option[Long] = None,
    objectTypePath: Option[String] = None,
    objectPathSeqno: Option[Long] = None,
    objectType: Option[String] = None,
    inProgress: Option[String] = None,
    objectName: Option[String] = None,
    objectLongName: Option[String] = None,
    objectSchema: Option[String] = None,
    originalObjectSchema: Option[String] = None,
    originalObjectName: Option[String] = None,
    partitionName: Option[String] = None,
    subpartitionName: Option[String] = None,
    dataobjNum: Option[Long] = None,
    flags: Option[Long] = None,
    property: Option[Long] = None,
    trigflag: Option[Long] = None,
    creationLevel: Option[Long] = None,
    completionTime: Option[DateTime] = None,
    objectTablespace: Option[String] = None,
    sizeEstimate: Option[Long] = None,
    objectRow: Option[Long] = None,
    processingState: Option[String] = None,
    processingStatus: Option[String] = None,
    baseProcessOrder: Option[Long] = None,
    baseObjectType: Option[String] = None,
    baseObjectName: Option[String] = None,
    baseObjectSchema: Option[String] = None,
    ancestorProcessOrder: Option[Long] = None,
    domainProcessOrder: Option[Long] = None,
    parallelization: Option[Long] = None,
    unloadMethod: Option[Long] = None,
    loadMethod: Option[Long] = None,
    granules: Option[Long] = None,
    scn: Option[Long] = None,
    grantor: Option[String] = None,
    xmlClob: Option[Clob] = None,
    parentProcessOrder: Option[Long] = None,
    name: Option[String] = None,
    valueT: Option[String] = None,
    valueN: Option[Long] = None,
    isDefault: Option[Long] = None,
    fileType: Option[Long] = None,
    userDirectory: Option[String] = None,
    userFileName: Option[String] = None,
    fileName: Option[String] = None,
    extendSize: Option[Long] = None,
    fileMaxSize: Option[Long] = None,
    processName: Option[String] = None,
    lastUpdate: Option[DateTime] = None,
    workItem: Option[String] = None,
    objectNumber: Option[Long] = None,
    completedBytes: Option[Long] = None,
    totalBytes: Option[Long] = None,
    metadataIo: Option[Long] = None,
    dataIo: Option[Long] = None,
    cumulativeTime: Option[Long] = None,
    packetNumber: Option[Long] = None,
    instanceId: Option[Long] = None,
    oldValue: Option[String] = None,
    seed: Option[Long] = None,
    lastFile: Option[Long] = None,
    userName: Option[String] = None,
    operation: Option[String] = None,
    jobMode: Option[String] = None,
    queueTabnum: Option[Long] = None,
    controlQueue: Option[String] = None,
    statusQueue: Option[String] = None,
    remoteLink: Option[String] = None,
    version: Option[Long] = None,
    jobVersion: Option[String] = None,
    dbVersion: Option[String] = None,
    timezone: Option[String] = None,
    state: Option[String] = None,
    phase: Option[Long] = None,
    guid: Option[Array[Byte]] = None,
    startTime: Option[DateTime] = None,
    blockSize: Option[Long] = None,
    metadataBufferSize: Option[Long] = None,
    dataBufferSize: Option[Long] = None,
    degree: Option[Long] = None,
    platform: Option[String] = None,
    abortStep: Option[Long] = None,
    instance: Option[String] = None,
    clusterOk: Option[Long] = None,
    serviceName: Option[String] = None,
    objectIntOid: Option[String] = None)(implicit session: DBSession = autoSession): SysImportSchema01 = {
    withSQL {
      insert.into(SysImportSchema01).columns(
        column.processOrder,
        column.duplicate,
        column.dumpFileid,
        column.dumpPosition,
        column.dumpLength,
        column.dumpOrigLength,
        column.dumpAllocation,
        column.completedRows,
        column.errorCount,
        column.elapsedTime,
        column.objectTypePath,
        column.objectPathSeqno,
        column.objectType,
        column.inProgress,
        column.objectName,
        column.objectLongName,
        column.objectSchema,
        column.originalObjectSchema,
        column.originalObjectName,
        column.partitionName,
        column.subpartitionName,
        column.dataobjNum,
        column.flags,
        column.property,
        column.trigflag,
        column.creationLevel,
        column.completionTime,
        column.objectTablespace,
        column.sizeEstimate,
        column.objectRow,
        column.processingState,
        column.processingStatus,
        column.baseProcessOrder,
        column.baseObjectType,
        column.baseObjectName,
        column.baseObjectSchema,
        column.ancestorProcessOrder,
        column.domainProcessOrder,
        column.parallelization,
        column.unloadMethod,
        column.loadMethod,
        column.granules,
        column.scn,
        column.grantor,
        column.xmlClob,
        column.parentProcessOrder,
        column.name,
        column.valueT,
        column.valueN,
        column.isDefault,
        column.fileType,
        column.userDirectory,
        column.userFileName,
        column.fileName,
        column.extendSize,
        column.fileMaxSize,
        column.processName,
        column.lastUpdate,
        column.workItem,
        column.objectNumber,
        column.completedBytes,
        column.totalBytes,
        column.metadataIo,
        column.dataIo,
        column.cumulativeTime,
        column.packetNumber,
        column.instanceId,
        column.oldValue,
        column.seed,
        column.lastFile,
        column.userName,
        column.operation,
        column.jobMode,
        column.queueTabnum,
        column.controlQueue,
        column.statusQueue,
        column.remoteLink,
        column.version,
        column.jobVersion,
        column.dbVersion,
        column.timezone,
        column.state,
        column.phase,
        column.guid,
        column.startTime,
        column.blockSize,
        column.metadataBufferSize,
        column.dataBufferSize,
        column.degree,
        column.platform,
        column.abortStep,
        column.instance,
        column.clusterOk,
        column.serviceName,
        column.objectIntOid
      ).values(
        processOrder,
        duplicate,
        dumpFileid,
        dumpPosition,
        dumpLength,
        dumpOrigLength,
        dumpAllocation,
        completedRows,
        errorCount,
        elapsedTime,
        objectTypePath,
        objectPathSeqno,
        objectType,
        inProgress,
        objectName,
        objectLongName,
        objectSchema,
        originalObjectSchema,
        originalObjectName,
        partitionName,
        subpartitionName,
        dataobjNum,
        flags,
        property,
        trigflag,
        creationLevel,
        completionTime,
        objectTablespace,
        sizeEstimate,
        objectRow,
        processingState,
        processingStatus,
        baseProcessOrder,
        baseObjectType,
        baseObjectName,
        baseObjectSchema,
        ancestorProcessOrder,
        domainProcessOrder,
        parallelization,
        unloadMethod,
        loadMethod,
        granules,
        scn,
        grantor,
        xmlClob,
        parentProcessOrder,
        name,
        valueT,
        valueN,
        isDefault,
        fileType,
        userDirectory,
        userFileName,
        fileName,
        extendSize,
        fileMaxSize,
        processName,
        lastUpdate,
        workItem,
        objectNumber,
        completedBytes,
        totalBytes,
        metadataIo,
        dataIo,
        cumulativeTime,
        packetNumber,
        instanceId,
        oldValue,
        seed,
        lastFile,
        userName,
        operation,
        jobMode,
        queueTabnum,
        controlQueue,
        statusQueue,
        remoteLink,
        version,
        jobVersion,
        dbVersion,
        timezone,
        state,
        phase,
        guid,
        startTime,
        blockSize,
        metadataBufferSize,
        dataBufferSize,
        degree,
        platform,
        abortStep,
        instance,
        clusterOk,
        serviceName,
        objectIntOid
      )
    }.update.apply()

    new SysImportSchema01(
      processOrder = processOrder,
      duplicate = duplicate,
      dumpFileid = dumpFileid,
      dumpPosition = dumpPosition,
      dumpLength = dumpLength,
      dumpOrigLength = dumpOrigLength,
      dumpAllocation = dumpAllocation,
      completedRows = completedRows,
      errorCount = errorCount,
      elapsedTime = elapsedTime,
      objectTypePath = objectTypePath,
      objectPathSeqno = objectPathSeqno,
      objectType = objectType,
      inProgress = inProgress,
      objectName = objectName,
      objectLongName = objectLongName,
      objectSchema = objectSchema,
      originalObjectSchema = originalObjectSchema,
      originalObjectName = originalObjectName,
      partitionName = partitionName,
      subpartitionName = subpartitionName,
      dataobjNum = dataobjNum,
      flags = flags,
      property = property,
      trigflag = trigflag,
      creationLevel = creationLevel,
      completionTime = completionTime,
      objectTablespace = objectTablespace,
      sizeEstimate = sizeEstimate,
      objectRow = objectRow,
      processingState = processingState,
      processingStatus = processingStatus,
      baseProcessOrder = baseProcessOrder,
      baseObjectType = baseObjectType,
      baseObjectName = baseObjectName,
      baseObjectSchema = baseObjectSchema,
      ancestorProcessOrder = ancestorProcessOrder,
      domainProcessOrder = domainProcessOrder,
      parallelization = parallelization,
      unloadMethod = unloadMethod,
      loadMethod = loadMethod,
      granules = granules,
      scn = scn,
      grantor = grantor,
      xmlClob = xmlClob,
      parentProcessOrder = parentProcessOrder,
      name = name,
      valueT = valueT,
      valueN = valueN,
      isDefault = isDefault,
      fileType = fileType,
      userDirectory = userDirectory,
      userFileName = userFileName,
      fileName = fileName,
      extendSize = extendSize,
      fileMaxSize = fileMaxSize,
      processName = processName,
      lastUpdate = lastUpdate,
      workItem = workItem,
      objectNumber = objectNumber,
      completedBytes = completedBytes,
      totalBytes = totalBytes,
      metadataIo = metadataIo,
      dataIo = dataIo,
      cumulativeTime = cumulativeTime,
      packetNumber = packetNumber,
      instanceId = instanceId,
      oldValue = oldValue,
      seed = seed,
      lastFile = lastFile,
      userName = userName,
      operation = operation,
      jobMode = jobMode,
      queueTabnum = queueTabnum,
      controlQueue = controlQueue,
      statusQueue = statusQueue,
      remoteLink = remoteLink,
      version = version,
      jobVersion = jobVersion,
      dbVersion = dbVersion,
      timezone = timezone,
      state = state,
      phase = phase,
      guid = guid,
      startTime = startTime,
      blockSize = blockSize,
      metadataBufferSize = metadataBufferSize,
      dataBufferSize = dataBufferSize,
      degree = degree,
      platform = platform,
      abortStep = abortStep,
      instance = instance,
      clusterOk = clusterOk,
      serviceName = serviceName,
      objectIntOid = objectIntOid)
  }

  def save(entity: SysImportSchema01)(implicit session: DBSession = autoSession): SysImportSchema01 = {
    withSQL {
      update(SysImportSchema01).set(
        column.processOrder -> entity.processOrder,
        column.duplicate -> entity.duplicate,
        column.dumpFileid -> entity.dumpFileid,
        column.dumpPosition -> entity.dumpPosition,
        column.dumpLength -> entity.dumpLength,
        column.dumpOrigLength -> entity.dumpOrigLength,
        column.dumpAllocation -> entity.dumpAllocation,
        column.completedRows -> entity.completedRows,
        column.errorCount -> entity.errorCount,
        column.elapsedTime -> entity.elapsedTime,
        column.objectTypePath -> entity.objectTypePath,
        column.objectPathSeqno -> entity.objectPathSeqno,
        column.objectType -> entity.objectType,
        column.inProgress -> entity.inProgress,
        column.objectName -> entity.objectName,
        column.objectLongName -> entity.objectLongName,
        column.objectSchema -> entity.objectSchema,
        column.originalObjectSchema -> entity.originalObjectSchema,
        column.originalObjectName -> entity.originalObjectName,
        column.partitionName -> entity.partitionName,
        column.subpartitionName -> entity.subpartitionName,
        column.dataobjNum -> entity.dataobjNum,
        column.flags -> entity.flags,
        column.property -> entity.property,
        column.trigflag -> entity.trigflag,
        column.creationLevel -> entity.creationLevel,
        column.completionTime -> entity.completionTime,
        column.objectTablespace -> entity.objectTablespace,
        column.sizeEstimate -> entity.sizeEstimate,
        column.objectRow -> entity.objectRow,
        column.processingState -> entity.processingState,
        column.processingStatus -> entity.processingStatus,
        column.baseProcessOrder -> entity.baseProcessOrder,
        column.baseObjectType -> entity.baseObjectType,
        column.baseObjectName -> entity.baseObjectName,
        column.baseObjectSchema -> entity.baseObjectSchema,
        column.ancestorProcessOrder -> entity.ancestorProcessOrder,
        column.domainProcessOrder -> entity.domainProcessOrder,
        column.parallelization -> entity.parallelization,
        column.unloadMethod -> entity.unloadMethod,
        column.loadMethod -> entity.loadMethod,
        column.granules -> entity.granules,
        column.scn -> entity.scn,
        column.grantor -> entity.grantor,
        column.xmlClob -> entity.xmlClob,
        column.parentProcessOrder -> entity.parentProcessOrder,
        column.name -> entity.name,
        column.valueT -> entity.valueT,
        column.valueN -> entity.valueN,
        column.isDefault -> entity.isDefault,
        column.fileType -> entity.fileType,
        column.userDirectory -> entity.userDirectory,
        column.userFileName -> entity.userFileName,
        column.fileName -> entity.fileName,
        column.extendSize -> entity.extendSize,
        column.fileMaxSize -> entity.fileMaxSize,
        column.processName -> entity.processName,
        column.lastUpdate -> entity.lastUpdate,
        column.workItem -> entity.workItem,
        column.objectNumber -> entity.objectNumber,
        column.completedBytes -> entity.completedBytes,
        column.totalBytes -> entity.totalBytes,
        column.metadataIo -> entity.metadataIo,
        column.dataIo -> entity.dataIo,
        column.cumulativeTime -> entity.cumulativeTime,
        column.packetNumber -> entity.packetNumber,
        column.instanceId -> entity.instanceId,
        column.oldValue -> entity.oldValue,
        column.seed -> entity.seed,
        column.lastFile -> entity.lastFile,
        column.userName -> entity.userName,
        column.operation -> entity.operation,
        column.jobMode -> entity.jobMode,
        column.queueTabnum -> entity.queueTabnum,
        column.controlQueue -> entity.controlQueue,
        column.statusQueue -> entity.statusQueue,
        column.remoteLink -> entity.remoteLink,
        column.version -> entity.version,
        column.jobVersion -> entity.jobVersion,
        column.dbVersion -> entity.dbVersion,
        column.timezone -> entity.timezone,
        column.state -> entity.state,
        column.phase -> entity.phase,
        column.guid -> entity.guid,
        column.startTime -> entity.startTime,
        column.blockSize -> entity.blockSize,
        column.metadataBufferSize -> entity.metadataBufferSize,
        column.dataBufferSize -> entity.dataBufferSize,
        column.degree -> entity.degree,
        column.platform -> entity.platform,
        column.abortStep -> entity.abortStep,
        column.instance -> entity.instance,
        column.clusterOk -> entity.clusterOk,
        column.serviceName -> entity.serviceName,
        column.objectIntOid -> entity.objectIntOid
      ).where.eq(column.processOrder, entity.processOrder).and.eq(column.duplicate, entity.duplicate).and.eq(column.dumpFileid, entity.dumpFileid).and.eq(column.dumpPosition, entity.dumpPosition).and.eq(column.dumpLength, entity.dumpLength).and.eq(column.dumpOrigLength, entity.dumpOrigLength).and.eq(column.dumpAllocation, entity.dumpAllocation).and.eq(column.completedRows, entity.completedRows).and.eq(column.errorCount, entity.errorCount).and.eq(column.elapsedTime, entity.elapsedTime).and.eq(column.objectTypePath, entity.objectTypePath).and.eq(column.objectPathSeqno, entity.objectPathSeqno).and.eq(column.objectType, entity.objectType).and.eq(column.inProgress, entity.inProgress).and.eq(column.objectName, entity.objectName).and.eq(column.objectLongName, entity.objectLongName).and.eq(column.objectSchema, entity.objectSchema).and.eq(column.originalObjectSchema, entity.originalObjectSchema).and.eq(column.originalObjectName, entity.originalObjectName).and.eq(column.partitionName, entity.partitionName).and.eq(column.subpartitionName, entity.subpartitionName).and.eq(column.dataobjNum, entity.dataobjNum).and.eq(column.flags, entity.flags).and.eq(column.property, entity.property).and.eq(column.trigflag, entity.trigflag).and.eq(column.creationLevel, entity.creationLevel).and.eq(column.completionTime, entity.completionTime).and.eq(column.objectTablespace, entity.objectTablespace).and.eq(column.sizeEstimate, entity.sizeEstimate).and.eq(column.objectRow, entity.objectRow).and.eq(column.processingState, entity.processingState).and.eq(column.processingStatus, entity.processingStatus).and.eq(column.baseProcessOrder, entity.baseProcessOrder).and.eq(column.baseObjectType, entity.baseObjectType).and.eq(column.baseObjectName, entity.baseObjectName).and.eq(column.baseObjectSchema, entity.baseObjectSchema).and.eq(column.ancestorProcessOrder, entity.ancestorProcessOrder).and.eq(column.domainProcessOrder, entity.domainProcessOrder).and.eq(column.parallelization, entity.parallelization).and.eq(column.unloadMethod, entity.unloadMethod).and.eq(column.loadMethod, entity.loadMethod).and.eq(column.granules, entity.granules).and.eq(column.scn, entity.scn).and.eq(column.grantor, entity.grantor).and.eq(column.xmlClob, entity.xmlClob).and.eq(column.parentProcessOrder, entity.parentProcessOrder).and.eq(column.name, entity.name).and.eq(column.valueT, entity.valueT).and.eq(column.valueN, entity.valueN).and.eq(column.isDefault, entity.isDefault).and.eq(column.fileType, entity.fileType).and.eq(column.userDirectory, entity.userDirectory).and.eq(column.userFileName, entity.userFileName).and.eq(column.fileName, entity.fileName).and.eq(column.extendSize, entity.extendSize).and.eq(column.fileMaxSize, entity.fileMaxSize).and.eq(column.processName, entity.processName).and.eq(column.lastUpdate, entity.lastUpdate).and.eq(column.workItem, entity.workItem).and.eq(column.objectNumber, entity.objectNumber).and.eq(column.completedBytes, entity.completedBytes).and.eq(column.totalBytes, entity.totalBytes).and.eq(column.metadataIo, entity.metadataIo).and.eq(column.dataIo, entity.dataIo).and.eq(column.cumulativeTime, entity.cumulativeTime).and.eq(column.packetNumber, entity.packetNumber).and.eq(column.instanceId, entity.instanceId).and.eq(column.oldValue, entity.oldValue).and.eq(column.seed, entity.seed).and.eq(column.lastFile, entity.lastFile).and.eq(column.userName, entity.userName).and.eq(column.operation, entity.operation).and.eq(column.jobMode, entity.jobMode).and.eq(column.queueTabnum, entity.queueTabnum).and.eq(column.controlQueue, entity.controlQueue).and.eq(column.statusQueue, entity.statusQueue).and.eq(column.remoteLink, entity.remoteLink).and.eq(column.version, entity.version).and.eq(column.jobVersion, entity.jobVersion).and.eq(column.dbVersion, entity.dbVersion).and.eq(column.timezone, entity.timezone).and.eq(column.state, entity.state).and.eq(column.phase, entity.phase).and.eq(column.guid, entity.guid).and.eq(column.startTime, entity.startTime).and.eq(column.blockSize, entity.blockSize).and.eq(column.metadataBufferSize, entity.metadataBufferSize).and.eq(column.dataBufferSize, entity.dataBufferSize).and.eq(column.degree, entity.degree).and.eq(column.platform, entity.platform).and.eq(column.abortStep, entity.abortStep).and.eq(column.instance, entity.instance).and.eq(column.clusterOk, entity.clusterOk).and.eq(column.serviceName, entity.serviceName).and.eq(column.objectIntOid, entity.objectIntOid)
    }.update.apply()
    entity
  }

  def destroy(entity: SysImportSchema01)(implicit session: DBSession = autoSession): Unit = {
    withSQL { delete.from(SysImportSchema01).where.eq(column.processOrder, entity.processOrder).and.eq(column.duplicate, entity.duplicate).and.eq(column.dumpFileid, entity.dumpFileid).and.eq(column.dumpPosition, entity.dumpPosition).and.eq(column.dumpLength, entity.dumpLength).and.eq(column.dumpOrigLength, entity.dumpOrigLength).and.eq(column.dumpAllocation, entity.dumpAllocation).and.eq(column.completedRows, entity.completedRows).and.eq(column.errorCount, entity.errorCount).and.eq(column.elapsedTime, entity.elapsedTime).and.eq(column.objectTypePath, entity.objectTypePath).and.eq(column.objectPathSeqno, entity.objectPathSeqno).and.eq(column.objectType, entity.objectType).and.eq(column.inProgress, entity.inProgress).and.eq(column.objectName, entity.objectName).and.eq(column.objectLongName, entity.objectLongName).and.eq(column.objectSchema, entity.objectSchema).and.eq(column.originalObjectSchema, entity.originalObjectSchema).and.eq(column.originalObjectName, entity.originalObjectName).and.eq(column.partitionName, entity.partitionName).and.eq(column.subpartitionName, entity.subpartitionName).and.eq(column.dataobjNum, entity.dataobjNum).and.eq(column.flags, entity.flags).and.eq(column.property, entity.property).and.eq(column.trigflag, entity.trigflag).and.eq(column.creationLevel, entity.creationLevel).and.eq(column.completionTime, entity.completionTime).and.eq(column.objectTablespace, entity.objectTablespace).and.eq(column.sizeEstimate, entity.sizeEstimate).and.eq(column.objectRow, entity.objectRow).and.eq(column.processingState, entity.processingState).and.eq(column.processingStatus, entity.processingStatus).and.eq(column.baseProcessOrder, entity.baseProcessOrder).and.eq(column.baseObjectType, entity.baseObjectType).and.eq(column.baseObjectName, entity.baseObjectName).and.eq(column.baseObjectSchema, entity.baseObjectSchema).and.eq(column.ancestorProcessOrder, entity.ancestorProcessOrder).and.eq(column.domainProcessOrder, entity.domainProcessOrder).and.eq(column.parallelization, entity.parallelization).and.eq(column.unloadMethod, entity.unloadMethod).and.eq(column.loadMethod, entity.loadMethod).and.eq(column.granules, entity.granules).and.eq(column.scn, entity.scn).and.eq(column.grantor, entity.grantor).and.eq(column.xmlClob, entity.xmlClob).and.eq(column.parentProcessOrder, entity.parentProcessOrder).and.eq(column.name, entity.name).and.eq(column.valueT, entity.valueT).and.eq(column.valueN, entity.valueN).and.eq(column.isDefault, entity.isDefault).and.eq(column.fileType, entity.fileType).and.eq(column.userDirectory, entity.userDirectory).and.eq(column.userFileName, entity.userFileName).and.eq(column.fileName, entity.fileName).and.eq(column.extendSize, entity.extendSize).and.eq(column.fileMaxSize, entity.fileMaxSize).and.eq(column.processName, entity.processName).and.eq(column.lastUpdate, entity.lastUpdate).and.eq(column.workItem, entity.workItem).and.eq(column.objectNumber, entity.objectNumber).and.eq(column.completedBytes, entity.completedBytes).and.eq(column.totalBytes, entity.totalBytes).and.eq(column.metadataIo, entity.metadataIo).and.eq(column.dataIo, entity.dataIo).and.eq(column.cumulativeTime, entity.cumulativeTime).and.eq(column.packetNumber, entity.packetNumber).and.eq(column.instanceId, entity.instanceId).and.eq(column.oldValue, entity.oldValue).and.eq(column.seed, entity.seed).and.eq(column.lastFile, entity.lastFile).and.eq(column.userName, entity.userName).and.eq(column.operation, entity.operation).and.eq(column.jobMode, entity.jobMode).and.eq(column.queueTabnum, entity.queueTabnum).and.eq(column.controlQueue, entity.controlQueue).and.eq(column.statusQueue, entity.statusQueue).and.eq(column.remoteLink, entity.remoteLink).and.eq(column.version, entity.version).and.eq(column.jobVersion, entity.jobVersion).and.eq(column.dbVersion, entity.dbVersion).and.eq(column.timezone, entity.timezone).and.eq(column.state, entity.state).and.eq(column.phase, entity.phase).and.eq(column.guid, entity.guid).and.eq(column.startTime, entity.startTime).and.eq(column.blockSize, entity.blockSize).and.eq(column.metadataBufferSize, entity.metadataBufferSize).and.eq(column.dataBufferSize, entity.dataBufferSize).and.eq(column.degree, entity.degree).and.eq(column.platform, entity.platform).and.eq(column.abortStep, entity.abortStep).and.eq(column.instance, entity.instance).and.eq(column.clusterOk, entity.clusterOk).and.eq(column.serviceName, entity.serviceName).and.eq(column.objectIntOid, entity.objectIntOid) }.update.apply()
  }

}
