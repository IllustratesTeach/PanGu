package nirvana.hall.api.entities

import scalikejdbc._
import org.joda.time.{DateTime}

case class GafisGatherBehavior(
  pkId: String,
  personid: String,
  isgamble: Option[String] = None,
  gambleSiteCode: Option[String] = None,
  gambleSiteStreet: Option[String] = None,
  gambleSiteAddress: Option[String] = None,
  iswhoring: Option[String] = None,
  whoringSiteCode: Option[String] = None,
  whoringSiteStreet: Option[String] = None,
  whoringSiteAddress: Option[String] = None,
  whoringAgeGroup: Option[String] = None,
  isdrug: Option[String] = None,
  drugSiteType: Option[String] = None,
  drugTime: Option[String] = None,
  drugTreatmentDetail: Option[String] = None,
  drugTrafficking: Option[String] = None,
  drugType: Option[String] = None,
  drugSource: Option[String] = None,
  drugSiteCode: Option[String] = None,
  drugSiteStreet: Option[String] = None,
  drugSiteAddress: Option[String] = None,
  isillegal: Option[String] = None,
  footholdCode: Option[String] = None,
  footholdStreet: Option[String] = None,
  footholdAddress: Option[String] = None,
  isfixedDomicile: Option[String] = None,
  fixedDomicileProperty: Option[String] = None,
  nofixedDomicileReason: Option[String] = None,
  isStayHotel: Option[String] = None,
  hotelname: Option[String] = None,
  hotelgradeDict: Option[String] = None,
  hotelregistrationDict: Option[String] = None,
  hotelCode: Option[String] = None,
  hotelStreet: Option[String] = None,
  hotelsiteAddress: Option[String] = None,
  hotelnotregist: Option[String] = None,
  cohabitDetail: Option[String] = None,
  onceLiveCode: Option[String] = None,
  onceLiveStreet: Option[String] = None,
  familyDetail: Option[String] = None,
  comeReason: Option[String] = None,
  onceLiveAddress: Option[String] = None,
  nightsnackCode: Option[String] = None,
  nightsnackStreet: Option[String] = None,
  entertainmentsiteCode: Option[String] = None,
  entertainmentName: Option[String] = None,
  bathCode: Option[String] = None,
  bathStreet: Option[String] = None,
  bathAddress: Option[String] = None,
  nightsnackAddress: Option[String] = None,
  isinternet: Option[String] = None,
  internetsiteDict: Option[String] = None,
  internetregistrationDict: Option[String] = None,
  internetnonid: Option[String] = None,
  isfalseid: Option[String] = None,
  falseidname: Option[String] = None,
  isfackid: Option[String] = None,
  fackidname: Option[String] = None,
  drivingLicence: Option[String] = None,
  drivingLicenceType: Option[String] = None,
  drivingLicenceNo: Option[String] = None,
  drivingLicenceAddress: Option[String] = None,
  rentCarDetail: Option[String] = None,
  drivingexperienceDict: Option[String] = None,
  feelbadreasonDict: Option[String] = None,
  activityarea: Option[String] = None,
  addiction: Option[String] = None,
  interest: Option[String] = None,
  inputtime: Option[DateTime] = None,
  inputpsn: Option[String] = None,
  modifiedtime: Option[DateTime] = None,
  modifiedpsn: Option[String] = None,
  deletag: Option[String] = None) {

  def save()(implicit session: DBSession = GafisGatherBehavior.autoSession): GafisGatherBehavior = GafisGatherBehavior.save(this)(session)

  def destroy()(implicit session: DBSession = GafisGatherBehavior.autoSession): Unit = GafisGatherBehavior.destroy(this)(session)

}


object GafisGatherBehavior extends SQLSyntaxSupport[GafisGatherBehavior] {

  override val tableName = "GAFIS_GATHER_BEHAVIOR"

  override val columns = Seq("PK_ID", "PERSONID", "ISGAMBLE", "GAMBLE_SITE_CODE", "GAMBLE_SITE_STREET", "GAMBLE_SITE_ADDRESS", "ISWHORING", "WHORING_SITE_CODE", "WHORING_SITE_STREET", "WHORING_SITE_ADDRESS", "WHORING_AGE_GROUP", "ISDRUG", "DRUG_SITE_TYPE", "DRUG_TIME", "DRUG_TREATMENT_DETAIL", "DRUG_TRAFFICKING", "DRUG_TYPE", "DRUG_SOURCE", "DRUG_SITE_CODE", "DRUG_SITE_STREET", "DRUG_SITE_ADDRESS", "ISILLEGAL", "FOOTHOLD_CODE", "FOOTHOLD_STREET", "FOOTHOLD_ADDRESS", "ISFIXED_DOMICILE", "FIXED_DOMICILE_PROPERTY", "NOFIXED_DOMICILE_REASON", "IS_STAY_HOTEL", "HOTELNAME", "HOTELGRADE_DICT", "HOTELREGISTRATION_DICT", "HOTEL_CODE", "HOTEL_STREET", "HOTELSITE_ADDRESS", "HOTELNOTREGIST", "COHABIT_DETAIL", "ONCE_LIVE_CODE", "ONCE_LIVE__STREET", "FAMILY_DETAIL", "COME_REASON", "ONCE_LIVE_ADDRESS", "NIGHTSNACK_CODE", "NIGHTSNACK_STREET", "ENTERTAINMENTSITE_CODE", "ENTERTAINMENT_NAME", "BATH_CODE", "BATH_STREET", "BATH_ADDRESS", "NIGHTSNACK_ADDRESS", "ISINTERNET", "INTERNETSITE_DICT", "INTERNETREGISTRATION_DICT", "INTERNETNONID", "ISFALSEID", "FALSEIDNAME", "ISFACKID", "FACKIDNAME", "DRIVING_LICENCE", "DRIVING_LICENCE_TYPE", "DRIVING_LICENCE_NO", "DRIVING_LICENCE_ADDRESS", "RENT_CAR_DETAIL", "DRIVINGEXPERIENCE_DICT", "FEELBADREASON_DICT", "ACTIVITYAREA", "ADDICTION", "INTEREST", "INPUTTIME", "INPUTPSN", "MODIFIEDTIME", "MODIFIEDPSN", "DELETAG")

  def apply(ggb: SyntaxProvider[GafisGatherBehavior])(rs: WrappedResultSet): GafisGatherBehavior = apply(ggb.resultName)(rs)
  def apply(ggb: ResultName[GafisGatherBehavior])(rs: WrappedResultSet): GafisGatherBehavior = new GafisGatherBehavior(
    pkId = rs.get(ggb.pkId),
    personid = rs.get(ggb.personid),
    isgamble = rs.get(ggb.isgamble),
    gambleSiteCode = rs.get(ggb.gambleSiteCode),
    gambleSiteStreet = rs.get(ggb.gambleSiteStreet),
    gambleSiteAddress = rs.get(ggb.gambleSiteAddress),
    iswhoring = rs.get(ggb.iswhoring),
    whoringSiteCode = rs.get(ggb.whoringSiteCode),
    whoringSiteStreet = rs.get(ggb.whoringSiteStreet),
    whoringSiteAddress = rs.get(ggb.whoringSiteAddress),
    whoringAgeGroup = rs.get(ggb.whoringAgeGroup),
    isdrug = rs.get(ggb.isdrug),
    drugSiteType = rs.get(ggb.drugSiteType),
    drugTime = rs.get(ggb.drugTime),
    drugTreatmentDetail = rs.get(ggb.drugTreatmentDetail),
    drugTrafficking = rs.get(ggb.drugTrafficking),
    drugType = rs.get(ggb.drugType),
    drugSource = rs.get(ggb.drugSource),
    drugSiteCode = rs.get(ggb.drugSiteCode),
    drugSiteStreet = rs.get(ggb.drugSiteStreet),
    drugSiteAddress = rs.get(ggb.drugSiteAddress),
    isillegal = rs.get(ggb.isillegal),
    footholdCode = rs.get(ggb.footholdCode),
    footholdStreet = rs.get(ggb.footholdStreet),
    footholdAddress = rs.get(ggb.footholdAddress),
    isfixedDomicile = rs.get(ggb.isfixedDomicile),
    fixedDomicileProperty = rs.get(ggb.fixedDomicileProperty),
    nofixedDomicileReason = rs.get(ggb.nofixedDomicileReason),
    isStayHotel = rs.get(ggb.isStayHotel),
    hotelname = rs.get(ggb.hotelname),
    hotelgradeDict = rs.get(ggb.hotelgradeDict),
    hotelregistrationDict = rs.get(ggb.hotelregistrationDict),
    hotelCode = rs.get(ggb.hotelCode),
    hotelStreet = rs.get(ggb.hotelStreet),
    hotelsiteAddress = rs.get(ggb.hotelsiteAddress),
    hotelnotregist = rs.get(ggb.hotelnotregist),
    cohabitDetail = rs.get(ggb.cohabitDetail),
    onceLiveCode = rs.get(ggb.onceLiveCode),
    onceLiveStreet = rs.get(ggb.onceLiveStreet),
    familyDetail = rs.get(ggb.familyDetail),
    comeReason = rs.get(ggb.comeReason),
    onceLiveAddress = rs.get(ggb.onceLiveAddress),
    nightsnackCode = rs.get(ggb.nightsnackCode),
    nightsnackStreet = rs.get(ggb.nightsnackStreet),
    entertainmentsiteCode = rs.get(ggb.entertainmentsiteCode),
    entertainmentName = rs.get(ggb.entertainmentName),
    bathCode = rs.get(ggb.bathCode),
    bathStreet = rs.get(ggb.bathStreet),
    bathAddress = rs.get(ggb.bathAddress),
    nightsnackAddress = rs.get(ggb.nightsnackAddress),
    isinternet = rs.get(ggb.isinternet),
    internetsiteDict = rs.get(ggb.internetsiteDict),
    internetregistrationDict = rs.get(ggb.internetregistrationDict),
    internetnonid = rs.get(ggb.internetnonid),
    isfalseid = rs.get(ggb.isfalseid),
    falseidname = rs.get(ggb.falseidname),
    isfackid = rs.get(ggb.isfackid),
    fackidname = rs.get(ggb.fackidname),
    drivingLicence = rs.get(ggb.drivingLicence),
    drivingLicenceType = rs.get(ggb.drivingLicenceType),
    drivingLicenceNo = rs.get(ggb.drivingLicenceNo),
    drivingLicenceAddress = rs.get(ggb.drivingLicenceAddress),
    rentCarDetail = rs.get(ggb.rentCarDetail),
    drivingexperienceDict = rs.get(ggb.drivingexperienceDict),
    feelbadreasonDict = rs.get(ggb.feelbadreasonDict),
    activityarea = rs.get(ggb.activityarea),
    addiction = rs.get(ggb.addiction),
    interest = rs.get(ggb.interest),
    inputtime = rs.get(ggb.inputtime),
    inputpsn = rs.get(ggb.inputpsn),
    modifiedtime = rs.get(ggb.modifiedtime),
    modifiedpsn = rs.get(ggb.modifiedpsn),
    deletag = rs.get(ggb.deletag)
  )

  val ggb = GafisGatherBehavior.syntax("ggb")

 override def autoSession = nirvana.hall.api.services.AutoSpringDataSourceSession()

  def find(pkId: String, personid: String, isgamble: Option[String], gambleSiteCode: Option[String], gambleSiteStreet: Option[String], gambleSiteAddress: Option[String], iswhoring: Option[String], whoringSiteCode: Option[String], whoringSiteStreet: Option[String], whoringSiteAddress: Option[String], whoringAgeGroup: Option[String], isdrug: Option[String], drugSiteType: Option[String], drugTime: Option[String], drugTreatmentDetail: Option[String], drugTrafficking: Option[String], drugType: Option[String], drugSource: Option[String], drugSiteCode: Option[String], drugSiteStreet: Option[String], drugSiteAddress: Option[String], isillegal: Option[String], footholdCode: Option[String], footholdStreet: Option[String], footholdAddress: Option[String], isfixedDomicile: Option[String], fixedDomicileProperty: Option[String], nofixedDomicileReason: Option[String], isStayHotel: Option[String], hotelname: Option[String], hotelgradeDict: Option[String], hotelregistrationDict: Option[String], hotelCode: Option[String], hotelStreet: Option[String], hotelsiteAddress: Option[String], hotelnotregist: Option[String], cohabitDetail: Option[String], onceLiveCode: Option[String], onceLiveStreet: Option[String], familyDetail: Option[String], comeReason: Option[String], onceLiveAddress: Option[String], nightsnackCode: Option[String], nightsnackStreet: Option[String], entertainmentsiteCode: Option[String], entertainmentName: Option[String], bathCode: Option[String], bathStreet: Option[String], bathAddress: Option[String], nightsnackAddress: Option[String], isinternet: Option[String], internetsiteDict: Option[String], internetregistrationDict: Option[String], internetnonid: Option[String], isfalseid: Option[String], falseidname: Option[String], isfackid: Option[String], fackidname: Option[String], drivingLicence: Option[String], drivingLicenceType: Option[String], drivingLicenceNo: Option[String], drivingLicenceAddress: Option[String], rentCarDetail: Option[String], drivingexperienceDict: Option[String], feelbadreasonDict: Option[String], activityarea: Option[String], addiction: Option[String], interest: Option[String], inputtime: Option[DateTime], inputpsn: Option[String], modifiedtime: Option[DateTime], modifiedpsn: Option[String], deletag: Option[String])(implicit session: DBSession = autoSession): Option[GafisGatherBehavior] = {
    withSQL {
      select.from(GafisGatherBehavior as ggb).where.eq(ggb.pkId, pkId).and.eq(ggb.personid, personid).and.eq(ggb.isgamble, isgamble).and.eq(ggb.gambleSiteCode, gambleSiteCode).and.eq(ggb.gambleSiteStreet, gambleSiteStreet).and.eq(ggb.gambleSiteAddress, gambleSiteAddress).and.eq(ggb.iswhoring, iswhoring).and.eq(ggb.whoringSiteCode, whoringSiteCode).and.eq(ggb.whoringSiteStreet, whoringSiteStreet).and.eq(ggb.whoringSiteAddress, whoringSiteAddress).and.eq(ggb.whoringAgeGroup, whoringAgeGroup).and.eq(ggb.isdrug, isdrug).and.eq(ggb.drugSiteType, drugSiteType).and.eq(ggb.drugTime, drugTime).and.eq(ggb.drugTreatmentDetail, drugTreatmentDetail).and.eq(ggb.drugTrafficking, drugTrafficking).and.eq(ggb.drugType, drugType).and.eq(ggb.drugSource, drugSource).and.eq(ggb.drugSiteCode, drugSiteCode).and.eq(ggb.drugSiteStreet, drugSiteStreet).and.eq(ggb.drugSiteAddress, drugSiteAddress).and.eq(ggb.isillegal, isillegal).and.eq(ggb.footholdCode, footholdCode).and.eq(ggb.footholdStreet, footholdStreet).and.eq(ggb.footholdAddress, footholdAddress).and.eq(ggb.isfixedDomicile, isfixedDomicile).and.eq(ggb.fixedDomicileProperty, fixedDomicileProperty).and.eq(ggb.nofixedDomicileReason, nofixedDomicileReason).and.eq(ggb.isStayHotel, isStayHotel).and.eq(ggb.hotelname, hotelname).and.eq(ggb.hotelgradeDict, hotelgradeDict).and.eq(ggb.hotelregistrationDict, hotelregistrationDict).and.eq(ggb.hotelCode, hotelCode).and.eq(ggb.hotelStreet, hotelStreet).and.eq(ggb.hotelsiteAddress, hotelsiteAddress).and.eq(ggb.hotelnotregist, hotelnotregist).and.eq(ggb.cohabitDetail, cohabitDetail).and.eq(ggb.onceLiveCode, onceLiveCode).and.eq(ggb.onceLiveStreet, onceLiveStreet).and.eq(ggb.familyDetail, familyDetail).and.eq(ggb.comeReason, comeReason).and.eq(ggb.onceLiveAddress, onceLiveAddress).and.eq(ggb.nightsnackCode, nightsnackCode).and.eq(ggb.nightsnackStreet, nightsnackStreet).and.eq(ggb.entertainmentsiteCode, entertainmentsiteCode).and.eq(ggb.entertainmentName, entertainmentName).and.eq(ggb.bathCode, bathCode).and.eq(ggb.bathStreet, bathStreet).and.eq(ggb.bathAddress, bathAddress).and.eq(ggb.nightsnackAddress, nightsnackAddress).and.eq(ggb.isinternet, isinternet).and.eq(ggb.internetsiteDict, internetsiteDict).and.eq(ggb.internetregistrationDict, internetregistrationDict).and.eq(ggb.internetnonid, internetnonid).and.eq(ggb.isfalseid, isfalseid).and.eq(ggb.falseidname, falseidname).and.eq(ggb.isfackid, isfackid).and.eq(ggb.fackidname, fackidname).and.eq(ggb.drivingLicence, drivingLicence).and.eq(ggb.drivingLicenceType, drivingLicenceType).and.eq(ggb.drivingLicenceNo, drivingLicenceNo).and.eq(ggb.drivingLicenceAddress, drivingLicenceAddress).and.eq(ggb.rentCarDetail, rentCarDetail).and.eq(ggb.drivingexperienceDict, drivingexperienceDict).and.eq(ggb.feelbadreasonDict, feelbadreasonDict).and.eq(ggb.activityarea, activityarea).and.eq(ggb.addiction, addiction).and.eq(ggb.interest, interest).and.eq(ggb.inputtime, inputtime).and.eq(ggb.inputpsn, inputpsn).and.eq(ggb.modifiedtime, modifiedtime).and.eq(ggb.modifiedpsn, modifiedpsn).and.eq(ggb.deletag, deletag)
    }.map(GafisGatherBehavior(ggb.resultName)).single.apply()
  }

  def findAll()(implicit session: DBSession = autoSession): List[GafisGatherBehavior] = {
    withSQL(select.from(GafisGatherBehavior as ggb)).map(GafisGatherBehavior(ggb.resultName)).list.apply()
  }

  def countAll()(implicit session: DBSession = autoSession): Long = {
    withSQL(select(sqls.count).from(GafisGatherBehavior as ggb)).map(rs => rs.long(1)).single.apply().get
  }

  def findBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Option[GafisGatherBehavior] = {
    withSQL {
      select.from(GafisGatherBehavior as ggb).where.append(where)
    }.map(GafisGatherBehavior(ggb.resultName)).single.apply()
  }

  def findAllBy(where: SQLSyntax)(implicit session: DBSession = autoSession): List[GafisGatherBehavior] = {
    withSQL {
      select.from(GafisGatherBehavior as ggb).where.append(where)
    }.map(GafisGatherBehavior(ggb.resultName)).list.apply()
  }

  def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {
    withSQL {
      select(sqls.count).from(GafisGatherBehavior as ggb).where.append(where)
    }.map(_.long(1)).single.apply().get
  }

  def create(
    pkId: String,
    personid: String,
    isgamble: Option[String] = None,
    gambleSiteCode: Option[String] = None,
    gambleSiteStreet: Option[String] = None,
    gambleSiteAddress: Option[String] = None,
    iswhoring: Option[String] = None,
    whoringSiteCode: Option[String] = None,
    whoringSiteStreet: Option[String] = None,
    whoringSiteAddress: Option[String] = None,
    whoringAgeGroup: Option[String] = None,
    isdrug: Option[String] = None,
    drugSiteType: Option[String] = None,
    drugTime: Option[String] = None,
    drugTreatmentDetail: Option[String] = None,
    drugTrafficking: Option[String] = None,
    drugType: Option[String] = None,
    drugSource: Option[String] = None,
    drugSiteCode: Option[String] = None,
    drugSiteStreet: Option[String] = None,
    drugSiteAddress: Option[String] = None,
    isillegal: Option[String] = None,
    footholdCode: Option[String] = None,
    footholdStreet: Option[String] = None,
    footholdAddress: Option[String] = None,
    isfixedDomicile: Option[String] = None,
    fixedDomicileProperty: Option[String] = None,
    nofixedDomicileReason: Option[String] = None,
    isStayHotel: Option[String] = None,
    hotelname: Option[String] = None,
    hotelgradeDict: Option[String] = None,
    hotelregistrationDict: Option[String] = None,
    hotelCode: Option[String] = None,
    hotelStreet: Option[String] = None,
    hotelsiteAddress: Option[String] = None,
    hotelnotregist: Option[String] = None,
    cohabitDetail: Option[String] = None,
    onceLiveCode: Option[String] = None,
    onceLiveStreet: Option[String] = None,
    familyDetail: Option[String] = None,
    comeReason: Option[String] = None,
    onceLiveAddress: Option[String] = None,
    nightsnackCode: Option[String] = None,
    nightsnackStreet: Option[String] = None,
    entertainmentsiteCode: Option[String] = None,
    entertainmentName: Option[String] = None,
    bathCode: Option[String] = None,
    bathStreet: Option[String] = None,
    bathAddress: Option[String] = None,
    nightsnackAddress: Option[String] = None,
    isinternet: Option[String] = None,
    internetsiteDict: Option[String] = None,
    internetregistrationDict: Option[String] = None,
    internetnonid: Option[String] = None,
    isfalseid: Option[String] = None,
    falseidname: Option[String] = None,
    isfackid: Option[String] = None,
    fackidname: Option[String] = None,
    drivingLicence: Option[String] = None,
    drivingLicenceType: Option[String] = None,
    drivingLicenceNo: Option[String] = None,
    drivingLicenceAddress: Option[String] = None,
    rentCarDetail: Option[String] = None,
    drivingexperienceDict: Option[String] = None,
    feelbadreasonDict: Option[String] = None,
    activityarea: Option[String] = None,
    addiction: Option[String] = None,
    interest: Option[String] = None,
    inputtime: Option[DateTime] = None,
    inputpsn: Option[String] = None,
    modifiedtime: Option[DateTime] = None,
    modifiedpsn: Option[String] = None,
    deletag: Option[String] = None)(implicit session: DBSession = autoSession): GafisGatherBehavior = {
    withSQL {
      insert.into(GafisGatherBehavior).columns(
        column.pkId,
        column.personid,
        column.isgamble,
        column.gambleSiteCode,
        column.gambleSiteStreet,
        column.gambleSiteAddress,
        column.iswhoring,
        column.whoringSiteCode,
        column.whoringSiteStreet,
        column.whoringSiteAddress,
        column.whoringAgeGroup,
        column.isdrug,
        column.drugSiteType,
        column.drugTime,
        column.drugTreatmentDetail,
        column.drugTrafficking,
        column.drugType,
        column.drugSource,
        column.drugSiteCode,
        column.drugSiteStreet,
        column.drugSiteAddress,
        column.isillegal,
        column.footholdCode,
        column.footholdStreet,
        column.footholdAddress,
        column.isfixedDomicile,
        column.fixedDomicileProperty,
        column.nofixedDomicileReason,
        column.isStayHotel,
        column.hotelname,
        column.hotelgradeDict,
        column.hotelregistrationDict,
        column.hotelCode,
        column.hotelStreet,
        column.hotelsiteAddress,
        column.hotelnotregist,
        column.cohabitDetail,
        column.onceLiveCode,
        column.onceLiveStreet,
        column.familyDetail,
        column.comeReason,
        column.onceLiveAddress,
        column.nightsnackCode,
        column.nightsnackStreet,
        column.entertainmentsiteCode,
        column.entertainmentName,
        column.bathCode,
        column.bathStreet,
        column.bathAddress,
        column.nightsnackAddress,
        column.isinternet,
        column.internetsiteDict,
        column.internetregistrationDict,
        column.internetnonid,
        column.isfalseid,
        column.falseidname,
        column.isfackid,
        column.fackidname,
        column.drivingLicence,
        column.drivingLicenceType,
        column.drivingLicenceNo,
        column.drivingLicenceAddress,
        column.rentCarDetail,
        column.drivingexperienceDict,
        column.feelbadreasonDict,
        column.activityarea,
        column.addiction,
        column.interest,
        column.inputtime,
        column.inputpsn,
        column.modifiedtime,
        column.modifiedpsn,
        column.deletag
      ).values(
        pkId,
        personid,
        isgamble,
        gambleSiteCode,
        gambleSiteStreet,
        gambleSiteAddress,
        iswhoring,
        whoringSiteCode,
        whoringSiteStreet,
        whoringSiteAddress,
        whoringAgeGroup,
        isdrug,
        drugSiteType,
        drugTime,
        drugTreatmentDetail,
        drugTrafficking,
        drugType,
        drugSource,
        drugSiteCode,
        drugSiteStreet,
        drugSiteAddress,
        isillegal,
        footholdCode,
        footholdStreet,
        footholdAddress,
        isfixedDomicile,
        fixedDomicileProperty,
        nofixedDomicileReason,
        isStayHotel,
        hotelname,
        hotelgradeDict,
        hotelregistrationDict,
        hotelCode,
        hotelStreet,
        hotelsiteAddress,
        hotelnotregist,
        cohabitDetail,
        onceLiveCode,
        onceLiveStreet,
        familyDetail,
        comeReason,
        onceLiveAddress,
        nightsnackCode,
        nightsnackStreet,
        entertainmentsiteCode,
        entertainmentName,
        bathCode,
        bathStreet,
        bathAddress,
        nightsnackAddress,
        isinternet,
        internetsiteDict,
        internetregistrationDict,
        internetnonid,
        isfalseid,
        falseidname,
        isfackid,
        fackidname,
        drivingLicence,
        drivingLicenceType,
        drivingLicenceNo,
        drivingLicenceAddress,
        rentCarDetail,
        drivingexperienceDict,
        feelbadreasonDict,
        activityarea,
        addiction,
        interest,
        inputtime,
        inputpsn,
        modifiedtime,
        modifiedpsn,
        deletag
      )
    }.update.apply()

    new GafisGatherBehavior(
      pkId = pkId,
      personid = personid,
      isgamble = isgamble,
      gambleSiteCode = gambleSiteCode,
      gambleSiteStreet = gambleSiteStreet,
      gambleSiteAddress = gambleSiteAddress,
      iswhoring = iswhoring,
      whoringSiteCode = whoringSiteCode,
      whoringSiteStreet = whoringSiteStreet,
      whoringSiteAddress = whoringSiteAddress,
      whoringAgeGroup = whoringAgeGroup,
      isdrug = isdrug,
      drugSiteType = drugSiteType,
      drugTime = drugTime,
      drugTreatmentDetail = drugTreatmentDetail,
      drugTrafficking = drugTrafficking,
      drugType = drugType,
      drugSource = drugSource,
      drugSiteCode = drugSiteCode,
      drugSiteStreet = drugSiteStreet,
      drugSiteAddress = drugSiteAddress,
      isillegal = isillegal,
      footholdCode = footholdCode,
      footholdStreet = footholdStreet,
      footholdAddress = footholdAddress,
      isfixedDomicile = isfixedDomicile,
      fixedDomicileProperty = fixedDomicileProperty,
      nofixedDomicileReason = nofixedDomicileReason,
      isStayHotel = isStayHotel,
      hotelname = hotelname,
      hotelgradeDict = hotelgradeDict,
      hotelregistrationDict = hotelregistrationDict,
      hotelCode = hotelCode,
      hotelStreet = hotelStreet,
      hotelsiteAddress = hotelsiteAddress,
      hotelnotregist = hotelnotregist,
      cohabitDetail = cohabitDetail,
      onceLiveCode = onceLiveCode,
      onceLiveStreet = onceLiveStreet,
      familyDetail = familyDetail,
      comeReason = comeReason,
      onceLiveAddress = onceLiveAddress,
      nightsnackCode = nightsnackCode,
      nightsnackStreet = nightsnackStreet,
      entertainmentsiteCode = entertainmentsiteCode,
      entertainmentName = entertainmentName,
      bathCode = bathCode,
      bathStreet = bathStreet,
      bathAddress = bathAddress,
      nightsnackAddress = nightsnackAddress,
      isinternet = isinternet,
      internetsiteDict = internetsiteDict,
      internetregistrationDict = internetregistrationDict,
      internetnonid = internetnonid,
      isfalseid = isfalseid,
      falseidname = falseidname,
      isfackid = isfackid,
      fackidname = fackidname,
      drivingLicence = drivingLicence,
      drivingLicenceType = drivingLicenceType,
      drivingLicenceNo = drivingLicenceNo,
      drivingLicenceAddress = drivingLicenceAddress,
      rentCarDetail = rentCarDetail,
      drivingexperienceDict = drivingexperienceDict,
      feelbadreasonDict = feelbadreasonDict,
      activityarea = activityarea,
      addiction = addiction,
      interest = interest,
      inputtime = inputtime,
      inputpsn = inputpsn,
      modifiedtime = modifiedtime,
      modifiedpsn = modifiedpsn,
      deletag = deletag)
  }

  def save(entity: GafisGatherBehavior)(implicit session: DBSession = autoSession): GafisGatherBehavior = {
    withSQL {
      update(GafisGatherBehavior).set(
        column.pkId -> entity.pkId,
        column.personid -> entity.personid,
        column.isgamble -> entity.isgamble,
        column.gambleSiteCode -> entity.gambleSiteCode,
        column.gambleSiteStreet -> entity.gambleSiteStreet,
        column.gambleSiteAddress -> entity.gambleSiteAddress,
        column.iswhoring -> entity.iswhoring,
        column.whoringSiteCode -> entity.whoringSiteCode,
        column.whoringSiteStreet -> entity.whoringSiteStreet,
        column.whoringSiteAddress -> entity.whoringSiteAddress,
        column.whoringAgeGroup -> entity.whoringAgeGroup,
        column.isdrug -> entity.isdrug,
        column.drugSiteType -> entity.drugSiteType,
        column.drugTime -> entity.drugTime,
        column.drugTreatmentDetail -> entity.drugTreatmentDetail,
        column.drugTrafficking -> entity.drugTrafficking,
        column.drugType -> entity.drugType,
        column.drugSource -> entity.drugSource,
        column.drugSiteCode -> entity.drugSiteCode,
        column.drugSiteStreet -> entity.drugSiteStreet,
        column.drugSiteAddress -> entity.drugSiteAddress,
        column.isillegal -> entity.isillegal,
        column.footholdCode -> entity.footholdCode,
        column.footholdStreet -> entity.footholdStreet,
        column.footholdAddress -> entity.footholdAddress,
        column.isfixedDomicile -> entity.isfixedDomicile,
        column.fixedDomicileProperty -> entity.fixedDomicileProperty,
        column.nofixedDomicileReason -> entity.nofixedDomicileReason,
        column.isStayHotel -> entity.isStayHotel,
        column.hotelname -> entity.hotelname,
        column.hotelgradeDict -> entity.hotelgradeDict,
        column.hotelregistrationDict -> entity.hotelregistrationDict,
        column.hotelCode -> entity.hotelCode,
        column.hotelStreet -> entity.hotelStreet,
        column.hotelsiteAddress -> entity.hotelsiteAddress,
        column.hotelnotregist -> entity.hotelnotregist,
        column.cohabitDetail -> entity.cohabitDetail,
        column.onceLiveCode -> entity.onceLiveCode,
        column.onceLiveStreet -> entity.onceLiveStreet,
        column.familyDetail -> entity.familyDetail,
        column.comeReason -> entity.comeReason,
        column.onceLiveAddress -> entity.onceLiveAddress,
        column.nightsnackCode -> entity.nightsnackCode,
        column.nightsnackStreet -> entity.nightsnackStreet,
        column.entertainmentsiteCode -> entity.entertainmentsiteCode,
        column.entertainmentName -> entity.entertainmentName,
        column.bathCode -> entity.bathCode,
        column.bathStreet -> entity.bathStreet,
        column.bathAddress -> entity.bathAddress,
        column.nightsnackAddress -> entity.nightsnackAddress,
        column.isinternet -> entity.isinternet,
        column.internetsiteDict -> entity.internetsiteDict,
        column.internetregistrationDict -> entity.internetregistrationDict,
        column.internetnonid -> entity.internetnonid,
        column.isfalseid -> entity.isfalseid,
        column.falseidname -> entity.falseidname,
        column.isfackid -> entity.isfackid,
        column.fackidname -> entity.fackidname,
        column.drivingLicence -> entity.drivingLicence,
        column.drivingLicenceType -> entity.drivingLicenceType,
        column.drivingLicenceNo -> entity.drivingLicenceNo,
        column.drivingLicenceAddress -> entity.drivingLicenceAddress,
        column.rentCarDetail -> entity.rentCarDetail,
        column.drivingexperienceDict -> entity.drivingexperienceDict,
        column.feelbadreasonDict -> entity.feelbadreasonDict,
        column.activityarea -> entity.activityarea,
        column.addiction -> entity.addiction,
        column.interest -> entity.interest,
        column.inputtime -> entity.inputtime,
        column.inputpsn -> entity.inputpsn,
        column.modifiedtime -> entity.modifiedtime,
        column.modifiedpsn -> entity.modifiedpsn,
        column.deletag -> entity.deletag
      ).where.eq(column.pkId, entity.pkId).and.eq(column.personid, entity.personid).and.eq(column.isgamble, entity.isgamble).and.eq(column.gambleSiteCode, entity.gambleSiteCode).and.eq(column.gambleSiteStreet, entity.gambleSiteStreet).and.eq(column.gambleSiteAddress, entity.gambleSiteAddress).and.eq(column.iswhoring, entity.iswhoring).and.eq(column.whoringSiteCode, entity.whoringSiteCode).and.eq(column.whoringSiteStreet, entity.whoringSiteStreet).and.eq(column.whoringSiteAddress, entity.whoringSiteAddress).and.eq(column.whoringAgeGroup, entity.whoringAgeGroup).and.eq(column.isdrug, entity.isdrug).and.eq(column.drugSiteType, entity.drugSiteType).and.eq(column.drugTime, entity.drugTime).and.eq(column.drugTreatmentDetail, entity.drugTreatmentDetail).and.eq(column.drugTrafficking, entity.drugTrafficking).and.eq(column.drugType, entity.drugType).and.eq(column.drugSource, entity.drugSource).and.eq(column.drugSiteCode, entity.drugSiteCode).and.eq(column.drugSiteStreet, entity.drugSiteStreet).and.eq(column.drugSiteAddress, entity.drugSiteAddress).and.eq(column.isillegal, entity.isillegal).and.eq(column.footholdCode, entity.footholdCode).and.eq(column.footholdStreet, entity.footholdStreet).and.eq(column.footholdAddress, entity.footholdAddress).and.eq(column.isfixedDomicile, entity.isfixedDomicile).and.eq(column.fixedDomicileProperty, entity.fixedDomicileProperty).and.eq(column.nofixedDomicileReason, entity.nofixedDomicileReason).and.eq(column.isStayHotel, entity.isStayHotel).and.eq(column.hotelname, entity.hotelname).and.eq(column.hotelgradeDict, entity.hotelgradeDict).and.eq(column.hotelregistrationDict, entity.hotelregistrationDict).and.eq(column.hotelCode, entity.hotelCode).and.eq(column.hotelStreet, entity.hotelStreet).and.eq(column.hotelsiteAddress, entity.hotelsiteAddress).and.eq(column.hotelnotregist, entity.hotelnotregist).and.eq(column.cohabitDetail, entity.cohabitDetail).and.eq(column.onceLiveCode, entity.onceLiveCode).and.eq(column.onceLiveStreet, entity.onceLiveStreet).and.eq(column.familyDetail, entity.familyDetail).and.eq(column.comeReason, entity.comeReason).and.eq(column.onceLiveAddress, entity.onceLiveAddress).and.eq(column.nightsnackCode, entity.nightsnackCode).and.eq(column.nightsnackStreet, entity.nightsnackStreet).and.eq(column.entertainmentsiteCode, entity.entertainmentsiteCode).and.eq(column.entertainmentName, entity.entertainmentName).and.eq(column.bathCode, entity.bathCode).and.eq(column.bathStreet, entity.bathStreet).and.eq(column.bathAddress, entity.bathAddress).and.eq(column.nightsnackAddress, entity.nightsnackAddress).and.eq(column.isinternet, entity.isinternet).and.eq(column.internetsiteDict, entity.internetsiteDict).and.eq(column.internetregistrationDict, entity.internetregistrationDict).and.eq(column.internetnonid, entity.internetnonid).and.eq(column.isfalseid, entity.isfalseid).and.eq(column.falseidname, entity.falseidname).and.eq(column.isfackid, entity.isfackid).and.eq(column.fackidname, entity.fackidname).and.eq(column.drivingLicence, entity.drivingLicence).and.eq(column.drivingLicenceType, entity.drivingLicenceType).and.eq(column.drivingLicenceNo, entity.drivingLicenceNo).and.eq(column.drivingLicenceAddress, entity.drivingLicenceAddress).and.eq(column.rentCarDetail, entity.rentCarDetail).and.eq(column.drivingexperienceDict, entity.drivingexperienceDict).and.eq(column.feelbadreasonDict, entity.feelbadreasonDict).and.eq(column.activityarea, entity.activityarea).and.eq(column.addiction, entity.addiction).and.eq(column.interest, entity.interest).and.eq(column.inputtime, entity.inputtime).and.eq(column.inputpsn, entity.inputpsn).and.eq(column.modifiedtime, entity.modifiedtime).and.eq(column.modifiedpsn, entity.modifiedpsn).and.eq(column.deletag, entity.deletag)
    }.update.apply()
    entity
  }

  def destroy(entity: GafisGatherBehavior)(implicit session: DBSession = autoSession): Unit = {
    withSQL { delete.from(GafisGatherBehavior).where.eq(column.pkId, entity.pkId).and.eq(column.personid, entity.personid).and.eq(column.isgamble, entity.isgamble).and.eq(column.gambleSiteCode, entity.gambleSiteCode).and.eq(column.gambleSiteStreet, entity.gambleSiteStreet).and.eq(column.gambleSiteAddress, entity.gambleSiteAddress).and.eq(column.iswhoring, entity.iswhoring).and.eq(column.whoringSiteCode, entity.whoringSiteCode).and.eq(column.whoringSiteStreet, entity.whoringSiteStreet).and.eq(column.whoringSiteAddress, entity.whoringSiteAddress).and.eq(column.whoringAgeGroup, entity.whoringAgeGroup).and.eq(column.isdrug, entity.isdrug).and.eq(column.drugSiteType, entity.drugSiteType).and.eq(column.drugTime, entity.drugTime).and.eq(column.drugTreatmentDetail, entity.drugTreatmentDetail).and.eq(column.drugTrafficking, entity.drugTrafficking).and.eq(column.drugType, entity.drugType).and.eq(column.drugSource, entity.drugSource).and.eq(column.drugSiteCode, entity.drugSiteCode).and.eq(column.drugSiteStreet, entity.drugSiteStreet).and.eq(column.drugSiteAddress, entity.drugSiteAddress).and.eq(column.isillegal, entity.isillegal).and.eq(column.footholdCode, entity.footholdCode).and.eq(column.footholdStreet, entity.footholdStreet).and.eq(column.footholdAddress, entity.footholdAddress).and.eq(column.isfixedDomicile, entity.isfixedDomicile).and.eq(column.fixedDomicileProperty, entity.fixedDomicileProperty).and.eq(column.nofixedDomicileReason, entity.nofixedDomicileReason).and.eq(column.isStayHotel, entity.isStayHotel).and.eq(column.hotelname, entity.hotelname).and.eq(column.hotelgradeDict, entity.hotelgradeDict).and.eq(column.hotelregistrationDict, entity.hotelregistrationDict).and.eq(column.hotelCode, entity.hotelCode).and.eq(column.hotelStreet, entity.hotelStreet).and.eq(column.hotelsiteAddress, entity.hotelsiteAddress).and.eq(column.hotelnotregist, entity.hotelnotregist).and.eq(column.cohabitDetail, entity.cohabitDetail).and.eq(column.onceLiveCode, entity.onceLiveCode).and.eq(column.onceLiveStreet, entity.onceLiveStreet).and.eq(column.familyDetail, entity.familyDetail).and.eq(column.comeReason, entity.comeReason).and.eq(column.onceLiveAddress, entity.onceLiveAddress).and.eq(column.nightsnackCode, entity.nightsnackCode).and.eq(column.nightsnackStreet, entity.nightsnackStreet).and.eq(column.entertainmentsiteCode, entity.entertainmentsiteCode).and.eq(column.entertainmentName, entity.entertainmentName).and.eq(column.bathCode, entity.bathCode).and.eq(column.bathStreet, entity.bathStreet).and.eq(column.bathAddress, entity.bathAddress).and.eq(column.nightsnackAddress, entity.nightsnackAddress).and.eq(column.isinternet, entity.isinternet).and.eq(column.internetsiteDict, entity.internetsiteDict).and.eq(column.internetregistrationDict, entity.internetregistrationDict).and.eq(column.internetnonid, entity.internetnonid).and.eq(column.isfalseid, entity.isfalseid).and.eq(column.falseidname, entity.falseidname).and.eq(column.isfackid, entity.isfackid).and.eq(column.fackidname, entity.fackidname).and.eq(column.drivingLicence, entity.drivingLicence).and.eq(column.drivingLicenceType, entity.drivingLicenceType).and.eq(column.drivingLicenceNo, entity.drivingLicenceNo).and.eq(column.drivingLicenceAddress, entity.drivingLicenceAddress).and.eq(column.rentCarDetail, entity.rentCarDetail).and.eq(column.drivingexperienceDict, entity.drivingexperienceDict).and.eq(column.feelbadreasonDict, entity.feelbadreasonDict).and.eq(column.activityarea, entity.activityarea).and.eq(column.addiction, entity.addiction).and.eq(column.interest, entity.interest).and.eq(column.inputtime, entity.inputtime).and.eq(column.inputpsn, entity.inputpsn).and.eq(column.modifiedtime, entity.modifiedtime).and.eq(column.modifiedpsn, entity.modifiedpsn).and.eq(column.deletag, entity.deletag) }.update.apply()
  }

}
