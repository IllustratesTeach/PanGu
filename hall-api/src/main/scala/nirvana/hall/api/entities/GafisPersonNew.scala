package nirvana.hall.api.entities

import scalikejdbc._
import org.joda.time.{DateTime}

case class GafisPersonNew(
  personid: String,
  idcardno: Option[String] = None,
  name: Option[String] = None,
  spellname: Option[String] = None,
  usedname: Option[String] = None,
  usedspell: Option[String] = None,
  aliasname: Option[String] = None,
  aliasspell: Option[String] = None,
  sexCode: Option[String] = None,
  nativeplaceCode: Option[String] = None,
  nationCode: Option[String] = None,
  ifmarryCode: Option[String] = None,
  toneCode: Option[String] = None,
  tone: Option[String] = None,
  birthdayst: Option[DateTime] = None,
  birthdayed: Option[DateTime] = None,
  birthCode: Option[String] = None,
  birthStreet: Option[String] = None,
  birthdetail: Option[String] = None,
  door: Option[String] = None,
  doorStreet: Option[String] = None,
  doordetail: Option[String] = None,
  address: Option[String] = None,
  addressStreet: Option[String] = None,
  addressdetail: Option[String] = None,
  cultureCode: Option[String] = None,
  sourceincomeCode: Option[String] = None,
  faithCode: Option[String] = None,
  haveemployment: Option[String] = None,
  jobCode: Option[String] = None,
  headship: Option[String] = None,
  employunit: Option[String] = None,
  employaddress: Option[String] = None,
  otherspecialty: Option[String] = None,
  specialidentityCode: Option[String] = None,
  politicsCode: Option[String] = None,
  istransientpop: Option[String] = None,
  istempregist: Option[String] = None,
  havepermit: Option[String] = None,
  haveresidence: Option[String] = None,
  isservice: Option[String] = None,
  specialgroupCode: Option[String] = None,
  haveseparation: Option[String] = None,
  ismigrantworker: Option[String] = None,
  nameofschool: Option[String] = None,
  istraining: Option[String] = None,
  havecertificate: Option[String] = None,
  staturest: Option[Short] = None,
  avoirdupois: Option[Short] = None,
  footsize: Option[Short] = None,
  shoelength: Option[Short] = None,
  bodilyformCode: Option[String] = None,
  faceformCode: Option[String] = None,
  iseyeglass: Option[String] = None,
  shoesize: Option[Short] = None,
  bloodtypeCode: Option[String] = None,
  gatherOrgCode: Option[String] = None,
  ipaddress: Option[String] = None,
  gathererId: Option[String] = None,
  gatherDate: Option[DateTime] = None,
  gatherTypeId: Option[String] = None,
  status: Option[String] = None,
  isfingerrepeat: Option[String] = None,
  fingerrepeatno: Option[String] = None,
  taskSource: Option[String] = None,
  receiveTime: Option[DateTime] = None,
  isreturn: Option[String] = None,
  returnTime: Option[DateTime] = None,
  annex: Option[String] = None,
  inputpsn: Option[String] = None,
  inputtime: Option[DateTime] = None,
  modifiedpsn: Option[String] = None,
  modifiedtime: Option[DateTime] = None,
  deletag: Option[String] = None,
  schedule: Option[String] = None,
  approval: Option[String] = None,
  dnaCode: Option[String] = None,
  gatherCategory: Option[String] = None,
  personCategory: Option[String] = None,
  auditor: Option[String] = None,
  auditedtime: Option[DateTime] = None,
  isregather: Option[String] = None,
  gatherFingerMode: Option[String] = None,
  caseName: Option[String] = None,
  caseClasses: Option[String] = None,
  reason: Option[String] = None,
  gatherFingerNum: Option[Long] = None,
  fingerRemark: Option[String] = None,
  deprtmac: Option[String] = None,
  gatherdepartcode: Option[String] = None,
  gatheruserid: Option[String] = None,
  gatherFingerTime: Option[DateTime] = None,
  isSendTl: Option[Long] = None,
  caseBriefContents: Option[String] = None,
  pushStatus: Option[String] = None,
  pushDate: Option[DateTime] = None,
  remark: Option[String] = None,
  dataSources: Option[Short] = None,
  fingershowStatus: Option[Short] = None,
  cityCode: Option[String] = None,
  delayDeadline: Option[DateTime] = None,
  fptGatherDepartCode: Option[String] = None,
  fptGatherDepartName: Option[String] = None,
  sid: Option[Long] = None,
  blowCode: Option[String] = None,
  blowStreet: Option[String] = None,
  blowDetail: Option[String] = None,
  blowLongitude: Option[String] = None,
  blowLatitude: Option[String] = None,
  blowEastwest: Option[String] = None,
  blowNorthsouth: Option[String] = None,
  seq: Option[Long] = None,
  cardid: Option[String] = None,
  recordmark: Option[String] = None,
  recordsituation: Option[String] = None,
  validDate: Option[DateTime] = None,
  arriveLocalDate: Option[DateTime] = None,
  leaveLocalDate: Option[DateTime] = None,
  dbSource: Option[String] = None,
  dbSourceDis: Option[String] = None,
  jobDes: Option[String] = None,
  isXjssmz: Option[String] = None,
  passportNum: Option[String] = None,
  countryCode: Option[String] = None,
  foreignName: Option[String] = None,
  passportValidDate: Option[DateTime] = None,
  visaPlace: Option[String] = None,
  passportType: Option[String] = None,
  visaDate: Option[DateTime] = None,
  assistLevel: Option[String] = None,
  assistBonus: Option[String] = None,
  assistPurpose: Option[String] = None,
  assistRefPerson: Option[String] = None,
  assistRefCase: Option[String] = None,
  assistValidDate: Option[String] = None,
  assistExplain: Option[String] = None,
  assistDeptCode: Option[String] = None,
  assistDeptName: Option[String] = None,
  assistDate: Option[String] = None,
  assistContacts: Option[String] = None,
  assistNumber: Option[String] = None,
  assistApproval: Option[String] = None,
  assistSign: Option[String] = None,
  gatherdepartname: Option[String] = None,
  gatherusername: Option[String] = None) {

  def save()(implicit session: DBSession = GafisPersonNew.autoSession): GafisPersonNew = GafisPersonNew.save(this)(session)

  def destroy()(implicit session: DBSession = GafisPersonNew.autoSession): Unit = GafisPersonNew.destroy(this)(session)

}


object GafisPersonNew extends SQLSyntaxSupport[GafisPersonNew] {

  override val tableName = "GAFIS_PERSON_NEW"

  override val columns = Seq("PERSONID", "IDCARDNO", "NAME", "SPELLNAME", "USEDNAME", "USEDSPELL", "ALIASNAME", "ALIASSPELL", "SEX_CODE", "NATIVEPLACE_CODE", "NATION_CODE", "IFMARRY_CODE", "TONE_CODE", "TONE", "BIRTHDAYST", "BIRTHDAYED", "BIRTH_CODE", "BIRTH_STREET", "BIRTHDETAIL", "DOOR", "DOOR_STREET", "DOORDETAIL", "ADDRESS", "ADDRESS_STREET", "ADDRESSDETAIL", "CULTURE_CODE", "SOURCEINCOME_CODE", "FAITH_CODE", "HAVEEMPLOYMENT", "JOB_CODE", "HEADSHIP", "EMPLOYUNIT", "EMPLOYADDRESS", "OTHERSPECIALTY", "SPECIALIDENTITY_CODE", "POLITICS_CODE", "ISTRANSIENTPOP", "ISTEMPREGIST", "HAVEPERMIT", "HAVERESIDENCE", "ISSERVICE", "SPECIALGROUP_CODE", "HAVESEPARATION", "ISMIGRANTWORKER", "NAMEOFSCHOOL", "ISTRAINING", "HAVECERTIFICATE", "STATUREST", "AVOIRDUPOIS", "FOOTSIZE", "SHOELENGTH", "BODILYFORM_CODE", "FACEFORM_CODE", "ISEYEGLASS", "SHOESIZE", "BLOODTYPE_CODE", "GATHER_ORG_CODE", "IPADDRESS", "GATHERER_ID", "GATHER_DATE", "GATHER_TYPE_ID", "STATUS", "ISFINGERREPEAT", "FINGERREPEATNO", "TASK_SOURCE", "RECEIVE_TIME", "ISRETURN", "RETURN_TIME", "ANNEX", "INPUTPSN", "INPUTTIME", "MODIFIEDPSN", "MODIFIEDTIME", "DELETAG", "SCHEDULE", "APPROVAL", "DNA_CODE", "GATHER_CATEGORY", "PERSON_CATEGORY", "AUDITOR", "AUDITEDTIME", "ISREGATHER", "GATHER_FINGER_MODE", "CASE_NAME", "CASE_CLASSES", "REASON", "GATHER_FINGER_NUM", "FINGER_REMARK", "DEPRTMAC", "GATHERDEPARTCODE", "GATHERUSERID", "GATHER_FINGER_TIME", "IS_SEND_TL", "CASE_BRIEF_CONTENTS", "PUSH_STATUS", "PUSH_DATE", "REMARK", "DATA_SOURCES", "FINGERSHOW_STATUS", "CITY_CODE", "DELAY_DEADLINE", "FPT_GATHER_DEPART_CODE", "FPT_GATHER_DEPART_NAME", "SID", "BLOW_CODE", "BLOW_STREET", "BLOW_DETAIL", "BLOW_LONGITUDE", "BLOW_LATITUDE", "BLOW_EASTWEST", "BLOW_NORTHSOUTH", "SEQ", "CARDID", "RECORDMARK", "RECORDSITUATION", "VALID_DATE", "ARRIVE_LOCAL_DATE", "LEAVE_LOCAL_DATE", "DB_SOURCE", "DB_SOURCE_DIS", "JOB_DES", "IS_XJSSMZ", "PASSPORT_NUM", "COUNTRY_CODE", "FOREIGN_NAME", "PASSPORT_VALID_DATE", "VISA_PLACE", "PASSPORT_TYPE", "VISA_DATE", "ASSIST_LEVEL", "ASSIST_BONUS", "ASSIST_PURPOSE", "ASSIST_REF_PERSON", "ASSIST_REF_CASE", "ASSIST_VALID_DATE", "ASSIST_EXPLAIN", "ASSIST_DEPT_CODE", "ASSIST_DEPT_NAME", "ASSIST_DATE", "ASSIST_CONTACTS", "ASSIST_NUMBER", "ASSIST_APPROVAL", "ASSIST_SIGN", "GATHERDEPARTNAME", "GATHERUSERNAME")

  def apply(gpn: SyntaxProvider[GafisPersonNew])(rs: WrappedResultSet): GafisPersonNew = apply(gpn.resultName)(rs)
  def apply(gpn: ResultName[GafisPersonNew])(rs: WrappedResultSet): GafisPersonNew = new GafisPersonNew(
    personid = rs.get(gpn.personid),
    idcardno = rs.get(gpn.idcardno),
    name = rs.get(gpn.name),
    spellname = rs.get(gpn.spellname),
    usedname = rs.get(gpn.usedname),
    usedspell = rs.get(gpn.usedspell),
    aliasname = rs.get(gpn.aliasname),
    aliasspell = rs.get(gpn.aliasspell),
    sexCode = rs.get(gpn.sexCode),
    nativeplaceCode = rs.get(gpn.nativeplaceCode),
    nationCode = rs.get(gpn.nationCode),
    ifmarryCode = rs.get(gpn.ifmarryCode),
    toneCode = rs.get(gpn.toneCode),
    tone = rs.get(gpn.tone),
    birthdayst = rs.get(gpn.birthdayst),
    birthdayed = rs.get(gpn.birthdayed),
    birthCode = rs.get(gpn.birthCode),
    birthStreet = rs.get(gpn.birthStreet),
    birthdetail = rs.get(gpn.birthdetail),
    door = rs.get(gpn.door),
    doorStreet = rs.get(gpn.doorStreet),
    doordetail = rs.get(gpn.doordetail),
    address = rs.get(gpn.address),
    addressStreet = rs.get(gpn.addressStreet),
    addressdetail = rs.get(gpn.addressdetail),
    cultureCode = rs.get(gpn.cultureCode),
    sourceincomeCode = rs.get(gpn.sourceincomeCode),
    faithCode = rs.get(gpn.faithCode),
    haveemployment = rs.get(gpn.haveemployment),
    jobCode = rs.get(gpn.jobCode),
    headship = rs.get(gpn.headship),
    employunit = rs.get(gpn.employunit),
    employaddress = rs.get(gpn.employaddress),
    otherspecialty = rs.get(gpn.otherspecialty),
    specialidentityCode = rs.get(gpn.specialidentityCode),
    politicsCode = rs.get(gpn.politicsCode),
    istransientpop = rs.get(gpn.istransientpop),
    istempregist = rs.get(gpn.istempregist),
    havepermit = rs.get(gpn.havepermit),
    haveresidence = rs.get(gpn.haveresidence),
    isservice = rs.get(gpn.isservice),
    specialgroupCode = rs.get(gpn.specialgroupCode),
    haveseparation = rs.get(gpn.haveseparation),
    ismigrantworker = rs.get(gpn.ismigrantworker),
    nameofschool = rs.get(gpn.nameofschool),
    istraining = rs.get(gpn.istraining),
    havecertificate = rs.get(gpn.havecertificate),
    staturest = rs.get(gpn.staturest),
    avoirdupois = rs.get(gpn.avoirdupois),
    footsize = rs.get(gpn.footsize),
    shoelength = rs.get(gpn.shoelength),
    bodilyformCode = rs.get(gpn.bodilyformCode),
    faceformCode = rs.get(gpn.faceformCode),
    iseyeglass = rs.get(gpn.iseyeglass),
    shoesize = rs.get(gpn.shoesize),
    bloodtypeCode = rs.get(gpn.bloodtypeCode),
    gatherOrgCode = rs.get(gpn.gatherOrgCode),
    ipaddress = rs.get(gpn.ipaddress),
    gathererId = rs.get(gpn.gathererId),
    gatherDate = rs.get(gpn.gatherDate),
    gatherTypeId = rs.get(gpn.gatherTypeId),
    status = rs.get(gpn.status),
    isfingerrepeat = rs.get(gpn.isfingerrepeat),
    fingerrepeatno = rs.get(gpn.fingerrepeatno),
    taskSource = rs.get(gpn.taskSource),
    receiveTime = rs.get(gpn.receiveTime),
    isreturn = rs.get(gpn.isreturn),
    returnTime = rs.get(gpn.returnTime),
    annex = rs.get(gpn.annex),
    inputpsn = rs.get(gpn.inputpsn),
    inputtime = rs.get(gpn.inputtime),
    modifiedpsn = rs.get(gpn.modifiedpsn),
    modifiedtime = rs.get(gpn.modifiedtime),
    deletag = rs.get(gpn.deletag),
    schedule = rs.get(gpn.schedule),
    approval = rs.get(gpn.approval),
    dnaCode = rs.get(gpn.dnaCode),
    gatherCategory = rs.get(gpn.gatherCategory),
    personCategory = rs.get(gpn.personCategory),
    auditor = rs.get(gpn.auditor),
    auditedtime = rs.get(gpn.auditedtime),
    isregather = rs.get(gpn.isregather),
    gatherFingerMode = rs.get(gpn.gatherFingerMode),
    caseName = rs.get(gpn.caseName),
    caseClasses = rs.get(gpn.caseClasses),
    reason = rs.get(gpn.reason),
    gatherFingerNum = rs.get(gpn.gatherFingerNum),
    fingerRemark = rs.get(gpn.fingerRemark),
    deprtmac = rs.get(gpn.deprtmac),
    gatherdepartcode = rs.get(gpn.gatherdepartcode),
    gatheruserid = rs.get(gpn.gatheruserid),
    gatherFingerTime = rs.get(gpn.gatherFingerTime),
    isSendTl = rs.get(gpn.isSendTl),
    caseBriefContents = rs.get(gpn.caseBriefContents),
    pushStatus = rs.get(gpn.pushStatus),
    pushDate = rs.get(gpn.pushDate),
    remark = rs.get(gpn.remark),
    dataSources = rs.get(gpn.dataSources),
    fingershowStatus = rs.get(gpn.fingershowStatus),
    cityCode = rs.get(gpn.cityCode),
    delayDeadline = rs.get(gpn.delayDeadline),
    fptGatherDepartCode = rs.get(gpn.fptGatherDepartCode),
    fptGatherDepartName = rs.get(gpn.fptGatherDepartName),
    sid = rs.get(gpn.sid),
    blowCode = rs.get(gpn.blowCode),
    blowStreet = rs.get(gpn.blowStreet),
    blowDetail = rs.get(gpn.blowDetail),
    blowLongitude = rs.get(gpn.blowLongitude),
    blowLatitude = rs.get(gpn.blowLatitude),
    blowEastwest = rs.get(gpn.blowEastwest),
    blowNorthsouth = rs.get(gpn.blowNorthsouth),
    seq = rs.get(gpn.seq),
    cardid = rs.get(gpn.cardid),
    recordmark = rs.get(gpn.recordmark),
    recordsituation = rs.get(gpn.recordsituation),
    validDate = rs.get(gpn.validDate),
    arriveLocalDate = rs.get(gpn.arriveLocalDate),
    leaveLocalDate = rs.get(gpn.leaveLocalDate),
    dbSource = rs.get(gpn.dbSource),
    dbSourceDis = rs.get(gpn.dbSourceDis),
    jobDes = rs.get(gpn.jobDes),
    isXjssmz = rs.get(gpn.isXjssmz),
    passportNum = rs.get(gpn.passportNum),
    countryCode = rs.get(gpn.countryCode),
    foreignName = rs.get(gpn.foreignName),
    passportValidDate = rs.get(gpn.passportValidDate),
    visaPlace = rs.get(gpn.visaPlace),
    passportType = rs.get(gpn.passportType),
    visaDate = rs.get(gpn.visaDate),
    assistLevel = rs.get(gpn.assistLevel),
    assistBonus = rs.get(gpn.assistBonus),
    assistPurpose = rs.get(gpn.assistPurpose),
    assistRefPerson = rs.get(gpn.assistRefPerson),
    assistRefCase = rs.get(gpn.assistRefCase),
    assistValidDate = rs.get(gpn.assistValidDate),
    assistExplain = rs.get(gpn.assistExplain),
    assistDeptCode = rs.get(gpn.assistDeptCode),
    assistDeptName = rs.get(gpn.assistDeptName),
    assistDate = rs.get(gpn.assistDate),
    assistContacts = rs.get(gpn.assistContacts),
    assistNumber = rs.get(gpn.assistNumber),
    assistApproval = rs.get(gpn.assistApproval),
    assistSign = rs.get(gpn.assistSign),
    gatherdepartname = rs.get(gpn.gatherdepartname),
    gatherusername = rs.get(gpn.gatherusername)
  )

  val gpn = GafisPersonNew.syntax("gpn")

 override def autoSession = nirvana.hall.api.services.AutoSpringDataSourceSession()

  def find(personid: String, idcardno: Option[String], name: Option[String], spellname: Option[String], usedname: Option[String], usedspell: Option[String], aliasname: Option[String], aliasspell: Option[String], sexCode: Option[String], nativeplaceCode: Option[String], nationCode: Option[String], ifmarryCode: Option[String], toneCode: Option[String], tone: Option[String], birthdayst: Option[DateTime], birthdayed: Option[DateTime], birthCode: Option[String], birthStreet: Option[String], birthdetail: Option[String], door: Option[String], doorStreet: Option[String], doordetail: Option[String], address: Option[String], addressStreet: Option[String], addressdetail: Option[String], cultureCode: Option[String], sourceincomeCode: Option[String], faithCode: Option[String], haveemployment: Option[String], jobCode: Option[String], headship: Option[String], employunit: Option[String], employaddress: Option[String], otherspecialty: Option[String], specialidentityCode: Option[String], politicsCode: Option[String], istransientpop: Option[String], istempregist: Option[String], havepermit: Option[String], haveresidence: Option[String], isservice: Option[String], specialgroupCode: Option[String], haveseparation: Option[String], ismigrantworker: Option[String], nameofschool: Option[String], istraining: Option[String], havecertificate: Option[String], staturest: Option[Short], avoirdupois: Option[Short], footsize: Option[Short], shoelength: Option[Short], bodilyformCode: Option[String], faceformCode: Option[String], iseyeglass: Option[String], shoesize: Option[Short], bloodtypeCode: Option[String], gatherOrgCode: Option[String], ipaddress: Option[String], gathererId: Option[String], gatherDate: Option[DateTime], gatherTypeId: Option[String], status: Option[String], isfingerrepeat: Option[String], fingerrepeatno: Option[String], taskSource: Option[String], receiveTime: Option[DateTime], isreturn: Option[String], returnTime: Option[DateTime], annex: Option[String], inputpsn: Option[String], inputtime: Option[DateTime], modifiedpsn: Option[String], modifiedtime: Option[DateTime], deletag: Option[String], schedule: Option[String], approval: Option[String], dnaCode: Option[String], gatherCategory: Option[String], personCategory: Option[String], auditor: Option[String], auditedtime: Option[DateTime], isregather: Option[String], gatherFingerMode: Option[String], caseName: Option[String], caseClasses: Option[String], reason: Option[String], gatherFingerNum: Option[Long], fingerRemark: Option[String], deprtmac: Option[String], gatherdepartcode: Option[String], gatheruserid: Option[String], gatherFingerTime: Option[DateTime], isSendTl: Option[Long], caseBriefContents: Option[String], pushStatus: Option[String], pushDate: Option[DateTime], remark: Option[String], dataSources: Option[Short], fingershowStatus: Option[Short], cityCode: Option[String], delayDeadline: Option[DateTime], fptGatherDepartCode: Option[String], fptGatherDepartName: Option[String], sid: Option[Long], blowCode: Option[String], blowStreet: Option[String], blowDetail: Option[String], blowLongitude: Option[String], blowLatitude: Option[String], blowEastwest: Option[String], blowNorthsouth: Option[String], seq: Option[Long], cardid: Option[String], recordmark: Option[String], recordsituation: Option[String], validDate: Option[DateTime], arriveLocalDate: Option[DateTime], leaveLocalDate: Option[DateTime], dbSource: Option[String], dbSourceDis: Option[String], jobDes: Option[String], isXjssmz: Option[String], passportNum: Option[String], countryCode: Option[String], foreignName: Option[String], passportValidDate: Option[DateTime], visaPlace: Option[String], passportType: Option[String], visaDate: Option[DateTime], assistLevel: Option[String], assistBonus: Option[String], assistPurpose: Option[String], assistRefPerson: Option[String], assistRefCase: Option[String], assistValidDate: Option[String], assistExplain: Option[String], assistDeptCode: Option[String], assistDeptName: Option[String], assistDate: Option[String], assistContacts: Option[String], assistNumber: Option[String], assistApproval: Option[String], assistSign: Option[String], gatherdepartname: Option[String], gatherusername: Option[String])(implicit session: DBSession = autoSession): Option[GafisPersonNew] = {
    withSQL {
      select.from(GafisPersonNew as gpn).where.eq(gpn.personid, personid).and.eq(gpn.idcardno, idcardno).and.eq(gpn.name, name).and.eq(gpn.spellname, spellname).and.eq(gpn.usedname, usedname).and.eq(gpn.usedspell, usedspell).and.eq(gpn.aliasname, aliasname).and.eq(gpn.aliasspell, aliasspell).and.eq(gpn.sexCode, sexCode).and.eq(gpn.nativeplaceCode, nativeplaceCode).and.eq(gpn.nationCode, nationCode).and.eq(gpn.ifmarryCode, ifmarryCode).and.eq(gpn.toneCode, toneCode).and.eq(gpn.tone, tone).and.eq(gpn.birthdayst, birthdayst).and.eq(gpn.birthdayed, birthdayed).and.eq(gpn.birthCode, birthCode).and.eq(gpn.birthStreet, birthStreet).and.eq(gpn.birthdetail, birthdetail).and.eq(gpn.door, door).and.eq(gpn.doorStreet, doorStreet).and.eq(gpn.doordetail, doordetail).and.eq(gpn.address, address).and.eq(gpn.addressStreet, addressStreet).and.eq(gpn.addressdetail, addressdetail).and.eq(gpn.cultureCode, cultureCode).and.eq(gpn.sourceincomeCode, sourceincomeCode).and.eq(gpn.faithCode, faithCode).and.eq(gpn.haveemployment, haveemployment).and.eq(gpn.jobCode, jobCode).and.eq(gpn.headship, headship).and.eq(gpn.employunit, employunit).and.eq(gpn.employaddress, employaddress).and.eq(gpn.otherspecialty, otherspecialty).and.eq(gpn.specialidentityCode, specialidentityCode).and.eq(gpn.politicsCode, politicsCode).and.eq(gpn.istransientpop, istransientpop).and.eq(gpn.istempregist, istempregist).and.eq(gpn.havepermit, havepermit).and.eq(gpn.haveresidence, haveresidence).and.eq(gpn.isservice, isservice).and.eq(gpn.specialgroupCode, specialgroupCode).and.eq(gpn.haveseparation, haveseparation).and.eq(gpn.ismigrantworker, ismigrantworker).and.eq(gpn.nameofschool, nameofschool).and.eq(gpn.istraining, istraining).and.eq(gpn.havecertificate, havecertificate).and.eq(gpn.staturest, staturest).and.eq(gpn.avoirdupois, avoirdupois).and.eq(gpn.footsize, footsize).and.eq(gpn.shoelength, shoelength).and.eq(gpn.bodilyformCode, bodilyformCode).and.eq(gpn.faceformCode, faceformCode).and.eq(gpn.iseyeglass, iseyeglass).and.eq(gpn.shoesize, shoesize).and.eq(gpn.bloodtypeCode, bloodtypeCode).and.eq(gpn.gatherOrgCode, gatherOrgCode).and.eq(gpn.ipaddress, ipaddress).and.eq(gpn.gathererId, gathererId).and.eq(gpn.gatherDate, gatherDate).and.eq(gpn.gatherTypeId, gatherTypeId).and.eq(gpn.status, status).and.eq(gpn.isfingerrepeat, isfingerrepeat).and.eq(gpn.fingerrepeatno, fingerrepeatno).and.eq(gpn.taskSource, taskSource).and.eq(gpn.receiveTime, receiveTime).and.eq(gpn.isreturn, isreturn).and.eq(gpn.returnTime, returnTime).and.eq(gpn.annex, annex).and.eq(gpn.inputpsn, inputpsn).and.eq(gpn.inputtime, inputtime).and.eq(gpn.modifiedpsn, modifiedpsn).and.eq(gpn.modifiedtime, modifiedtime).and.eq(gpn.deletag, deletag).and.eq(gpn.schedule, schedule).and.eq(gpn.approval, approval).and.eq(gpn.dnaCode, dnaCode).and.eq(gpn.gatherCategory, gatherCategory).and.eq(gpn.personCategory, personCategory).and.eq(gpn.auditor, auditor).and.eq(gpn.auditedtime, auditedtime).and.eq(gpn.isregather, isregather).and.eq(gpn.gatherFingerMode, gatherFingerMode).and.eq(gpn.caseName, caseName).and.eq(gpn.caseClasses, caseClasses).and.eq(gpn.reason, reason).and.eq(gpn.gatherFingerNum, gatherFingerNum).and.eq(gpn.fingerRemark, fingerRemark).and.eq(gpn.deprtmac, deprtmac).and.eq(gpn.gatherdepartcode, gatherdepartcode).and.eq(gpn.gatheruserid, gatheruserid).and.eq(gpn.gatherFingerTime, gatherFingerTime).and.eq(gpn.isSendTl, isSendTl).and.eq(gpn.caseBriefContents, caseBriefContents).and.eq(gpn.pushStatus, pushStatus).and.eq(gpn.pushDate, pushDate).and.eq(gpn.remark, remark).and.eq(gpn.dataSources, dataSources).and.eq(gpn.fingershowStatus, fingershowStatus).and.eq(gpn.cityCode, cityCode).and.eq(gpn.delayDeadline, delayDeadline).and.eq(gpn.fptGatherDepartCode, fptGatherDepartCode).and.eq(gpn.fptGatherDepartName, fptGatherDepartName).and.eq(gpn.sid, sid).and.eq(gpn.blowCode, blowCode).and.eq(gpn.blowStreet, blowStreet).and.eq(gpn.blowDetail, blowDetail).and.eq(gpn.blowLongitude, blowLongitude).and.eq(gpn.blowLatitude, blowLatitude).and.eq(gpn.blowEastwest, blowEastwest).and.eq(gpn.blowNorthsouth, blowNorthsouth).and.eq(gpn.seq, seq).and.eq(gpn.cardid, cardid).and.eq(gpn.recordmark, recordmark).and.eq(gpn.recordsituation, recordsituation).and.eq(gpn.validDate, validDate).and.eq(gpn.arriveLocalDate, arriveLocalDate).and.eq(gpn.leaveLocalDate, leaveLocalDate).and.eq(gpn.dbSource, dbSource).and.eq(gpn.dbSourceDis, dbSourceDis).and.eq(gpn.jobDes, jobDes).and.eq(gpn.isXjssmz, isXjssmz).and.eq(gpn.passportNum, passportNum).and.eq(gpn.countryCode, countryCode).and.eq(gpn.foreignName, foreignName).and.eq(gpn.passportValidDate, passportValidDate).and.eq(gpn.visaPlace, visaPlace).and.eq(gpn.passportType, passportType).and.eq(gpn.visaDate, visaDate).and.eq(gpn.assistLevel, assistLevel).and.eq(gpn.assistBonus, assistBonus).and.eq(gpn.assistPurpose, assistPurpose).and.eq(gpn.assistRefPerson, assistRefPerson).and.eq(gpn.assistRefCase, assistRefCase).and.eq(gpn.assistValidDate, assistValidDate).and.eq(gpn.assistExplain, assistExplain).and.eq(gpn.assistDeptCode, assistDeptCode).and.eq(gpn.assistDeptName, assistDeptName).and.eq(gpn.assistDate, assistDate).and.eq(gpn.assistContacts, assistContacts).and.eq(gpn.assistNumber, assistNumber).and.eq(gpn.assistApproval, assistApproval).and.eq(gpn.assistSign, assistSign).and.eq(gpn.gatherdepartname, gatherdepartname).and.eq(gpn.gatherusername, gatherusername)
    }.map(GafisPersonNew(gpn.resultName)).single.apply()
  }

  def findAll()(implicit session: DBSession = autoSession): List[GafisPersonNew] = {
    withSQL(select.from(GafisPersonNew as gpn)).map(GafisPersonNew(gpn.resultName)).list.apply()
  }

  def countAll()(implicit session: DBSession = autoSession): Long = {
    withSQL(select(sqls.count).from(GafisPersonNew as gpn)).map(rs => rs.long(1)).single.apply().get
  }

  def findBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Option[GafisPersonNew] = {
    withSQL {
      select.from(GafisPersonNew as gpn).where.append(where)
    }.map(GafisPersonNew(gpn.resultName)).single.apply()
  }

  def findAllBy(where: SQLSyntax)(implicit session: DBSession = autoSession): List[GafisPersonNew] = {
    withSQL {
      select.from(GafisPersonNew as gpn).where.append(where)
    }.map(GafisPersonNew(gpn.resultName)).list.apply()
  }

  def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {
    withSQL {
      select(sqls.count).from(GafisPersonNew as gpn).where.append(where)
    }.map(_.long(1)).single.apply().get
  }

  def create(
    personid: String,
    idcardno: Option[String] = None,
    name: Option[String] = None,
    spellname: Option[String] = None,
    usedname: Option[String] = None,
    usedspell: Option[String] = None,
    aliasname: Option[String] = None,
    aliasspell: Option[String] = None,
    sexCode: Option[String] = None,
    nativeplaceCode: Option[String] = None,
    nationCode: Option[String] = None,
    ifmarryCode: Option[String] = None,
    toneCode: Option[String] = None,
    tone: Option[String] = None,
    birthdayst: Option[DateTime] = None,
    birthdayed: Option[DateTime] = None,
    birthCode: Option[String] = None,
    birthStreet: Option[String] = None,
    birthdetail: Option[String] = None,
    door: Option[String] = None,
    doorStreet: Option[String] = None,
    doordetail: Option[String] = None,
    address: Option[String] = None,
    addressStreet: Option[String] = None,
    addressdetail: Option[String] = None,
    cultureCode: Option[String] = None,
    sourceincomeCode: Option[String] = None,
    faithCode: Option[String] = None,
    haveemployment: Option[String] = None,
    jobCode: Option[String] = None,
    headship: Option[String] = None,
    employunit: Option[String] = None,
    employaddress: Option[String] = None,
    otherspecialty: Option[String] = None,
    specialidentityCode: Option[String] = None,
    politicsCode: Option[String] = None,
    istransientpop: Option[String] = None,
    istempregist: Option[String] = None,
    havepermit: Option[String] = None,
    haveresidence: Option[String] = None,
    isservice: Option[String] = None,
    specialgroupCode: Option[String] = None,
    haveseparation: Option[String] = None,
    ismigrantworker: Option[String] = None,
    nameofschool: Option[String] = None,
    istraining: Option[String] = None,
    havecertificate: Option[String] = None,
    staturest: Option[Short] = None,
    avoirdupois: Option[Short] = None,
    footsize: Option[Short] = None,
    shoelength: Option[Short] = None,
    bodilyformCode: Option[String] = None,
    faceformCode: Option[String] = None,
    iseyeglass: Option[String] = None,
    shoesize: Option[Short] = None,
    bloodtypeCode: Option[String] = None,
    gatherOrgCode: Option[String] = None,
    ipaddress: Option[String] = None,
    gathererId: Option[String] = None,
    gatherDate: Option[DateTime] = None,
    gatherTypeId: Option[String] = None,
    status: Option[String] = None,
    isfingerrepeat: Option[String] = None,
    fingerrepeatno: Option[String] = None,
    taskSource: Option[String] = None,
    receiveTime: Option[DateTime] = None,
    isreturn: Option[String] = None,
    returnTime: Option[DateTime] = None,
    annex: Option[String] = None,
    inputpsn: Option[String] = None,
    inputtime: Option[DateTime] = None,
    modifiedpsn: Option[String] = None,
    modifiedtime: Option[DateTime] = None,
    deletag: Option[String] = None,
    schedule: Option[String] = None,
    approval: Option[String] = None,
    dnaCode: Option[String] = None,
    gatherCategory: Option[String] = None,
    personCategory: Option[String] = None,
    auditor: Option[String] = None,
    auditedtime: Option[DateTime] = None,
    isregather: Option[String] = None,
    gatherFingerMode: Option[String] = None,
    caseName: Option[String] = None,
    caseClasses: Option[String] = None,
    reason: Option[String] = None,
    gatherFingerNum: Option[Long] = None,
    fingerRemark: Option[String] = None,
    deprtmac: Option[String] = None,
    gatherdepartcode: Option[String] = None,
    gatheruserid: Option[String] = None,
    gatherFingerTime: Option[DateTime] = None,
    isSendTl: Option[Long] = None,
    caseBriefContents: Option[String] = None,
    pushStatus: Option[String] = None,
    pushDate: Option[DateTime] = None,
    remark: Option[String] = None,
    dataSources: Option[Short] = None,
    fingershowStatus: Option[Short] = None,
    cityCode: Option[String] = None,
    delayDeadline: Option[DateTime] = None,
    fptGatherDepartCode: Option[String] = None,
    fptGatherDepartName: Option[String] = None,
    sid: Option[Long] = None,
    blowCode: Option[String] = None,
    blowStreet: Option[String] = None,
    blowDetail: Option[String] = None,
    blowLongitude: Option[String] = None,
    blowLatitude: Option[String] = None,
    blowEastwest: Option[String] = None,
    blowNorthsouth: Option[String] = None,
    seq: Option[Long] = None,
    cardid: Option[String] = None,
    recordmark: Option[String] = None,
    recordsituation: Option[String] = None,
    validDate: Option[DateTime] = None,
    arriveLocalDate: Option[DateTime] = None,
    leaveLocalDate: Option[DateTime] = None,
    dbSource: Option[String] = None,
    dbSourceDis: Option[String] = None,
    jobDes: Option[String] = None,
    isXjssmz: Option[String] = None,
    passportNum: Option[String] = None,
    countryCode: Option[String] = None,
    foreignName: Option[String] = None,
    passportValidDate: Option[DateTime] = None,
    visaPlace: Option[String] = None,
    passportType: Option[String] = None,
    visaDate: Option[DateTime] = None,
    assistLevel: Option[String] = None,
    assistBonus: Option[String] = None,
    assistPurpose: Option[String] = None,
    assistRefPerson: Option[String] = None,
    assistRefCase: Option[String] = None,
    assistValidDate: Option[String] = None,
    assistExplain: Option[String] = None,
    assistDeptCode: Option[String] = None,
    assistDeptName: Option[String] = None,
    assistDate: Option[String] = None,
    assistContacts: Option[String] = None,
    assistNumber: Option[String] = None,
    assistApproval: Option[String] = None,
    assistSign: Option[String] = None,
    gatherdepartname: Option[String] = None,
    gatherusername: Option[String] = None)(implicit session: DBSession = autoSession): GafisPersonNew = {
    withSQL {
      insert.into(GafisPersonNew).columns(
        column.personid,
        column.idcardno,
        column.name,
        column.spellname,
        column.usedname,
        column.usedspell,
        column.aliasname,
        column.aliasspell,
        column.sexCode,
        column.nativeplaceCode,
        column.nationCode,
        column.ifmarryCode,
        column.toneCode,
        column.tone,
        column.birthdayst,
        column.birthdayed,
        column.birthCode,
        column.birthStreet,
        column.birthdetail,
        column.door,
        column.doorStreet,
        column.doordetail,
        column.address,
        column.addressStreet,
        column.addressdetail,
        column.cultureCode,
        column.sourceincomeCode,
        column.faithCode,
        column.haveemployment,
        column.jobCode,
        column.headship,
        column.employunit,
        column.employaddress,
        column.otherspecialty,
        column.specialidentityCode,
        column.politicsCode,
        column.istransientpop,
        column.istempregist,
        column.havepermit,
        column.haveresidence,
        column.isservice,
        column.specialgroupCode,
        column.haveseparation,
        column.ismigrantworker,
        column.nameofschool,
        column.istraining,
        column.havecertificate,
        column.staturest,
        column.avoirdupois,
        column.footsize,
        column.shoelength,
        column.bodilyformCode,
        column.faceformCode,
        column.iseyeglass,
        column.shoesize,
        column.bloodtypeCode,
        column.gatherOrgCode,
        column.ipaddress,
        column.gathererId,
        column.gatherDate,
        column.gatherTypeId,
        column.status,
        column.isfingerrepeat,
        column.fingerrepeatno,
        column.taskSource,
        column.receiveTime,
        column.isreturn,
        column.returnTime,
        column.annex,
        column.inputpsn,
        column.inputtime,
        column.modifiedpsn,
        column.modifiedtime,
        column.deletag,
        column.schedule,
        column.approval,
        column.dnaCode,
        column.gatherCategory,
        column.personCategory,
        column.auditor,
        column.auditedtime,
        column.isregather,
        column.gatherFingerMode,
        column.caseName,
        column.caseClasses,
        column.reason,
        column.gatherFingerNum,
        column.fingerRemark,
        column.deprtmac,
        column.gatherdepartcode,
        column.gatheruserid,
        column.gatherFingerTime,
        column.isSendTl,
        column.caseBriefContents,
        column.pushStatus,
        column.pushDate,
        column.remark,
        column.dataSources,
        column.fingershowStatus,
        column.cityCode,
        column.delayDeadline,
        column.fptGatherDepartCode,
        column.fptGatherDepartName,
        column.sid,
        column.blowCode,
        column.blowStreet,
        column.blowDetail,
        column.blowLongitude,
        column.blowLatitude,
        column.blowEastwest,
        column.blowNorthsouth,
        column.seq,
        column.cardid,
        column.recordmark,
        column.recordsituation,
        column.validDate,
        column.arriveLocalDate,
        column.leaveLocalDate,
        column.dbSource,
        column.dbSourceDis,
        column.jobDes,
        column.isXjssmz,
        column.passportNum,
        column.countryCode,
        column.foreignName,
        column.passportValidDate,
        column.visaPlace,
        column.passportType,
        column.visaDate,
        column.assistLevel,
        column.assistBonus,
        column.assistPurpose,
        column.assistRefPerson,
        column.assistRefCase,
        column.assistValidDate,
        column.assistExplain,
        column.assistDeptCode,
        column.assistDeptName,
        column.assistDate,
        column.assistContacts,
        column.assistNumber,
        column.assistApproval,
        column.assistSign,
        column.gatherdepartname,
        column.gatherusername
      ).values(
        personid,
        idcardno,
        name,
        spellname,
        usedname,
        usedspell,
        aliasname,
        aliasspell,
        sexCode,
        nativeplaceCode,
        nationCode,
        ifmarryCode,
        toneCode,
        tone,
        birthdayst,
        birthdayed,
        birthCode,
        birthStreet,
        birthdetail,
        door,
        doorStreet,
        doordetail,
        address,
        addressStreet,
        addressdetail,
        cultureCode,
        sourceincomeCode,
        faithCode,
        haveemployment,
        jobCode,
        headship,
        employunit,
        employaddress,
        otherspecialty,
        specialidentityCode,
        politicsCode,
        istransientpop,
        istempregist,
        havepermit,
        haveresidence,
        isservice,
        specialgroupCode,
        haveseparation,
        ismigrantworker,
        nameofschool,
        istraining,
        havecertificate,
        staturest,
        avoirdupois,
        footsize,
        shoelength,
        bodilyformCode,
        faceformCode,
        iseyeglass,
        shoesize,
        bloodtypeCode,
        gatherOrgCode,
        ipaddress,
        gathererId,
        gatherDate,
        gatherTypeId,
        status,
        isfingerrepeat,
        fingerrepeatno,
        taskSource,
        receiveTime,
        isreturn,
        returnTime,
        annex,
        inputpsn,
        inputtime,
        modifiedpsn,
        modifiedtime,
        deletag,
        schedule,
        approval,
        dnaCode,
        gatherCategory,
        personCategory,
        auditor,
        auditedtime,
        isregather,
        gatherFingerMode,
        caseName,
        caseClasses,
        reason,
        gatherFingerNum,
        fingerRemark,
        deprtmac,
        gatherdepartcode,
        gatheruserid,
        gatherFingerTime,
        isSendTl,
        caseBriefContents,
        pushStatus,
        pushDate,
        remark,
        dataSources,
        fingershowStatus,
        cityCode,
        delayDeadline,
        fptGatherDepartCode,
        fptGatherDepartName,
        sid,
        blowCode,
        blowStreet,
        blowDetail,
        blowLongitude,
        blowLatitude,
        blowEastwest,
        blowNorthsouth,
        seq,
        cardid,
        recordmark,
        recordsituation,
        validDate,
        arriveLocalDate,
        leaveLocalDate,
        dbSource,
        dbSourceDis,
        jobDes,
        isXjssmz,
        passportNum,
        countryCode,
        foreignName,
        passportValidDate,
        visaPlace,
        passportType,
        visaDate,
        assistLevel,
        assistBonus,
        assistPurpose,
        assistRefPerson,
        assistRefCase,
        assistValidDate,
        assistExplain,
        assistDeptCode,
        assistDeptName,
        assistDate,
        assistContacts,
        assistNumber,
        assistApproval,
        assistSign,
        gatherdepartname,
        gatherusername
      )
    }.update.apply()

    new GafisPersonNew(
      personid = personid,
      idcardno = idcardno,
      name = name,
      spellname = spellname,
      usedname = usedname,
      usedspell = usedspell,
      aliasname = aliasname,
      aliasspell = aliasspell,
      sexCode = sexCode,
      nativeplaceCode = nativeplaceCode,
      nationCode = nationCode,
      ifmarryCode = ifmarryCode,
      toneCode = toneCode,
      tone = tone,
      birthdayst = birthdayst,
      birthdayed = birthdayed,
      birthCode = birthCode,
      birthStreet = birthStreet,
      birthdetail = birthdetail,
      door = door,
      doorStreet = doorStreet,
      doordetail = doordetail,
      address = address,
      addressStreet = addressStreet,
      addressdetail = addressdetail,
      cultureCode = cultureCode,
      sourceincomeCode = sourceincomeCode,
      faithCode = faithCode,
      haveemployment = haveemployment,
      jobCode = jobCode,
      headship = headship,
      employunit = employunit,
      employaddress = employaddress,
      otherspecialty = otherspecialty,
      specialidentityCode = specialidentityCode,
      politicsCode = politicsCode,
      istransientpop = istransientpop,
      istempregist = istempregist,
      havepermit = havepermit,
      haveresidence = haveresidence,
      isservice = isservice,
      specialgroupCode = specialgroupCode,
      haveseparation = haveseparation,
      ismigrantworker = ismigrantworker,
      nameofschool = nameofschool,
      istraining = istraining,
      havecertificate = havecertificate,
      staturest = staturest,
      avoirdupois = avoirdupois,
      footsize = footsize,
      shoelength = shoelength,
      bodilyformCode = bodilyformCode,
      faceformCode = faceformCode,
      iseyeglass = iseyeglass,
      shoesize = shoesize,
      bloodtypeCode = bloodtypeCode,
      gatherOrgCode = gatherOrgCode,
      ipaddress = ipaddress,
      gathererId = gathererId,
      gatherDate = gatherDate,
      gatherTypeId = gatherTypeId,
      status = status,
      isfingerrepeat = isfingerrepeat,
      fingerrepeatno = fingerrepeatno,
      taskSource = taskSource,
      receiveTime = receiveTime,
      isreturn = isreturn,
      returnTime = returnTime,
      annex = annex,
      inputpsn = inputpsn,
      inputtime = inputtime,
      modifiedpsn = modifiedpsn,
      modifiedtime = modifiedtime,
      deletag = deletag,
      schedule = schedule,
      approval = approval,
      dnaCode = dnaCode,
      gatherCategory = gatherCategory,
      personCategory = personCategory,
      auditor = auditor,
      auditedtime = auditedtime,
      isregather = isregather,
      gatherFingerMode = gatherFingerMode,
      caseName = caseName,
      caseClasses = caseClasses,
      reason = reason,
      gatherFingerNum = gatherFingerNum,
      fingerRemark = fingerRemark,
      deprtmac = deprtmac,
      gatherdepartcode = gatherdepartcode,
      gatheruserid = gatheruserid,
      gatherFingerTime = gatherFingerTime,
      isSendTl = isSendTl,
      caseBriefContents = caseBriefContents,
      pushStatus = pushStatus,
      pushDate = pushDate,
      remark = remark,
      dataSources = dataSources,
      fingershowStatus = fingershowStatus,
      cityCode = cityCode,
      delayDeadline = delayDeadline,
      fptGatherDepartCode = fptGatherDepartCode,
      fptGatherDepartName = fptGatherDepartName,
      sid = sid,
      blowCode = blowCode,
      blowStreet = blowStreet,
      blowDetail = blowDetail,
      blowLongitude = blowLongitude,
      blowLatitude = blowLatitude,
      blowEastwest = blowEastwest,
      blowNorthsouth = blowNorthsouth,
      seq = seq,
      cardid = cardid,
      recordmark = recordmark,
      recordsituation = recordsituation,
      validDate = validDate,
      arriveLocalDate = arriveLocalDate,
      leaveLocalDate = leaveLocalDate,
      dbSource = dbSource,
      dbSourceDis = dbSourceDis,
      jobDes = jobDes,
      isXjssmz = isXjssmz,
      passportNum = passportNum,
      countryCode = countryCode,
      foreignName = foreignName,
      passportValidDate = passportValidDate,
      visaPlace = visaPlace,
      passportType = passportType,
      visaDate = visaDate,
      assistLevel = assistLevel,
      assistBonus = assistBonus,
      assistPurpose = assistPurpose,
      assistRefPerson = assistRefPerson,
      assistRefCase = assistRefCase,
      assistValidDate = assistValidDate,
      assistExplain = assistExplain,
      assistDeptCode = assistDeptCode,
      assistDeptName = assistDeptName,
      assistDate = assistDate,
      assistContacts = assistContacts,
      assistNumber = assistNumber,
      assistApproval = assistApproval,
      assistSign = assistSign,
      gatherdepartname = gatherdepartname,
      gatherusername = gatherusername)
  }

  def save(entity: GafisPersonNew)(implicit session: DBSession = autoSession): GafisPersonNew = {
    withSQL {
      update(GafisPersonNew).set(
        column.personid -> entity.personid,
        column.idcardno -> entity.idcardno,
        column.name -> entity.name,
        column.spellname -> entity.spellname,
        column.usedname -> entity.usedname,
        column.usedspell -> entity.usedspell,
        column.aliasname -> entity.aliasname,
        column.aliasspell -> entity.aliasspell,
        column.sexCode -> entity.sexCode,
        column.nativeplaceCode -> entity.nativeplaceCode,
        column.nationCode -> entity.nationCode,
        column.ifmarryCode -> entity.ifmarryCode,
        column.toneCode -> entity.toneCode,
        column.tone -> entity.tone,
        column.birthdayst -> entity.birthdayst,
        column.birthdayed -> entity.birthdayed,
        column.birthCode -> entity.birthCode,
        column.birthStreet -> entity.birthStreet,
        column.birthdetail -> entity.birthdetail,
        column.door -> entity.door,
        column.doorStreet -> entity.doorStreet,
        column.doordetail -> entity.doordetail,
        column.address -> entity.address,
        column.addressStreet -> entity.addressStreet,
        column.addressdetail -> entity.addressdetail,
        column.cultureCode -> entity.cultureCode,
        column.sourceincomeCode -> entity.sourceincomeCode,
        column.faithCode -> entity.faithCode,
        column.haveemployment -> entity.haveemployment,
        column.jobCode -> entity.jobCode,
        column.headship -> entity.headship,
        column.employunit -> entity.employunit,
        column.employaddress -> entity.employaddress,
        column.otherspecialty -> entity.otherspecialty,
        column.specialidentityCode -> entity.specialidentityCode,
        column.politicsCode -> entity.politicsCode,
        column.istransientpop -> entity.istransientpop,
        column.istempregist -> entity.istempregist,
        column.havepermit -> entity.havepermit,
        column.haveresidence -> entity.haveresidence,
        column.isservice -> entity.isservice,
        column.specialgroupCode -> entity.specialgroupCode,
        column.haveseparation -> entity.haveseparation,
        column.ismigrantworker -> entity.ismigrantworker,
        column.nameofschool -> entity.nameofschool,
        column.istraining -> entity.istraining,
        column.havecertificate -> entity.havecertificate,
        column.staturest -> entity.staturest,
        column.avoirdupois -> entity.avoirdupois,
        column.footsize -> entity.footsize,
        column.shoelength -> entity.shoelength,
        column.bodilyformCode -> entity.bodilyformCode,
        column.faceformCode -> entity.faceformCode,
        column.iseyeglass -> entity.iseyeglass,
        column.shoesize -> entity.shoesize,
        column.bloodtypeCode -> entity.bloodtypeCode,
        column.gatherOrgCode -> entity.gatherOrgCode,
        column.ipaddress -> entity.ipaddress,
        column.gathererId -> entity.gathererId,
        column.gatherDate -> entity.gatherDate,
        column.gatherTypeId -> entity.gatherTypeId,
        column.status -> entity.status,
        column.isfingerrepeat -> entity.isfingerrepeat,
        column.fingerrepeatno -> entity.fingerrepeatno,
        column.taskSource -> entity.taskSource,
        column.receiveTime -> entity.receiveTime,
        column.isreturn -> entity.isreturn,
        column.returnTime -> entity.returnTime,
        column.annex -> entity.annex,
        column.inputpsn -> entity.inputpsn,
        column.inputtime -> entity.inputtime,
        column.modifiedpsn -> entity.modifiedpsn,
        column.modifiedtime -> entity.modifiedtime,
        column.deletag -> entity.deletag,
        column.schedule -> entity.schedule,
        column.approval -> entity.approval,
        column.dnaCode -> entity.dnaCode,
        column.gatherCategory -> entity.gatherCategory,
        column.personCategory -> entity.personCategory,
        column.auditor -> entity.auditor,
        column.auditedtime -> entity.auditedtime,
        column.isregather -> entity.isregather,
        column.gatherFingerMode -> entity.gatherFingerMode,
        column.caseName -> entity.caseName,
        column.caseClasses -> entity.caseClasses,
        column.reason -> entity.reason,
        column.gatherFingerNum -> entity.gatherFingerNum,
        column.fingerRemark -> entity.fingerRemark,
        column.deprtmac -> entity.deprtmac,
        column.gatherdepartcode -> entity.gatherdepartcode,
        column.gatheruserid -> entity.gatheruserid,
        column.gatherFingerTime -> entity.gatherFingerTime,
        column.isSendTl -> entity.isSendTl,
        column.caseBriefContents -> entity.caseBriefContents,
        column.pushStatus -> entity.pushStatus,
        column.pushDate -> entity.pushDate,
        column.remark -> entity.remark,
        column.dataSources -> entity.dataSources,
        column.fingershowStatus -> entity.fingershowStatus,
        column.cityCode -> entity.cityCode,
        column.delayDeadline -> entity.delayDeadline,
        column.fptGatherDepartCode -> entity.fptGatherDepartCode,
        column.fptGatherDepartName -> entity.fptGatherDepartName,
        column.sid -> entity.sid,
        column.blowCode -> entity.blowCode,
        column.blowStreet -> entity.blowStreet,
        column.blowDetail -> entity.blowDetail,
        column.blowLongitude -> entity.blowLongitude,
        column.blowLatitude -> entity.blowLatitude,
        column.blowEastwest -> entity.blowEastwest,
        column.blowNorthsouth -> entity.blowNorthsouth,
        column.seq -> entity.seq,
        column.cardid -> entity.cardid,
        column.recordmark -> entity.recordmark,
        column.recordsituation -> entity.recordsituation,
        column.validDate -> entity.validDate,
        column.arriveLocalDate -> entity.arriveLocalDate,
        column.leaveLocalDate -> entity.leaveLocalDate,
        column.dbSource -> entity.dbSource,
        column.dbSourceDis -> entity.dbSourceDis,
        column.jobDes -> entity.jobDes,
        column.isXjssmz -> entity.isXjssmz,
        column.passportNum -> entity.passportNum,
        column.countryCode -> entity.countryCode,
        column.foreignName -> entity.foreignName,
        column.passportValidDate -> entity.passportValidDate,
        column.visaPlace -> entity.visaPlace,
        column.passportType -> entity.passportType,
        column.visaDate -> entity.visaDate,
        column.assistLevel -> entity.assistLevel,
        column.assistBonus -> entity.assistBonus,
        column.assistPurpose -> entity.assistPurpose,
        column.assistRefPerson -> entity.assistRefPerson,
        column.assistRefCase -> entity.assistRefCase,
        column.assistValidDate -> entity.assistValidDate,
        column.assistExplain -> entity.assistExplain,
        column.assistDeptCode -> entity.assistDeptCode,
        column.assistDeptName -> entity.assistDeptName,
        column.assistDate -> entity.assistDate,
        column.assistContacts -> entity.assistContacts,
        column.assistNumber -> entity.assistNumber,
        column.assistApproval -> entity.assistApproval,
        column.assistSign -> entity.assistSign,
        column.gatherdepartname -> entity.gatherdepartname,
        column.gatherusername -> entity.gatherusername
      ).where.eq(column.personid, entity.personid).and.eq(column.idcardno, entity.idcardno).and.eq(column.name, entity.name).and.eq(column.spellname, entity.spellname).and.eq(column.usedname, entity.usedname).and.eq(column.usedspell, entity.usedspell).and.eq(column.aliasname, entity.aliasname).and.eq(column.aliasspell, entity.aliasspell).and.eq(column.sexCode, entity.sexCode).and.eq(column.nativeplaceCode, entity.nativeplaceCode).and.eq(column.nationCode, entity.nationCode).and.eq(column.ifmarryCode, entity.ifmarryCode).and.eq(column.toneCode, entity.toneCode).and.eq(column.tone, entity.tone).and.eq(column.birthdayst, entity.birthdayst).and.eq(column.birthdayed, entity.birthdayed).and.eq(column.birthCode, entity.birthCode).and.eq(column.birthStreet, entity.birthStreet).and.eq(column.birthdetail, entity.birthdetail).and.eq(column.door, entity.door).and.eq(column.doorStreet, entity.doorStreet).and.eq(column.doordetail, entity.doordetail).and.eq(column.address, entity.address).and.eq(column.addressStreet, entity.addressStreet).and.eq(column.addressdetail, entity.addressdetail).and.eq(column.cultureCode, entity.cultureCode).and.eq(column.sourceincomeCode, entity.sourceincomeCode).and.eq(column.faithCode, entity.faithCode).and.eq(column.haveemployment, entity.haveemployment).and.eq(column.jobCode, entity.jobCode).and.eq(column.headship, entity.headship).and.eq(column.employunit, entity.employunit).and.eq(column.employaddress, entity.employaddress).and.eq(column.otherspecialty, entity.otherspecialty).and.eq(column.specialidentityCode, entity.specialidentityCode).and.eq(column.politicsCode, entity.politicsCode).and.eq(column.istransientpop, entity.istransientpop).and.eq(column.istempregist, entity.istempregist).and.eq(column.havepermit, entity.havepermit).and.eq(column.haveresidence, entity.haveresidence).and.eq(column.isservice, entity.isservice).and.eq(column.specialgroupCode, entity.specialgroupCode).and.eq(column.haveseparation, entity.haveseparation).and.eq(column.ismigrantworker, entity.ismigrantworker).and.eq(column.nameofschool, entity.nameofschool).and.eq(column.istraining, entity.istraining).and.eq(column.havecertificate, entity.havecertificate).and.eq(column.staturest, entity.staturest).and.eq(column.avoirdupois, entity.avoirdupois).and.eq(column.footsize, entity.footsize).and.eq(column.shoelength, entity.shoelength).and.eq(column.bodilyformCode, entity.bodilyformCode).and.eq(column.faceformCode, entity.faceformCode).and.eq(column.iseyeglass, entity.iseyeglass).and.eq(column.shoesize, entity.shoesize).and.eq(column.bloodtypeCode, entity.bloodtypeCode).and.eq(column.gatherOrgCode, entity.gatherOrgCode).and.eq(column.ipaddress, entity.ipaddress).and.eq(column.gathererId, entity.gathererId).and.eq(column.gatherDate, entity.gatherDate).and.eq(column.gatherTypeId, entity.gatherTypeId).and.eq(column.status, entity.status).and.eq(column.isfingerrepeat, entity.isfingerrepeat).and.eq(column.fingerrepeatno, entity.fingerrepeatno).and.eq(column.taskSource, entity.taskSource).and.eq(column.receiveTime, entity.receiveTime).and.eq(column.isreturn, entity.isreturn).and.eq(column.returnTime, entity.returnTime).and.eq(column.annex, entity.annex).and.eq(column.inputpsn, entity.inputpsn).and.eq(column.inputtime, entity.inputtime).and.eq(column.modifiedpsn, entity.modifiedpsn).and.eq(column.modifiedtime, entity.modifiedtime).and.eq(column.deletag, entity.deletag).and.eq(column.schedule, entity.schedule).and.eq(column.approval, entity.approval).and.eq(column.dnaCode, entity.dnaCode).and.eq(column.gatherCategory, entity.gatherCategory).and.eq(column.personCategory, entity.personCategory).and.eq(column.auditor, entity.auditor).and.eq(column.auditedtime, entity.auditedtime).and.eq(column.isregather, entity.isregather).and.eq(column.gatherFingerMode, entity.gatherFingerMode).and.eq(column.caseName, entity.caseName).and.eq(column.caseClasses, entity.caseClasses).and.eq(column.reason, entity.reason).and.eq(column.gatherFingerNum, entity.gatherFingerNum).and.eq(column.fingerRemark, entity.fingerRemark).and.eq(column.deprtmac, entity.deprtmac).and.eq(column.gatherdepartcode, entity.gatherdepartcode).and.eq(column.gatheruserid, entity.gatheruserid).and.eq(column.gatherFingerTime, entity.gatherFingerTime).and.eq(column.isSendTl, entity.isSendTl).and.eq(column.caseBriefContents, entity.caseBriefContents).and.eq(column.pushStatus, entity.pushStatus).and.eq(column.pushDate, entity.pushDate).and.eq(column.remark, entity.remark).and.eq(column.dataSources, entity.dataSources).and.eq(column.fingershowStatus, entity.fingershowStatus).and.eq(column.cityCode, entity.cityCode).and.eq(column.delayDeadline, entity.delayDeadline).and.eq(column.fptGatherDepartCode, entity.fptGatherDepartCode).and.eq(column.fptGatherDepartName, entity.fptGatherDepartName).and.eq(column.sid, entity.sid).and.eq(column.blowCode, entity.blowCode).and.eq(column.blowStreet, entity.blowStreet).and.eq(column.blowDetail, entity.blowDetail).and.eq(column.blowLongitude, entity.blowLongitude).and.eq(column.blowLatitude, entity.blowLatitude).and.eq(column.blowEastwest, entity.blowEastwest).and.eq(column.blowNorthsouth, entity.blowNorthsouth).and.eq(column.seq, entity.seq).and.eq(column.cardid, entity.cardid).and.eq(column.recordmark, entity.recordmark).and.eq(column.recordsituation, entity.recordsituation).and.eq(column.validDate, entity.validDate).and.eq(column.arriveLocalDate, entity.arriveLocalDate).and.eq(column.leaveLocalDate, entity.leaveLocalDate).and.eq(column.dbSource, entity.dbSource).and.eq(column.dbSourceDis, entity.dbSourceDis).and.eq(column.jobDes, entity.jobDes).and.eq(column.isXjssmz, entity.isXjssmz).and.eq(column.passportNum, entity.passportNum).and.eq(column.countryCode, entity.countryCode).and.eq(column.foreignName, entity.foreignName).and.eq(column.passportValidDate, entity.passportValidDate).and.eq(column.visaPlace, entity.visaPlace).and.eq(column.passportType, entity.passportType).and.eq(column.visaDate, entity.visaDate).and.eq(column.assistLevel, entity.assistLevel).and.eq(column.assistBonus, entity.assistBonus).and.eq(column.assistPurpose, entity.assistPurpose).and.eq(column.assistRefPerson, entity.assistRefPerson).and.eq(column.assistRefCase, entity.assistRefCase).and.eq(column.assistValidDate, entity.assistValidDate).and.eq(column.assistExplain, entity.assistExplain).and.eq(column.assistDeptCode, entity.assistDeptCode).and.eq(column.assistDeptName, entity.assistDeptName).and.eq(column.assistDate, entity.assistDate).and.eq(column.assistContacts, entity.assistContacts).and.eq(column.assistNumber, entity.assistNumber).and.eq(column.assistApproval, entity.assistApproval).and.eq(column.assistSign, entity.assistSign).and.eq(column.gatherdepartname, entity.gatherdepartname).and.eq(column.gatherusername, entity.gatherusername)
    }.update.apply()
    entity
  }

  def destroy(entity: GafisPersonNew)(implicit session: DBSession = autoSession): Unit = {
    withSQL { delete.from(GafisPersonNew).where.eq(column.personid, entity.personid).and.eq(column.idcardno, entity.idcardno).and.eq(column.name, entity.name).and.eq(column.spellname, entity.spellname).and.eq(column.usedname, entity.usedname).and.eq(column.usedspell, entity.usedspell).and.eq(column.aliasname, entity.aliasname).and.eq(column.aliasspell, entity.aliasspell).and.eq(column.sexCode, entity.sexCode).and.eq(column.nativeplaceCode, entity.nativeplaceCode).and.eq(column.nationCode, entity.nationCode).and.eq(column.ifmarryCode, entity.ifmarryCode).and.eq(column.toneCode, entity.toneCode).and.eq(column.tone, entity.tone).and.eq(column.birthdayst, entity.birthdayst).and.eq(column.birthdayed, entity.birthdayed).and.eq(column.birthCode, entity.birthCode).and.eq(column.birthStreet, entity.birthStreet).and.eq(column.birthdetail, entity.birthdetail).and.eq(column.door, entity.door).and.eq(column.doorStreet, entity.doorStreet).and.eq(column.doordetail, entity.doordetail).and.eq(column.address, entity.address).and.eq(column.addressStreet, entity.addressStreet).and.eq(column.addressdetail, entity.addressdetail).and.eq(column.cultureCode, entity.cultureCode).and.eq(column.sourceincomeCode, entity.sourceincomeCode).and.eq(column.faithCode, entity.faithCode).and.eq(column.haveemployment, entity.haveemployment).and.eq(column.jobCode, entity.jobCode).and.eq(column.headship, entity.headship).and.eq(column.employunit, entity.employunit).and.eq(column.employaddress, entity.employaddress).and.eq(column.otherspecialty, entity.otherspecialty).and.eq(column.specialidentityCode, entity.specialidentityCode).and.eq(column.politicsCode, entity.politicsCode).and.eq(column.istransientpop, entity.istransientpop).and.eq(column.istempregist, entity.istempregist).and.eq(column.havepermit, entity.havepermit).and.eq(column.haveresidence, entity.haveresidence).and.eq(column.isservice, entity.isservice).and.eq(column.specialgroupCode, entity.specialgroupCode).and.eq(column.haveseparation, entity.haveseparation).and.eq(column.ismigrantworker, entity.ismigrantworker).and.eq(column.nameofschool, entity.nameofschool).and.eq(column.istraining, entity.istraining).and.eq(column.havecertificate, entity.havecertificate).and.eq(column.staturest, entity.staturest).and.eq(column.avoirdupois, entity.avoirdupois).and.eq(column.footsize, entity.footsize).and.eq(column.shoelength, entity.shoelength).and.eq(column.bodilyformCode, entity.bodilyformCode).and.eq(column.faceformCode, entity.faceformCode).and.eq(column.iseyeglass, entity.iseyeglass).and.eq(column.shoesize, entity.shoesize).and.eq(column.bloodtypeCode, entity.bloodtypeCode).and.eq(column.gatherOrgCode, entity.gatherOrgCode).and.eq(column.ipaddress, entity.ipaddress).and.eq(column.gathererId, entity.gathererId).and.eq(column.gatherDate, entity.gatherDate).and.eq(column.gatherTypeId, entity.gatherTypeId).and.eq(column.status, entity.status).and.eq(column.isfingerrepeat, entity.isfingerrepeat).and.eq(column.fingerrepeatno, entity.fingerrepeatno).and.eq(column.taskSource, entity.taskSource).and.eq(column.receiveTime, entity.receiveTime).and.eq(column.isreturn, entity.isreturn).and.eq(column.returnTime, entity.returnTime).and.eq(column.annex, entity.annex).and.eq(column.inputpsn, entity.inputpsn).and.eq(column.inputtime, entity.inputtime).and.eq(column.modifiedpsn, entity.modifiedpsn).and.eq(column.modifiedtime, entity.modifiedtime).and.eq(column.deletag, entity.deletag).and.eq(column.schedule, entity.schedule).and.eq(column.approval, entity.approval).and.eq(column.dnaCode, entity.dnaCode).and.eq(column.gatherCategory, entity.gatherCategory).and.eq(column.personCategory, entity.personCategory).and.eq(column.auditor, entity.auditor).and.eq(column.auditedtime, entity.auditedtime).and.eq(column.isregather, entity.isregather).and.eq(column.gatherFingerMode, entity.gatherFingerMode).and.eq(column.caseName, entity.caseName).and.eq(column.caseClasses, entity.caseClasses).and.eq(column.reason, entity.reason).and.eq(column.gatherFingerNum, entity.gatherFingerNum).and.eq(column.fingerRemark, entity.fingerRemark).and.eq(column.deprtmac, entity.deprtmac).and.eq(column.gatherdepartcode, entity.gatherdepartcode).and.eq(column.gatheruserid, entity.gatheruserid).and.eq(column.gatherFingerTime, entity.gatherFingerTime).and.eq(column.isSendTl, entity.isSendTl).and.eq(column.caseBriefContents, entity.caseBriefContents).and.eq(column.pushStatus, entity.pushStatus).and.eq(column.pushDate, entity.pushDate).and.eq(column.remark, entity.remark).and.eq(column.dataSources, entity.dataSources).and.eq(column.fingershowStatus, entity.fingershowStatus).and.eq(column.cityCode, entity.cityCode).and.eq(column.delayDeadline, entity.delayDeadline).and.eq(column.fptGatherDepartCode, entity.fptGatherDepartCode).and.eq(column.fptGatherDepartName, entity.fptGatherDepartName).and.eq(column.sid, entity.sid).and.eq(column.blowCode, entity.blowCode).and.eq(column.blowStreet, entity.blowStreet).and.eq(column.blowDetail, entity.blowDetail).and.eq(column.blowLongitude, entity.blowLongitude).and.eq(column.blowLatitude, entity.blowLatitude).and.eq(column.blowEastwest, entity.blowEastwest).and.eq(column.blowNorthsouth, entity.blowNorthsouth).and.eq(column.seq, entity.seq).and.eq(column.cardid, entity.cardid).and.eq(column.recordmark, entity.recordmark).and.eq(column.recordsituation, entity.recordsituation).and.eq(column.validDate, entity.validDate).and.eq(column.arriveLocalDate, entity.arriveLocalDate).and.eq(column.leaveLocalDate, entity.leaveLocalDate).and.eq(column.dbSource, entity.dbSource).and.eq(column.dbSourceDis, entity.dbSourceDis).and.eq(column.jobDes, entity.jobDes).and.eq(column.isXjssmz, entity.isXjssmz).and.eq(column.passportNum, entity.passportNum).and.eq(column.countryCode, entity.countryCode).and.eq(column.foreignName, entity.foreignName).and.eq(column.passportValidDate, entity.passportValidDate).and.eq(column.visaPlace, entity.visaPlace).and.eq(column.passportType, entity.passportType).and.eq(column.visaDate, entity.visaDate).and.eq(column.assistLevel, entity.assistLevel).and.eq(column.assistBonus, entity.assistBonus).and.eq(column.assistPurpose, entity.assistPurpose).and.eq(column.assistRefPerson, entity.assistRefPerson).and.eq(column.assistRefCase, entity.assistRefCase).and.eq(column.assistValidDate, entity.assistValidDate).and.eq(column.assistExplain, entity.assistExplain).and.eq(column.assistDeptCode, entity.assistDeptCode).and.eq(column.assistDeptName, entity.assistDeptName).and.eq(column.assistDate, entity.assistDate).and.eq(column.assistContacts, entity.assistContacts).and.eq(column.assistNumber, entity.assistNumber).and.eq(column.assistApproval, entity.assistApproval).and.eq(column.assistSign, entity.assistSign).and.eq(column.gatherdepartname, entity.gatherdepartname).and.eq(column.gatherusername, entity.gatherusername) }.update.apply()
  }

}
