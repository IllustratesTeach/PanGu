package nirvana.hall.api.entities

import scalikejdbc._
import org.joda.time.{DateTime}

case class GafisPerson(
  personid: String,
  idcardno: Option[String] = None,
  name: Option[String] = None,
  spellname: Option[String] = None,
  usedname: Option[String] = None,
  usedspell: Option[String] = None,
  aliasname: Option[String] = None,
  aliasspell: Option[String] = None,
  sexCode: Option[String] = None,
  nativeplaceCode: Option[String] = None,
  nationCode: Option[String] = None,
  ifmarryCode: Option[String] = None,
  toneCode: Option[String] = None,
  tone: Option[String] = None,
  birthdayst: Option[DateTime] = None,
  birthdayed: Option[DateTime] = None,
  birthCode: Option[String] = None,
  birthStreet: Option[String] = None,
  birthdetail: Option[String] = None,
  door: Option[String] = None,
  doorStreet: Option[String] = None,
  doordetail: Option[String] = None,
  address: Option[String] = None,
  addressStreet: Option[String] = None,
  addressdetail: Option[String] = None,
  cultureCode: Option[String] = None,
  sourceincomeCode: Option[String] = None,
  faithCode: Option[String] = None,
  haveemployment: Option[String] = None,
  jobCode: Option[String] = None,
  headship: Option[String] = None,
  employunit: Option[String] = None,
  employaddress: Option[String] = None,
  otherspecialty: Option[String] = None,
  specialidentityCode: Option[String] = None,
  politicsCode: Option[String] = None,
  istransientpop: Option[String] = None,
  istempregist: Option[String] = None,
  havepermit: Option[String] = None,
  haveresidence: Option[String] = None,
  isservice: Option[String] = None,
  specialgroupCode: Option[String] = None,
  haveseparation: Option[String] = None,
  ismigrantworker: Option[String] = None,
  nameofschool: Option[String] = None,
  istraining: Option[String] = None,
  havecertificate: Option[String] = None,
  staturest: Option[Short] = None,
  avoirdupois: Option[Short] = None,
  footsize: Option[Short] = None,
  shoelength: Option[Short] = None,
  bodilyformCode: Option[String] = None,
  faceformCode: Option[String] = None,
  iseyeglass: Option[String] = None,
  shoesize: Option[Short] = None,
  bloodtypeCode: Option[String] = None,
  gatherOrgCode: Option[String] = None,
  ipaddress: Option[String] = None,
  gathererId: Option[String] = None,
  gatherDate: Option[DateTime] = None,
  gatherTypeId: Option[String] = None,
  status: Option[String] = None,
  isfingerrepeat: Option[String] = None,
  fingerrepeatno: Option[String] = None,
  taskSource: Option[String] = None,
  receiveTime: Option[DateTime] = None,
  isreturn: Option[String] = None,
  returnTime: Option[DateTime] = None,
  annex: Option[String] = None,
  inputpsn: Option[String] = None,
  inputtime: Option[DateTime] = None,
  modifiedpsn: Option[String] = None,
  modifiedtime: Option[DateTime] = None,
  deletag: Option[String] = None,
  schedule: Option[String] = None,
  approval: Option[String] = None,
  dnaCode: Option[String] = None,
  gatherCategory: Option[String] = None,
  personCategory: Option[String] = None,
  auditor: Option[String] = None,
  auditedtime: Option[DateTime] = None,
  isregather: Option[String] = None,
  gatherFingerMode: Option[String] = None,
  caseName: Option[String] = None,
  caseClasses: Option[String] = None,
  reason: Option[String] = None,
  gatherFingerNum: Option[Long] = None,
  fingerRemark: Option[String] = None,
  deprtmac: Option[String] = None,
  gatherdepartcode: Option[String] = None,
  gatheruserid: Option[String] = None,
  gatherFingerTime: Option[DateTime] = None,
  isSendTl: Option[Long] = None,
  caseBriefContents: Option[String] = None,
  pushStatus: Option[String] = None,
  pushDate: Option[DateTime] = None,
  remark: Option[String] = None,
  dataSources: Option[Short] = None,
  fingershowStatus: Option[Short] = None,
  cityCode: Option[String] = None,
  delayDeadline: Option[DateTime] = None,
  fptGatherDepartCode: Option[String] = None,
  fptGatherDepartName: Option[String] = None,
  sid: Option[Long] = None,
  blowCode: Option[String] = None,
  blowStreet: Option[String] = None,
  blowDetail: Option[String] = None,
  blowLongitude: Option[String] = None,
  blowLatitude: Option[String] = None,
  blowEastwest: Option[String] = None,
  blowNorthsouth: Option[String] = None,
  seq: Option[Long] = None,
  cardid: Option[String] = None,
  recordmark: Option[String] = None,
  recordsituation: Option[String] = None,
  validDate: Option[DateTime] = None,
  arriveLocalDate: Option[DateTime] = None,
  leaveLocalDate: Option[DateTime] = None,
  dbSource: Option[String] = None,
  dbSourceDis: Option[String] = None,
  jobDes: Option[String] = None,
  isXjssmz: Option[String] = None,
  passportNum: Option[String] = None,
  countryCode: Option[String] = None,
  foreignName: Option[String] = None,
  passportValidDate: Option[DateTime] = None,
  visaPlace: Option[String] = None,
  passportType: Option[String] = None,
  visaDate: Option[DateTime] = None,
  assistLevel: Option[String] = None,
  assistBonus: Option[String] = None,
  assistPurpose: Option[String] = None,
  assistRefPerson: Option[String] = None,
  assistRefCase: Option[String] = None,
  assistValidDate: Option[String] = None,
  assistExplain: Option[String] = None,
  assistDeptCode: Option[String] = None,
  assistDeptName: Option[String] = None,
  assistDate: Option[String] = None,
  assistContacts: Option[String] = None,
  assistNumber: Option[String] = None,
  assistApproval: Option[String] = None,
  assistSign: Option[String] = None,
  gatherdepartname: Option[String] = None,
  gatherusername: Option[String] = None,
  contrcaptureCode: Option[String] = None) {

  def save()(implicit session: DBSession = GafisPerson.autoSession): GafisPerson = GafisPerson.save(this)(session)

  def destroy()(implicit session: DBSession = GafisPerson.autoSession): Unit = GafisPerson.destroy(this)(session)

}


object GafisPerson extends SQLSyntaxSupport[GafisPerson] {

  override val tableName = "GAFIS_PERSON"

  override val columns = Seq("PERSONID", "IDCARDNO", "NAME", "SPELLNAME", "USEDNAME", "USEDSPELL", "ALIASNAME", "ALIASSPELL", "SEX_CODE", "NATIVEPLACE_CODE", "NATION_CODE", "IFMARRY_CODE", "TONE_CODE", "TONE", "BIRTHDAYST", "BIRTHDAYED", "BIRTH_CODE", "BIRTH_STREET", "BIRTHDETAIL", "DOOR", "DOOR_STREET", "DOORDETAIL", "ADDRESS", "ADDRESS_STREET", "ADDRESSDETAIL", "CULTURE_CODE", "SOURCEINCOME_CODE", "FAITH_CODE", "HAVEEMPLOYMENT", "JOB_CODE", "HEADSHIP", "EMPLOYUNIT", "EMPLOYADDRESS", "OTHERSPECIALTY", "SPECIALIDENTITY_CODE", "POLITICS_CODE", "ISTRANSIENTPOP", "ISTEMPREGIST", "HAVEPERMIT", "HAVERESIDENCE", "ISSERVICE", "SPECIALGROUP_CODE", "HAVESEPARATION", "ISMIGRANTWORKER", "NAMEOFSCHOOL", "ISTRAINING", "HAVECERTIFICATE", "STATUREST", "AVOIRDUPOIS", "FOOTSIZE", "SHOELENGTH", "BODILYFORM_CODE", "FACEFORM_CODE", "ISEYEGLASS", "SHOESIZE", "BLOODTYPE_CODE", "GATHER_ORG_CODE", "IPADDRESS", "GATHERER_ID", "GATHER_DATE", "GATHER_TYPE_ID", "STATUS", "ISFINGERREPEAT", "FINGERREPEATNO", "TASK_SOURCE", "RECEIVE_TIME", "ISRETURN", "RETURN_TIME", "ANNEX", "INPUTPSN", "INPUTTIME", "MODIFIEDPSN", "MODIFIEDTIME", "DELETAG", "SCHEDULE", "APPROVAL", "DNA_CODE", "GATHER_CATEGORY", "PERSON_CATEGORY", "AUDITOR", "AUDITEDTIME", "ISREGATHER", "GATHER_FINGER_MODE", "CASE_NAME", "CASE_CLASSES", "REASON", "GATHER_FINGER_NUM", "FINGER_REMARK", "DEPRTMAC", "GATHERDEPARTCODE", "GATHERUSERID", "GATHER_FINGER_TIME", "IS_SEND_TL", "CASE_BRIEF_CONTENTS", "PUSH_STATUS", "PUSH_DATE", "REMARK", "DATA_SOURCES", "FINGERSHOW_STATUS", "CITY_CODE", "DELAY_DEADLINE", "FPT_GATHER_DEPART_CODE", "FPT_GATHER_DEPART_NAME", "SID", "BLOW_CODE", "BLOW_STREET", "BLOW_DETAIL", "BLOW_LONGITUDE", "BLOW_LATITUDE", "BLOW_EASTWEST", "BLOW_NORTHSOUTH", "SEQ", "CARDID", "RECORDMARK", "RECORDSITUATION", "VALID_DATE", "ARRIVE_LOCAL_DATE", "LEAVE_LOCAL_DATE", "DB_SOURCE", "DB_SOURCE_DIS", "JOB_DES", "IS_XJSSMZ", "PASSPORT_NUM", "COUNTRY_CODE", "FOREIGN_NAME", "PASSPORT_VALID_DATE", "VISA_PLACE", "PASSPORT_TYPE", "VISA_DATE", "ASSIST_LEVEL", "ASSIST_BONUS", "ASSIST_PURPOSE", "ASSIST_REF_PERSON", "ASSIST_REF_CASE", "ASSIST_VALID_DATE", "ASSIST_EXPLAIN", "ASSIST_DEPT_CODE", "ASSIST_DEPT_NAME", "ASSIST_DATE", "ASSIST_CONTACTS", "ASSIST_NUMBER", "ASSIST_APPROVAL", "ASSIST_SIGN", "GATHERDEPARTNAME", "GATHERUSERNAME", "CONTRCAPTURE_CODE")

  def apply(gp: SyntaxProvider[GafisPerson])(rs: WrappedResultSet): GafisPerson = apply(gp.resultName)(rs)
  def apply(gp: ResultName[GafisPerson])(rs: WrappedResultSet): GafisPerson = new GafisPerson(
    personid = rs.get(gp.personid),
    idcardno = rs.get(gp.idcardno),
    name = rs.get(gp.name),
    spellname = rs.get(gp.spellname),
    usedname = rs.get(gp.usedname),
    usedspell = rs.get(gp.usedspell),
    aliasname = rs.get(gp.aliasname),
    aliasspell = rs.get(gp.aliasspell),
    sexCode = rs.get(gp.sexCode),
    nativeplaceCode = rs.get(gp.nativeplaceCode),
    nationCode = rs.get(gp.nationCode),
    ifmarryCode = rs.get(gp.ifmarryCode),
    toneCode = rs.get(gp.toneCode),
    tone = rs.get(gp.tone),
    birthdayst = rs.get(gp.birthdayst),
    birthdayed = rs.get(gp.birthdayed),
    birthCode = rs.get(gp.birthCode),
    birthStreet = rs.get(gp.birthStreet),
    birthdetail = rs.get(gp.birthdetail),
    door = rs.get(gp.door),
    doorStreet = rs.get(gp.doorStreet),
    doordetail = rs.get(gp.doordetail),
    address = rs.get(gp.address),
    addressStreet = rs.get(gp.addressStreet),
    addressdetail = rs.get(gp.addressdetail),
    cultureCode = rs.get(gp.cultureCode),
    sourceincomeCode = rs.get(gp.sourceincomeCode),
    faithCode = rs.get(gp.faithCode),
    haveemployment = rs.get(gp.haveemployment),
    jobCode = rs.get(gp.jobCode),
    headship = rs.get(gp.headship),
    employunit = rs.get(gp.employunit),
    employaddress = rs.get(gp.employaddress),
    otherspecialty = rs.get(gp.otherspecialty),
    specialidentityCode = rs.get(gp.specialidentityCode),
    politicsCode = rs.get(gp.politicsCode),
    istransientpop = rs.get(gp.istransientpop),
    istempregist = rs.get(gp.istempregist),
    havepermit = rs.get(gp.havepermit),
    haveresidence = rs.get(gp.haveresidence),
    isservice = rs.get(gp.isservice),
    specialgroupCode = rs.get(gp.specialgroupCode),
    haveseparation = rs.get(gp.haveseparation),
    ismigrantworker = rs.get(gp.ismigrantworker),
    nameofschool = rs.get(gp.nameofschool),
    istraining = rs.get(gp.istraining),
    havecertificate = rs.get(gp.havecertificate),
    staturest = rs.get(gp.staturest),
    avoirdupois = rs.get(gp.avoirdupois),
    footsize = rs.get(gp.footsize),
    shoelength = rs.get(gp.shoelength),
    bodilyformCode = rs.get(gp.bodilyformCode),
    faceformCode = rs.get(gp.faceformCode),
    iseyeglass = rs.get(gp.iseyeglass),
    shoesize = rs.get(gp.shoesize),
    bloodtypeCode = rs.get(gp.bloodtypeCode),
    gatherOrgCode = rs.get(gp.gatherOrgCode),
    ipaddress = rs.get(gp.ipaddress),
    gathererId = rs.get(gp.gathererId),
    gatherDate = rs.get(gp.gatherDate),
    gatherTypeId = rs.get(gp.gatherTypeId),
    status = rs.get(gp.status),
    isfingerrepeat = rs.get(gp.isfingerrepeat),
    fingerrepeatno = rs.get(gp.fingerrepeatno),
    taskSource = rs.get(gp.taskSource),
    receiveTime = rs.get(gp.receiveTime),
    isreturn = rs.get(gp.isreturn),
    returnTime = rs.get(gp.returnTime),
    annex = rs.get(gp.annex),
    inputpsn = rs.get(gp.inputpsn),
    inputtime = rs.get(gp.inputtime),
    modifiedpsn = rs.get(gp.modifiedpsn),
    modifiedtime = rs.get(gp.modifiedtime),
    deletag = rs.get(gp.deletag),
    schedule = rs.get(gp.schedule),
    approval = rs.get(gp.approval),
    dnaCode = rs.get(gp.dnaCode),
    gatherCategory = rs.get(gp.gatherCategory),
    personCategory = rs.get(gp.personCategory),
    auditor = rs.get(gp.auditor),
    auditedtime = rs.get(gp.auditedtime),
    isregather = rs.get(gp.isregather),
    gatherFingerMode = rs.get(gp.gatherFingerMode),
    caseName = rs.get(gp.caseName),
    caseClasses = rs.get(gp.caseClasses),
    reason = rs.get(gp.reason),
    gatherFingerNum = rs.get(gp.gatherFingerNum),
    fingerRemark = rs.get(gp.fingerRemark),
    deprtmac = rs.get(gp.deprtmac),
    gatherdepartcode = rs.get(gp.gatherdepartcode),
    gatheruserid = rs.get(gp.gatheruserid),
    gatherFingerTime = rs.get(gp.gatherFingerTime),
    isSendTl = rs.get(gp.isSendTl),
    caseBriefContents = rs.get(gp.caseBriefContents),
    pushStatus = rs.get(gp.pushStatus),
    pushDate = rs.get(gp.pushDate),
    remark = rs.get(gp.remark),
    dataSources = rs.get(gp.dataSources),
    fingershowStatus = rs.get(gp.fingershowStatus),
    cityCode = rs.get(gp.cityCode),
    delayDeadline = rs.get(gp.delayDeadline),
    fptGatherDepartCode = rs.get(gp.fptGatherDepartCode),
    fptGatherDepartName = rs.get(gp.fptGatherDepartName),
    sid = rs.get(gp.sid),
    blowCode = rs.get(gp.blowCode),
    blowStreet = rs.get(gp.blowStreet),
    blowDetail = rs.get(gp.blowDetail),
    blowLongitude = rs.get(gp.blowLongitude),
    blowLatitude = rs.get(gp.blowLatitude),
    blowEastwest = rs.get(gp.blowEastwest),
    blowNorthsouth = rs.get(gp.blowNorthsouth),
    seq = rs.get(gp.seq),
    cardid = rs.get(gp.cardid),
    recordmark = rs.get(gp.recordmark),
    recordsituation = rs.get(gp.recordsituation),
    validDate = rs.get(gp.validDate),
    arriveLocalDate = rs.get(gp.arriveLocalDate),
    leaveLocalDate = rs.get(gp.leaveLocalDate),
    dbSource = rs.get(gp.dbSource),
    dbSourceDis = rs.get(gp.dbSourceDis),
    jobDes = rs.get(gp.jobDes),
    isXjssmz = rs.get(gp.isXjssmz),
    passportNum = rs.get(gp.passportNum),
    countryCode = rs.get(gp.countryCode),
    foreignName = rs.get(gp.foreignName),
    passportValidDate = rs.get(gp.passportValidDate),
    visaPlace = rs.get(gp.visaPlace),
    passportType = rs.get(gp.passportType),
    visaDate = rs.get(gp.visaDate),
    assistLevel = rs.get(gp.assistLevel),
    assistBonus = rs.get(gp.assistBonus),
    assistPurpose = rs.get(gp.assistPurpose),
    assistRefPerson = rs.get(gp.assistRefPerson),
    assistRefCase = rs.get(gp.assistRefCase),
    assistValidDate = rs.get(gp.assistValidDate),
    assistExplain = rs.get(gp.assistExplain),
    assistDeptCode = rs.get(gp.assistDeptCode),
    assistDeptName = rs.get(gp.assistDeptName),
    assistDate = rs.get(gp.assistDate),
    assistContacts = rs.get(gp.assistContacts),
    assistNumber = rs.get(gp.assistNumber),
    assistApproval = rs.get(gp.assistApproval),
    assistSign = rs.get(gp.assistSign),
    gatherdepartname = rs.get(gp.gatherdepartname),
    gatherusername = rs.get(gp.gatherusername),
    contrcaptureCode = rs.get(gp.contrcaptureCode)
  )

  val gp = GafisPerson.syntax("gp")

 override def autoSession = nirvana.hall.api.services.AutoSpringDataSourceSession()

  def find(personid: String)(implicit session: DBSession = autoSession): Option[GafisPerson] = {
    withSQL {
      select.from(GafisPerson as gp).where.eq(gp.personid, personid)
    }.map(GafisPerson(gp.resultName)).single.apply()
  }

  def findAll()(implicit session: DBSession = autoSession): List[GafisPerson] = {
    withSQL(select.from(GafisPerson as gp)).map(GafisPerson(gp.resultName)).list.apply()
  }

  def countAll()(implicit session: DBSession = autoSession): Long = {
    withSQL(select(sqls.count).from(GafisPerson as gp)).map(rs => rs.long(1)).single.apply().get
  }

  def findBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Option[GafisPerson] = {
    withSQL {
      select.from(GafisPerson as gp).where.append(where)
    }.map(GafisPerson(gp.resultName)).single.apply()
  }

  def findAllBy(where: SQLSyntax)(implicit session: DBSession = autoSession): List[GafisPerson] = {
    withSQL {
      select.from(GafisPerson as gp).where.append(where)
    }.map(GafisPerson(gp.resultName)).list.apply()
  }

  def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {
    withSQL {
      select(sqls.count).from(GafisPerson as gp).where.append(where)
    }.map(_.long(1)).single.apply().get
  }

  def create(
    personid: String,
    idcardno: Option[String] = None,
    name: Option[String] = None,
    spellname: Option[String] = None,
    usedname: Option[String] = None,
    usedspell: Option[String] = None,
    aliasname: Option[String] = None,
    aliasspell: Option[String] = None,
    sexCode: Option[String] = None,
    nativeplaceCode: Option[String] = None,
    nationCode: Option[String] = None,
    ifmarryCode: Option[String] = None,
    toneCode: Option[String] = None,
    tone: Option[String] = None,
    birthdayst: Option[DateTime] = None,
    birthdayed: Option[DateTime] = None,
    birthCode: Option[String] = None,
    birthStreet: Option[String] = None,
    birthdetail: Option[String] = None,
    door: Option[String] = None,
    doorStreet: Option[String] = None,
    doordetail: Option[String] = None,
    address: Option[String] = None,
    addressStreet: Option[String] = None,
    addressdetail: Option[String] = None,
    cultureCode: Option[String] = None,
    sourceincomeCode: Option[String] = None,
    faithCode: Option[String] = None,
    haveemployment: Option[String] = None,
    jobCode: Option[String] = None,
    headship: Option[String] = None,
    employunit: Option[String] = None,
    employaddress: Option[String] = None,
    otherspecialty: Option[String] = None,
    specialidentityCode: Option[String] = None,
    politicsCode: Option[String] = None,
    istransientpop: Option[String] = None,
    istempregist: Option[String] = None,
    havepermit: Option[String] = None,
    haveresidence: Option[String] = None,
    isservice: Option[String] = None,
    specialgroupCode: Option[String] = None,
    haveseparation: Option[String] = None,
    ismigrantworker: Option[String] = None,
    nameofschool: Option[String] = None,
    istraining: Option[String] = None,
    havecertificate: Option[String] = None,
    staturest: Option[Short] = None,
    avoirdupois: Option[Short] = None,
    footsize: Option[Short] = None,
    shoelength: Option[Short] = None,
    bodilyformCode: Option[String] = None,
    faceformCode: Option[String] = None,
    iseyeglass: Option[String] = None,
    shoesize: Option[Short] = None,
    bloodtypeCode: Option[String] = None,
    gatherOrgCode: Option[String] = None,
    ipaddress: Option[String] = None,
    gathererId: Option[String] = None,
    gatherDate: Option[DateTime] = None,
    gatherTypeId: Option[String] = None,
    status: Option[String] = None,
    isfingerrepeat: Option[String] = None,
    fingerrepeatno: Option[String] = None,
    taskSource: Option[String] = None,
    receiveTime: Option[DateTime] = None,
    isreturn: Option[String] = None,
    returnTime: Option[DateTime] = None,
    annex: Option[String] = None,
    inputpsn: Option[String] = None,
    inputtime: Option[DateTime] = None,
    modifiedpsn: Option[String] = None,
    modifiedtime: Option[DateTime] = None,
    deletag: Option[String] = None,
    schedule: Option[String] = None,
    approval: Option[String] = None,
    dnaCode: Option[String] = None,
    gatherCategory: Option[String] = None,
    personCategory: Option[String] = None,
    auditor: Option[String] = None,
    auditedtime: Option[DateTime] = None,
    isregather: Option[String] = None,
    gatherFingerMode: Option[String] = None,
    caseName: Option[String] = None,
    caseClasses: Option[String] = None,
    reason: Option[String] = None,
    gatherFingerNum: Option[Long] = None,
    fingerRemark: Option[String] = None,
    deprtmac: Option[String] = None,
    gatherdepartcode: Option[String] = None,
    gatheruserid: Option[String] = None,
    gatherFingerTime: Option[DateTime] = None,
    isSendTl: Option[Long] = None,
    caseBriefContents: Option[String] = None,
    pushStatus: Option[String] = None,
    pushDate: Option[DateTime] = None,
    remark: Option[String] = None,
    dataSources: Option[Short] = None,
    fingershowStatus: Option[Short] = None,
    cityCode: Option[String] = None,
    delayDeadline: Option[DateTime] = None,
    fptGatherDepartCode: Option[String] = None,
    fptGatherDepartName: Option[String] = None,
    sid: Option[Long] = None,
    blowCode: Option[String] = None,
    blowStreet: Option[String] = None,
    blowDetail: Option[String] = None,
    blowLongitude: Option[String] = None,
    blowLatitude: Option[String] = None,
    blowEastwest: Option[String] = None,
    blowNorthsouth: Option[String] = None,
    seq: Option[Long] = None,
    cardid: Option[String] = None,
    recordmark: Option[String] = None,
    recordsituation: Option[String] = None,
    validDate: Option[DateTime] = None,
    arriveLocalDate: Option[DateTime] = None,
    leaveLocalDate: Option[DateTime] = None,
    dbSource: Option[String] = None,
    dbSourceDis: Option[String] = None,
    jobDes: Option[String] = None,
    isXjssmz: Option[String] = None,
    passportNum: Option[String] = None,
    countryCode: Option[String] = None,
    foreignName: Option[String] = None,
    passportValidDate: Option[DateTime] = None,
    visaPlace: Option[String] = None,
    passportType: Option[String] = None,
    visaDate: Option[DateTime] = None,
    assistLevel: Option[String] = None,
    assistBonus: Option[String] = None,
    assistPurpose: Option[String] = None,
    assistRefPerson: Option[String] = None,
    assistRefCase: Option[String] = None,
    assistValidDate: Option[String] = None,
    assistExplain: Option[String] = None,
    assistDeptCode: Option[String] = None,
    assistDeptName: Option[String] = None,
    assistDate: Option[String] = None,
    assistContacts: Option[String] = None,
    assistNumber: Option[String] = None,
    assistApproval: Option[String] = None,
    assistSign: Option[String] = None,
    gatherdepartname: Option[String] = None,
    gatherusername: Option[String] = None,
    contrcaptureCode: Option[String] = None)(implicit session: DBSession = autoSession): GafisPerson = {
    withSQL {
      insert.into(GafisPerson).columns(
        column.personid,
        column.idcardno,
        column.name,
        column.spellname,
        column.usedname,
        column.usedspell,
        column.aliasname,
        column.aliasspell,
        column.sexCode,
        column.nativeplaceCode,
        column.nationCode,
        column.ifmarryCode,
        column.toneCode,
        column.tone,
        column.birthdayst,
        column.birthdayed,
        column.birthCode,
        column.birthStreet,
        column.birthdetail,
        column.door,
        column.doorStreet,
        column.doordetail,
        column.address,
        column.addressStreet,
        column.addressdetail,
        column.cultureCode,
        column.sourceincomeCode,
        column.faithCode,
        column.haveemployment,
        column.jobCode,
        column.headship,
        column.employunit,
        column.employaddress,
        column.otherspecialty,
        column.specialidentityCode,
        column.politicsCode,
        column.istransientpop,
        column.istempregist,
        column.havepermit,
        column.haveresidence,
        column.isservice,
        column.specialgroupCode,
        column.haveseparation,
        column.ismigrantworker,
        column.nameofschool,
        column.istraining,
        column.havecertificate,
        column.staturest,
        column.avoirdupois,
        column.footsize,
        column.shoelength,
        column.bodilyformCode,
        column.faceformCode,
        column.iseyeglass,
        column.shoesize,
        column.bloodtypeCode,
        column.gatherOrgCode,
        column.ipaddress,
        column.gathererId,
        column.gatherDate,
        column.gatherTypeId,
        column.status,
        column.isfingerrepeat,
        column.fingerrepeatno,
        column.taskSource,
        column.receiveTime,
        column.isreturn,
        column.returnTime,
        column.annex,
        column.inputpsn,
        column.inputtime,
        column.modifiedpsn,
        column.modifiedtime,
        column.deletag,
        column.schedule,
        column.approval,
        column.dnaCode,
        column.gatherCategory,
        column.personCategory,
        column.auditor,
        column.auditedtime,
        column.isregather,
        column.gatherFingerMode,
        column.caseName,
        column.caseClasses,
        column.reason,
        column.gatherFingerNum,
        column.fingerRemark,
        column.deprtmac,
        column.gatherdepartcode,
        column.gatheruserid,
        column.gatherFingerTime,
        column.isSendTl,
        column.caseBriefContents,
        column.pushStatus,
        column.pushDate,
        column.remark,
        column.dataSources,
        column.fingershowStatus,
        column.cityCode,
        column.delayDeadline,
        column.fptGatherDepartCode,
        column.fptGatherDepartName,
        column.sid,
        column.blowCode,
        column.blowStreet,
        column.blowDetail,
        column.blowLongitude,
        column.blowLatitude,
        column.blowEastwest,
        column.blowNorthsouth,
        column.seq,
        column.cardid,
        column.recordmark,
        column.recordsituation,
        column.validDate,
        column.arriveLocalDate,
        column.leaveLocalDate,
        column.dbSource,
        column.dbSourceDis,
        column.jobDes,
        column.isXjssmz,
        column.passportNum,
        column.countryCode,
        column.foreignName,
        column.passportValidDate,
        column.visaPlace,
        column.passportType,
        column.visaDate,
        column.assistLevel,
        column.assistBonus,
        column.assistPurpose,
        column.assistRefPerson,
        column.assistRefCase,
        column.assistValidDate,
        column.assistExplain,
        column.assistDeptCode,
        column.assistDeptName,
        column.assistDate,
        column.assistContacts,
        column.assistNumber,
        column.assistApproval,
        column.assistSign,
        column.gatherdepartname,
        column.gatherusername,
        column.contrcaptureCode
      ).values(
        personid,
        idcardno,
        name,
        spellname,
        usedname,
        usedspell,
        aliasname,
        aliasspell,
        sexCode,
        nativeplaceCode,
        nationCode,
        ifmarryCode,
        toneCode,
        tone,
        birthdayst,
        birthdayed,
        birthCode,
        birthStreet,
        birthdetail,
        door,
        doorStreet,
        doordetail,
        address,
        addressStreet,
        addressdetail,
        cultureCode,
        sourceincomeCode,
        faithCode,
        haveemployment,
        jobCode,
        headship,
        employunit,
        employaddress,
        otherspecialty,
        specialidentityCode,
        politicsCode,
        istransientpop,
        istempregist,
        havepermit,
        haveresidence,
        isservice,
        specialgroupCode,
        haveseparation,
        ismigrantworker,
        nameofschool,
        istraining,
        havecertificate,
        staturest,
        avoirdupois,
        footsize,
        shoelength,
        bodilyformCode,
        faceformCode,
        iseyeglass,
        shoesize,
        bloodtypeCode,
        gatherOrgCode,
        ipaddress,
        gathererId,
        gatherDate,
        gatherTypeId,
        status,
        isfingerrepeat,
        fingerrepeatno,
        taskSource,
        receiveTime,
        isreturn,
        returnTime,
        annex,
        inputpsn,
        inputtime,
        modifiedpsn,
        modifiedtime,
        deletag,
        schedule,
        approval,
        dnaCode,
        gatherCategory,
        personCategory,
        auditor,
        auditedtime,
        isregather,
        gatherFingerMode,
        caseName,
        caseClasses,
        reason,
        gatherFingerNum,
        fingerRemark,
        deprtmac,
        gatherdepartcode,
        gatheruserid,
        gatherFingerTime,
        isSendTl,
        caseBriefContents,
        pushStatus,
        pushDate,
        remark,
        dataSources,
        fingershowStatus,
        cityCode,
        delayDeadline,
        fptGatherDepartCode,
        fptGatherDepartName,
        sid,
        blowCode,
        blowStreet,
        blowDetail,
        blowLongitude,
        blowLatitude,
        blowEastwest,
        blowNorthsouth,
        seq,
        cardid,
        recordmark,
        recordsituation,
        validDate,
        arriveLocalDate,
        leaveLocalDate,
        dbSource,
        dbSourceDis,
        jobDes,
        isXjssmz,
        passportNum,
        countryCode,
        foreignName,
        passportValidDate,
        visaPlace,
        passportType,
        visaDate,
        assistLevel,
        assistBonus,
        assistPurpose,
        assistRefPerson,
        assistRefCase,
        assistValidDate,
        assistExplain,
        assistDeptCode,
        assistDeptName,
        assistDate,
        assistContacts,
        assistNumber,
        assistApproval,
        assistSign,
        gatherdepartname,
        gatherusername,
        contrcaptureCode
      )
    }.update.apply()

    new GafisPerson(
      personid = personid,
      idcardno = idcardno,
      name = name,
      spellname = spellname,
      usedname = usedname,
      usedspell = usedspell,
      aliasname = aliasname,
      aliasspell = aliasspell,
      sexCode = sexCode,
      nativeplaceCode = nativeplaceCode,
      nationCode = nationCode,
      ifmarryCode = ifmarryCode,
      toneCode = toneCode,
      tone = tone,
      birthdayst = birthdayst,
      birthdayed = birthdayed,
      birthCode = birthCode,
      birthStreet = birthStreet,
      birthdetail = birthdetail,
      door = door,
      doorStreet = doorStreet,
      doordetail = doordetail,
      address = address,
      addressStreet = addressStreet,
      addressdetail = addressdetail,
      cultureCode = cultureCode,
      sourceincomeCode = sourceincomeCode,
      faithCode = faithCode,
      haveemployment = haveemployment,
      jobCode = jobCode,
      headship = headship,
      employunit = employunit,
      employaddress = employaddress,
      otherspecialty = otherspecialty,
      specialidentityCode = specialidentityCode,
      politicsCode = politicsCode,
      istransientpop = istransientpop,
      istempregist = istempregist,
      havepermit = havepermit,
      haveresidence = haveresidence,
      isservice = isservice,
      specialgroupCode = specialgroupCode,
      haveseparation = haveseparation,
      ismigrantworker = ismigrantworker,
      nameofschool = nameofschool,
      istraining = istraining,
      havecertificate = havecertificate,
      staturest = staturest,
      avoirdupois = avoirdupois,
      footsize = footsize,
      shoelength = shoelength,
      bodilyformCode = bodilyformCode,
      faceformCode = faceformCode,
      iseyeglass = iseyeglass,
      shoesize = shoesize,
      bloodtypeCode = bloodtypeCode,
      gatherOrgCode = gatherOrgCode,
      ipaddress = ipaddress,
      gathererId = gathererId,
      gatherDate = gatherDate,
      gatherTypeId = gatherTypeId,
      status = status,
      isfingerrepeat = isfingerrepeat,
      fingerrepeatno = fingerrepeatno,
      taskSource = taskSource,
      receiveTime = receiveTime,
      isreturn = isreturn,
      returnTime = returnTime,
      annex = annex,
      inputpsn = inputpsn,
      inputtime = inputtime,
      modifiedpsn = modifiedpsn,
      modifiedtime = modifiedtime,
      deletag = deletag,
      schedule = schedule,
      approval = approval,
      dnaCode = dnaCode,
      gatherCategory = gatherCategory,
      personCategory = personCategory,
      auditor = auditor,
      auditedtime = auditedtime,
      isregather = isregather,
      gatherFingerMode = gatherFingerMode,
      caseName = caseName,
      caseClasses = caseClasses,
      reason = reason,
      gatherFingerNum = gatherFingerNum,
      fingerRemark = fingerRemark,
      deprtmac = deprtmac,
      gatherdepartcode = gatherdepartcode,
      gatheruserid = gatheruserid,
      gatherFingerTime = gatherFingerTime,
      isSendTl = isSendTl,
      caseBriefContents = caseBriefContents,
      pushStatus = pushStatus,
      pushDate = pushDate,
      remark = remark,
      dataSources = dataSources,
      fingershowStatus = fingershowStatus,
      cityCode = cityCode,
      delayDeadline = delayDeadline,
      fptGatherDepartCode = fptGatherDepartCode,
      fptGatherDepartName = fptGatherDepartName,
      sid = sid,
      blowCode = blowCode,
      blowStreet = blowStreet,
      blowDetail = blowDetail,
      blowLongitude = blowLongitude,
      blowLatitude = blowLatitude,
      blowEastwest = blowEastwest,
      blowNorthsouth = blowNorthsouth,
      seq = seq,
      cardid = cardid,
      recordmark = recordmark,
      recordsituation = recordsituation,
      validDate = validDate,
      arriveLocalDate = arriveLocalDate,
      leaveLocalDate = leaveLocalDate,
      dbSource = dbSource,
      dbSourceDis = dbSourceDis,
      jobDes = jobDes,
      isXjssmz = isXjssmz,
      passportNum = passportNum,
      countryCode = countryCode,
      foreignName = foreignName,
      passportValidDate = passportValidDate,
      visaPlace = visaPlace,
      passportType = passportType,
      visaDate = visaDate,
      assistLevel = assistLevel,
      assistBonus = assistBonus,
      assistPurpose = assistPurpose,
      assistRefPerson = assistRefPerson,
      assistRefCase = assistRefCase,
      assistValidDate = assistValidDate,
      assistExplain = assistExplain,
      assistDeptCode = assistDeptCode,
      assistDeptName = assistDeptName,
      assistDate = assistDate,
      assistContacts = assistContacts,
      assistNumber = assistNumber,
      assistApproval = assistApproval,
      assistSign = assistSign,
      gatherdepartname = gatherdepartname,
      gatherusername = gatherusername,
      contrcaptureCode = contrcaptureCode)
  }

  def save(entity: GafisPerson)(implicit session: DBSession = autoSession): GafisPerson = {
    withSQL {
      update(GafisPerson).set(
        column.personid -> entity.personid,
        column.idcardno -> entity.idcardno,
        column.name -> entity.name,
        column.spellname -> entity.spellname,
        column.usedname -> entity.usedname,
        column.usedspell -> entity.usedspell,
        column.aliasname -> entity.aliasname,
        column.aliasspell -> entity.aliasspell,
        column.sexCode -> entity.sexCode,
        column.nativeplaceCode -> entity.nativeplaceCode,
        column.nationCode -> entity.nationCode,
        column.ifmarryCode -> entity.ifmarryCode,
        column.toneCode -> entity.toneCode,
        column.tone -> entity.tone,
        column.birthdayst -> entity.birthdayst,
        column.birthdayed -> entity.birthdayed,
        column.birthCode -> entity.birthCode,
        column.birthStreet -> entity.birthStreet,
        column.birthdetail -> entity.birthdetail,
        column.door -> entity.door,
        column.doorStreet -> entity.doorStreet,
        column.doordetail -> entity.doordetail,
        column.address -> entity.address,
        column.addressStreet -> entity.addressStreet,
        column.addressdetail -> entity.addressdetail,
        column.cultureCode -> entity.cultureCode,
        column.sourceincomeCode -> entity.sourceincomeCode,
        column.faithCode -> entity.faithCode,
        column.haveemployment -> entity.haveemployment,
        column.jobCode -> entity.jobCode,
        column.headship -> entity.headship,
        column.employunit -> entity.employunit,
        column.employaddress -> entity.employaddress,
        column.otherspecialty -> entity.otherspecialty,
        column.specialidentityCode -> entity.specialidentityCode,
        column.politicsCode -> entity.politicsCode,
        column.istransientpop -> entity.istransientpop,
        column.istempregist -> entity.istempregist,
        column.havepermit -> entity.havepermit,
        column.haveresidence -> entity.haveresidence,
        column.isservice -> entity.isservice,
        column.specialgroupCode -> entity.specialgroupCode,
        column.haveseparation -> entity.haveseparation,
        column.ismigrantworker -> entity.ismigrantworker,
        column.nameofschool -> entity.nameofschool,
        column.istraining -> entity.istraining,
        column.havecertificate -> entity.havecertificate,
        column.staturest -> entity.staturest,
        column.avoirdupois -> entity.avoirdupois,
        column.footsize -> entity.footsize,
        column.shoelength -> entity.shoelength,
        column.bodilyformCode -> entity.bodilyformCode,
        column.faceformCode -> entity.faceformCode,
        column.iseyeglass -> entity.iseyeglass,
        column.shoesize -> entity.shoesize,
        column.bloodtypeCode -> entity.bloodtypeCode,
        column.gatherOrgCode -> entity.gatherOrgCode,
        column.ipaddress -> entity.ipaddress,
        column.gathererId -> entity.gathererId,
        column.gatherDate -> entity.gatherDate,
        column.gatherTypeId -> entity.gatherTypeId,
        column.status -> entity.status,
        column.isfingerrepeat -> entity.isfingerrepeat,
        column.fingerrepeatno -> entity.fingerrepeatno,
        column.taskSource -> entity.taskSource,
        column.receiveTime -> entity.receiveTime,
        column.isreturn -> entity.isreturn,
        column.returnTime -> entity.returnTime,
        column.annex -> entity.annex,
        column.inputpsn -> entity.inputpsn,
        column.inputtime -> entity.inputtime,
        column.modifiedpsn -> entity.modifiedpsn,
        column.modifiedtime -> entity.modifiedtime,
        column.deletag -> entity.deletag,
        column.schedule -> entity.schedule,
        column.approval -> entity.approval,
        column.dnaCode -> entity.dnaCode,
        column.gatherCategory -> entity.gatherCategory,
        column.personCategory -> entity.personCategory,
        column.auditor -> entity.auditor,
        column.auditedtime -> entity.auditedtime,
        column.isregather -> entity.isregather,
        column.gatherFingerMode -> entity.gatherFingerMode,
        column.caseName -> entity.caseName,
        column.caseClasses -> entity.caseClasses,
        column.reason -> entity.reason,
        column.gatherFingerNum -> entity.gatherFingerNum,
        column.fingerRemark -> entity.fingerRemark,
        column.deprtmac -> entity.deprtmac,
        column.gatherdepartcode -> entity.gatherdepartcode,
        column.gatheruserid -> entity.gatheruserid,
        column.gatherFingerTime -> entity.gatherFingerTime,
        column.isSendTl -> entity.isSendTl,
        column.caseBriefContents -> entity.caseBriefContents,
        column.pushStatus -> entity.pushStatus,
        column.pushDate -> entity.pushDate,
        column.remark -> entity.remark,
        column.dataSources -> entity.dataSources,
        column.fingershowStatus -> entity.fingershowStatus,
        column.cityCode -> entity.cityCode,
        column.delayDeadline -> entity.delayDeadline,
        column.fptGatherDepartCode -> entity.fptGatherDepartCode,
        column.fptGatherDepartName -> entity.fptGatherDepartName,
        column.sid -> entity.sid,
        column.blowCode -> entity.blowCode,
        column.blowStreet -> entity.blowStreet,
        column.blowDetail -> entity.blowDetail,
        column.blowLongitude -> entity.blowLongitude,
        column.blowLatitude -> entity.blowLatitude,
        column.blowEastwest -> entity.blowEastwest,
        column.blowNorthsouth -> entity.blowNorthsouth,
        column.seq -> entity.seq,
        column.cardid -> entity.cardid,
        column.recordmark -> entity.recordmark,
        column.recordsituation -> entity.recordsituation,
        column.validDate -> entity.validDate,
        column.arriveLocalDate -> entity.arriveLocalDate,
        column.leaveLocalDate -> entity.leaveLocalDate,
        column.dbSource -> entity.dbSource,
        column.dbSourceDis -> entity.dbSourceDis,
        column.jobDes -> entity.jobDes,
        column.isXjssmz -> entity.isXjssmz,
        column.passportNum -> entity.passportNum,
        column.countryCode -> entity.countryCode,
        column.foreignName -> entity.foreignName,
        column.passportValidDate -> entity.passportValidDate,
        column.visaPlace -> entity.visaPlace,
        column.passportType -> entity.passportType,
        column.visaDate -> entity.visaDate,
        column.assistLevel -> entity.assistLevel,
        column.assistBonus -> entity.assistBonus,
        column.assistPurpose -> entity.assistPurpose,
        column.assistRefPerson -> entity.assistRefPerson,
        column.assistRefCase -> entity.assistRefCase,
        column.assistValidDate -> entity.assistValidDate,
        column.assistExplain -> entity.assistExplain,
        column.assistDeptCode -> entity.assistDeptCode,
        column.assistDeptName -> entity.assistDeptName,
        column.assistDate -> entity.assistDate,
        column.assistContacts -> entity.assistContacts,
        column.assistNumber -> entity.assistNumber,
        column.assistApproval -> entity.assistApproval,
        column.assistSign -> entity.assistSign,
        column.gatherdepartname -> entity.gatherdepartname,
        column.gatherusername -> entity.gatherusername,
        column.contrcaptureCode -> entity.contrcaptureCode
      ).where.eq(column.personid, entity.personid)
    }.update.apply()
    entity
  }

  def destroy(entity: GafisPerson)(implicit session: DBSession = autoSession): Unit = {
    withSQL { delete.from(GafisPerson).where.eq(column.personid, entity.personid) }.update.apply()
  }

}
