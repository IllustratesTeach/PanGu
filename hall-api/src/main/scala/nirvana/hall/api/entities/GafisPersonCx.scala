package nirvana.hall.api.entities

import scalikejdbc._
import org.joda.time.{DateTime}

case class GafisPersonCx(
  personid: String,
  idcardno: Option[String] = None,
  name: Option[String] = None,
  sexCodeLable: Option[String] = None,
  gatherOrgCodeLable: Option[String] = None,
  gathererIdLable: Option[String] = None,
  gatherTypeIdLable: Option[String] = None,
  statusLable: Option[String] = None,
  gatherDateLable: Option[String] = None,
  schedule: Option[String] = None,
  gatherOrgCode: Option[String] = None,
  approval: Option[String] = None,
  gatherTypeId: Option[String] = None,
  gatherCategory: Option[String] = None,
  personCategory: Option[String] = None,
  receiveTimeLable: Option[String] = None,
  gatherOrgCodeLableArea: Option[String] = None,
  usedname: Option[String] = None,
  aliasname: Option[String] = None,
  sexCode: Option[String] = None,
  nationCode: Option[String] = None,
  nationCodeLable: Option[String] = None,
  caseName: Option[String] = None,
  caseClasses: Option[String] = None,
  caseClassesLable: Option[String] = None,
  gathererId: Option[String] = None,
  status: Option[String] = None,
  gatherDate: Option[DateTime] = None,
  gatherCategoryLable: Option[String] = None,
  personCategoryLable: Option[String] = None,
  receiveTime: Option[DateTime] = None,
  birthdayst: Option[DateTime] = None,
  birthdaystLable: Option[String] = None,
  birthCode: Option[String] = None,
  birthCodeLable: Option[String] = None,
  birthStreet: Option[String] = None,
  birthdetail: Option[String] = None,
  door: Option[String] = None,
  doorLable: Option[String] = None,
  doorStreet: Option[String] = None,
  doordetail: Option[String] = None,
  address: Option[String] = None,
  addressLable: Option[String] = None,
  addressStreet: Option[String] = None,
  addressdetail: Option[String] = None,
  specialidentityCode: Option[String] = None,
  specialidentityCodeLable: Option[String] = None,
  sourceincomeCode: Option[String] = None,
  sourceincomeCodeLable: Option[String] = None,
  jobCode: Option[String] = None,
  jobCodeLable: Option[String] = None,
  employunit: Option[String] = None,
  employaddress: Option[String] = None,
  iseyeglass: Option[String] = None,
  iseyeglassLable: Option[String] = None,
  isservice: Option[String] = None,
  isserviceLable: Option[String] = None,
  istransientpop: Option[String] = None,
  istransientpopLable: Option[String] = None,
  istempregist: Option[String] = None,
  istempregistLable: Option[String] = None,
  havepermit: Option[String] = None,
  havepermitLable: Option[String] = None,
  haveresidence: Option[String] = None,
  haveresidenceLable: Option[String] = None,
  remark: Option[String] = None,
  inputtime: Option[DateTime] = None,
  imgid: Option[String] = None,
  toneCode: Option[String] = None,
  toneCodeLable: Option[String] = None,
  tone: Option[String] = None,
  cityCode: Option[String] = None,
  deletag: Option[String] = None,
  isThan: Option[String] = None,
  isXjssmz: Option[String] = None) {

  def save()(implicit session: DBSession = GafisPersonCx.autoSession): GafisPersonCx = GafisPersonCx.save(this)(session)

  def destroy()(implicit session: DBSession = GafisPersonCx.autoSession): Unit = GafisPersonCx.destroy(this)(session)

}


object GafisPersonCx extends SQLSyntaxSupport[GafisPersonCx] {

  override val tableName = "GAFIS_PERSON_CX"

  override val columns = Seq("PERSONID", "IDCARDNO", "NAME", "SEX_CODE_LABLE", "GATHER_ORG_CODE_LABLE", "GATHERER_ID_LABLE", "GATHER_TYPE_ID_LABLE", "STATUS_LABLE", "GATHER_DATE_LABLE", "SCHEDULE", "GATHER_ORG_CODE", "APPROVAL", "GATHER_TYPE_ID", "GATHER_CATEGORY", "PERSON_CATEGORY", "RECEIVE_TIME_LABLE", "GATHER_ORG_CODE_LABLE_AREA", "USEDNAME", "ALIASNAME", "SEX_CODE", "NATION_CODE", "NATION_CODE_LABLE", "CASE_NAME", "CASE_CLASSES", "CASE_CLASSES_LABLE", "GATHERER_ID", "STATUS", "GATHER_DATE", "GATHER_CATEGORY_LABLE", "PERSON_CATEGORY_LABLE", "RECEIVE_TIME", "BIRTHDAYST", "BIRTHDAYST_LABLE", "BIRTH_CODE", "BIRTH_CODE_LABLE", "BIRTH_STREET", "BIRTHDETAIL", "DOOR", "DOOR_LABLE", "DOOR_STREET", "DOORDETAIL", "ADDRESS", "ADDRESS_LABLE", "ADDRESS_STREET", "ADDRESSDETAIL", "SPECIALIDENTITY_CODE", "SPECIALIDENTITY_CODE_LABLE", "SOURCEINCOME_CODE", "SOURCEINCOME_CODE_LABLE", "JOB_CODE", "JOB_CODE_LABLE", "EMPLOYUNIT", "EMPLOYADDRESS", "ISEYEGLASS", "ISEYEGLASS_LABLE", "ISSERVICE", "ISSERVICE_LABLE", "ISTRANSIENTPOP", "ISTRANSIENTPOP_LABLE", "ISTEMPREGIST", "ISTEMPREGIST_LABLE", "HAVEPERMIT", "HAVEPERMIT_LABLE", "HAVERESIDENCE", "HAVERESIDENCE_LABLE", "REMARK", "INPUTTIME", "IMGID", "TONE_CODE", "TONE_CODE_LABLE", "TONE", "CITY_CODE", "DELETAG", "IS_THAN", "IS_XJSSMZ")

  def apply(gpc: SyntaxProvider[GafisPersonCx])(rs: WrappedResultSet): GafisPersonCx = apply(gpc.resultName)(rs)
  def apply(gpc: ResultName[GafisPersonCx])(rs: WrappedResultSet): GafisPersonCx = new GafisPersonCx(
    personid = rs.get(gpc.personid),
    idcardno = rs.get(gpc.idcardno),
    name = rs.get(gpc.name),
    sexCodeLable = rs.get(gpc.sexCodeLable),
    gatherOrgCodeLable = rs.get(gpc.gatherOrgCodeLable),
    gathererIdLable = rs.get(gpc.gathererIdLable),
    gatherTypeIdLable = rs.get(gpc.gatherTypeIdLable),
    statusLable = rs.get(gpc.statusLable),
    gatherDateLable = rs.get(gpc.gatherDateLable),
    schedule = rs.get(gpc.schedule),
    gatherOrgCode = rs.get(gpc.gatherOrgCode),
    approval = rs.get(gpc.approval),
    gatherTypeId = rs.get(gpc.gatherTypeId),
    gatherCategory = rs.get(gpc.gatherCategory),
    personCategory = rs.get(gpc.personCategory),
    receiveTimeLable = rs.get(gpc.receiveTimeLable),
    gatherOrgCodeLableArea = rs.get(gpc.gatherOrgCodeLableArea),
    usedname = rs.get(gpc.usedname),
    aliasname = rs.get(gpc.aliasname),
    sexCode = rs.get(gpc.sexCode),
    nationCode = rs.get(gpc.nationCode),
    nationCodeLable = rs.get(gpc.nationCodeLable),
    caseName = rs.get(gpc.caseName),
    caseClasses = rs.get(gpc.caseClasses),
    caseClassesLable = rs.get(gpc.caseClassesLable),
    gathererId = rs.get(gpc.gathererId),
    status = rs.get(gpc.status),
    gatherDate = rs.get(gpc.gatherDate),
    gatherCategoryLable = rs.get(gpc.gatherCategoryLable),
    personCategoryLable = rs.get(gpc.personCategoryLable),
    receiveTime = rs.get(gpc.receiveTime),
    birthdayst = rs.get(gpc.birthdayst),
    birthdaystLable = rs.get(gpc.birthdaystLable),
    birthCode = rs.get(gpc.birthCode),
    birthCodeLable = rs.get(gpc.birthCodeLable),
    birthStreet = rs.get(gpc.birthStreet),
    birthdetail = rs.get(gpc.birthdetail),
    door = rs.get(gpc.door),
    doorLable = rs.get(gpc.doorLable),
    doorStreet = rs.get(gpc.doorStreet),
    doordetail = rs.get(gpc.doordetail),
    address = rs.get(gpc.address),
    addressLable = rs.get(gpc.addressLable),
    addressStreet = rs.get(gpc.addressStreet),
    addressdetail = rs.get(gpc.addressdetail),
    specialidentityCode = rs.get(gpc.specialidentityCode),
    specialidentityCodeLable = rs.get(gpc.specialidentityCodeLable),
    sourceincomeCode = rs.get(gpc.sourceincomeCode),
    sourceincomeCodeLable = rs.get(gpc.sourceincomeCodeLable),
    jobCode = rs.get(gpc.jobCode),
    jobCodeLable = rs.get(gpc.jobCodeLable),
    employunit = rs.get(gpc.employunit),
    employaddress = rs.get(gpc.employaddress),
    iseyeglass = rs.get(gpc.iseyeglass),
    iseyeglassLable = rs.get(gpc.iseyeglassLable),
    isservice = rs.get(gpc.isservice),
    isserviceLable = rs.get(gpc.isserviceLable),
    istransientpop = rs.get(gpc.istransientpop),
    istransientpopLable = rs.get(gpc.istransientpopLable),
    istempregist = rs.get(gpc.istempregist),
    istempregistLable = rs.get(gpc.istempregistLable),
    havepermit = rs.get(gpc.havepermit),
    havepermitLable = rs.get(gpc.havepermitLable),
    haveresidence = rs.get(gpc.haveresidence),
    haveresidenceLable = rs.get(gpc.haveresidenceLable),
    remark = rs.get(gpc.remark),
    inputtime = rs.get(gpc.inputtime),
    imgid = rs.get(gpc.imgid),
    toneCode = rs.get(gpc.toneCode),
    toneCodeLable = rs.get(gpc.toneCodeLable),
    tone = rs.get(gpc.tone),
    cityCode = rs.get(gpc.cityCode),
    deletag = rs.get(gpc.deletag),
    isThan = rs.get(gpc.isThan),
    isXjssmz = rs.get(gpc.isXjssmz)
  )

  val gpc = GafisPersonCx.syntax("gpc")

 override def autoSession = nirvana.hall.api.services.AutoSpringDataSourceSession()

  def find(personid: String, idcardno: Option[String], name: Option[String], sexCodeLable: Option[String], gatherOrgCodeLable: Option[String], gathererIdLable: Option[String], gatherTypeIdLable: Option[String], statusLable: Option[String], gatherDateLable: Option[String], schedule: Option[String], gatherOrgCode: Option[String], approval: Option[String], gatherTypeId: Option[String], gatherCategory: Option[String], personCategory: Option[String], receiveTimeLable: Option[String], gatherOrgCodeLableArea: Option[String], usedname: Option[String], aliasname: Option[String], sexCode: Option[String], nationCode: Option[String], nationCodeLable: Option[String], caseName: Option[String], caseClasses: Option[String], caseClassesLable: Option[String], gathererId: Option[String], status: Option[String], gatherDate: Option[DateTime], gatherCategoryLable: Option[String], personCategoryLable: Option[String], receiveTime: Option[DateTime], birthdayst: Option[DateTime], birthdaystLable: Option[String], birthCode: Option[String], birthCodeLable: Option[String], birthStreet: Option[String], birthdetail: Option[String], door: Option[String], doorLable: Option[String], doorStreet: Option[String], doordetail: Option[String], address: Option[String], addressLable: Option[String], addressStreet: Option[String], addressdetail: Option[String], specialidentityCode: Option[String], specialidentityCodeLable: Option[String], sourceincomeCode: Option[String], sourceincomeCodeLable: Option[String], jobCode: Option[String], jobCodeLable: Option[String], employunit: Option[String], employaddress: Option[String], iseyeglass: Option[String], iseyeglassLable: Option[String], isservice: Option[String], isserviceLable: Option[String], istransientpop: Option[String], istransientpopLable: Option[String], istempregist: Option[String], istempregistLable: Option[String], havepermit: Option[String], havepermitLable: Option[String], haveresidence: Option[String], haveresidenceLable: Option[String], remark: Option[String], inputtime: Option[DateTime], imgid: Option[String], toneCode: Option[String], toneCodeLable: Option[String], tone: Option[String], cityCode: Option[String], deletag: Option[String], isThan: Option[String], isXjssmz: Option[String])(implicit session: DBSession = autoSession): Option[GafisPersonCx] = {
    withSQL {
      select.from(GafisPersonCx as gpc).where.eq(gpc.personid, personid).and.eq(gpc.idcardno, idcardno).and.eq(gpc.name, name).and.eq(gpc.sexCodeLable, sexCodeLable).and.eq(gpc.gatherOrgCodeLable, gatherOrgCodeLable).and.eq(gpc.gathererIdLable, gathererIdLable).and.eq(gpc.gatherTypeIdLable, gatherTypeIdLable).and.eq(gpc.statusLable, statusLable).and.eq(gpc.gatherDateLable, gatherDateLable).and.eq(gpc.schedule, schedule).and.eq(gpc.gatherOrgCode, gatherOrgCode).and.eq(gpc.approval, approval).and.eq(gpc.gatherTypeId, gatherTypeId).and.eq(gpc.gatherCategory, gatherCategory).and.eq(gpc.personCategory, personCategory).and.eq(gpc.receiveTimeLable, receiveTimeLable).and.eq(gpc.gatherOrgCodeLableArea, gatherOrgCodeLableArea).and.eq(gpc.usedname, usedname).and.eq(gpc.aliasname, aliasname).and.eq(gpc.sexCode, sexCode).and.eq(gpc.nationCode, nationCode).and.eq(gpc.nationCodeLable, nationCodeLable).and.eq(gpc.caseName, caseName).and.eq(gpc.caseClasses, caseClasses).and.eq(gpc.caseClassesLable, caseClassesLable).and.eq(gpc.gathererId, gathererId).and.eq(gpc.status, status).and.eq(gpc.gatherDate, gatherDate).and.eq(gpc.gatherCategoryLable, gatherCategoryLable).and.eq(gpc.personCategoryLable, personCategoryLable).and.eq(gpc.receiveTime, receiveTime).and.eq(gpc.birthdayst, birthdayst).and.eq(gpc.birthdaystLable, birthdaystLable).and.eq(gpc.birthCode, birthCode).and.eq(gpc.birthCodeLable, birthCodeLable).and.eq(gpc.birthStreet, birthStreet).and.eq(gpc.birthdetail, birthdetail).and.eq(gpc.door, door).and.eq(gpc.doorLable, doorLable).and.eq(gpc.doorStreet, doorStreet).and.eq(gpc.doordetail, doordetail).and.eq(gpc.address, address).and.eq(gpc.addressLable, addressLable).and.eq(gpc.addressStreet, addressStreet).and.eq(gpc.addressdetail, addressdetail).and.eq(gpc.specialidentityCode, specialidentityCode).and.eq(gpc.specialidentityCodeLable, specialidentityCodeLable).and.eq(gpc.sourceincomeCode, sourceincomeCode).and.eq(gpc.sourceincomeCodeLable, sourceincomeCodeLable).and.eq(gpc.jobCode, jobCode).and.eq(gpc.jobCodeLable, jobCodeLable).and.eq(gpc.employunit, employunit).and.eq(gpc.employaddress, employaddress).and.eq(gpc.iseyeglass, iseyeglass).and.eq(gpc.iseyeglassLable, iseyeglassLable).and.eq(gpc.isservice, isservice).and.eq(gpc.isserviceLable, isserviceLable).and.eq(gpc.istransientpop, istransientpop).and.eq(gpc.istransientpopLable, istransientpopLable).and.eq(gpc.istempregist, istempregist).and.eq(gpc.istempregistLable, istempregistLable).and.eq(gpc.havepermit, havepermit).and.eq(gpc.havepermitLable, havepermitLable).and.eq(gpc.haveresidence, haveresidence).and.eq(gpc.haveresidenceLable, haveresidenceLable).and.eq(gpc.remark, remark).and.eq(gpc.inputtime, inputtime).and.eq(gpc.imgid, imgid).and.eq(gpc.toneCode, toneCode).and.eq(gpc.toneCodeLable, toneCodeLable).and.eq(gpc.tone, tone).and.eq(gpc.cityCode, cityCode).and.eq(gpc.deletag, deletag).and.eq(gpc.isThan, isThan).and.eq(gpc.isXjssmz, isXjssmz)
    }.map(GafisPersonCx(gpc.resultName)).single.apply()
  }

  def findAll()(implicit session: DBSession = autoSession): List[GafisPersonCx] = {
    withSQL(select.from(GafisPersonCx as gpc)).map(GafisPersonCx(gpc.resultName)).list.apply()
  }

  def countAll()(implicit session: DBSession = autoSession): Long = {
    withSQL(select(sqls.count).from(GafisPersonCx as gpc)).map(rs => rs.long(1)).single.apply().get
  }

  def findBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Option[GafisPersonCx] = {
    withSQL {
      select.from(GafisPersonCx as gpc).where.append(where)
    }.map(GafisPersonCx(gpc.resultName)).single.apply()
  }

  def findAllBy(where: SQLSyntax)(implicit session: DBSession = autoSession): List[GafisPersonCx] = {
    withSQL {
      select.from(GafisPersonCx as gpc).where.append(where)
    }.map(GafisPersonCx(gpc.resultName)).list.apply()
  }

  def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {
    withSQL {
      select(sqls.count).from(GafisPersonCx as gpc).where.append(where)
    }.map(_.long(1)).single.apply().get
  }

  def create(
    personid: String,
    idcardno: Option[String] = None,
    name: Option[String] = None,
    sexCodeLable: Option[String] = None,
    gatherOrgCodeLable: Option[String] = None,
    gathererIdLable: Option[String] = None,
    gatherTypeIdLable: Option[String] = None,
    statusLable: Option[String] = None,
    gatherDateLable: Option[String] = None,
    schedule: Option[String] = None,
    gatherOrgCode: Option[String] = None,
    approval: Option[String] = None,
    gatherTypeId: Option[String] = None,
    gatherCategory: Option[String] = None,
    personCategory: Option[String] = None,
    receiveTimeLable: Option[String] = None,
    gatherOrgCodeLableArea: Option[String] = None,
    usedname: Option[String] = None,
    aliasname: Option[String] = None,
    sexCode: Option[String] = None,
    nationCode: Option[String] = None,
    nationCodeLable: Option[String] = None,
    caseName: Option[String] = None,
    caseClasses: Option[String] = None,
    caseClassesLable: Option[String] = None,
    gathererId: Option[String] = None,
    status: Option[String] = None,
    gatherDate: Option[DateTime] = None,
    gatherCategoryLable: Option[String] = None,
    personCategoryLable: Option[String] = None,
    receiveTime: Option[DateTime] = None,
    birthdayst: Option[DateTime] = None,
    birthdaystLable: Option[String] = None,
    birthCode: Option[String] = None,
    birthCodeLable: Option[String] = None,
    birthStreet: Option[String] = None,
    birthdetail: Option[String] = None,
    door: Option[String] = None,
    doorLable: Option[String] = None,
    doorStreet: Option[String] = None,
    doordetail: Option[String] = None,
    address: Option[String] = None,
    addressLable: Option[String] = None,
    addressStreet: Option[String] = None,
    addressdetail: Option[String] = None,
    specialidentityCode: Option[String] = None,
    specialidentityCodeLable: Option[String] = None,
    sourceincomeCode: Option[String] = None,
    sourceincomeCodeLable: Option[String] = None,
    jobCode: Option[String] = None,
    jobCodeLable: Option[String] = None,
    employunit: Option[String] = None,
    employaddress: Option[String] = None,
    iseyeglass: Option[String] = None,
    iseyeglassLable: Option[String] = None,
    isservice: Option[String] = None,
    isserviceLable: Option[String] = None,
    istransientpop: Option[String] = None,
    istransientpopLable: Option[String] = None,
    istempregist: Option[String] = None,
    istempregistLable: Option[String] = None,
    havepermit: Option[String] = None,
    havepermitLable: Option[String] = None,
    haveresidence: Option[String] = None,
    haveresidenceLable: Option[String] = None,
    remark: Option[String] = None,
    inputtime: Option[DateTime] = None,
    imgid: Option[String] = None,
    toneCode: Option[String] = None,
    toneCodeLable: Option[String] = None,
    tone: Option[String] = None,
    cityCode: Option[String] = None,
    deletag: Option[String] = None,
    isThan: Option[String] = None,
    isXjssmz: Option[String] = None)(implicit session: DBSession = autoSession): GafisPersonCx = {
    withSQL {
      insert.into(GafisPersonCx).columns(
        column.personid,
        column.idcardno,
        column.name,
        column.sexCodeLable,
        column.gatherOrgCodeLable,
        column.gathererIdLable,
        column.gatherTypeIdLable,
        column.statusLable,
        column.gatherDateLable,
        column.schedule,
        column.gatherOrgCode,
        column.approval,
        column.gatherTypeId,
        column.gatherCategory,
        column.personCategory,
        column.receiveTimeLable,
        column.gatherOrgCodeLableArea,
        column.usedname,
        column.aliasname,
        column.sexCode,
        column.nationCode,
        column.nationCodeLable,
        column.caseName,
        column.caseClasses,
        column.caseClassesLable,
        column.gathererId,
        column.status,
        column.gatherDate,
        column.gatherCategoryLable,
        column.personCategoryLable,
        column.receiveTime,
        column.birthdayst,
        column.birthdaystLable,
        column.birthCode,
        column.birthCodeLable,
        column.birthStreet,
        column.birthdetail,
        column.door,
        column.doorLable,
        column.doorStreet,
        column.doordetail,
        column.address,
        column.addressLable,
        column.addressStreet,
        column.addressdetail,
        column.specialidentityCode,
        column.specialidentityCodeLable,
        column.sourceincomeCode,
        column.sourceincomeCodeLable,
        column.jobCode,
        column.jobCodeLable,
        column.employunit,
        column.employaddress,
        column.iseyeglass,
        column.iseyeglassLable,
        column.isservice,
        column.isserviceLable,
        column.istransientpop,
        column.istransientpopLable,
        column.istempregist,
        column.istempregistLable,
        column.havepermit,
        column.havepermitLable,
        column.haveresidence,
        column.haveresidenceLable,
        column.remark,
        column.inputtime,
        column.imgid,
        column.toneCode,
        column.toneCodeLable,
        column.tone,
        column.cityCode,
        column.deletag,
        column.isThan,
        column.isXjssmz
      ).values(
        personid,
        idcardno,
        name,
        sexCodeLable,
        gatherOrgCodeLable,
        gathererIdLable,
        gatherTypeIdLable,
        statusLable,
        gatherDateLable,
        schedule,
        gatherOrgCode,
        approval,
        gatherTypeId,
        gatherCategory,
        personCategory,
        receiveTimeLable,
        gatherOrgCodeLableArea,
        usedname,
        aliasname,
        sexCode,
        nationCode,
        nationCodeLable,
        caseName,
        caseClasses,
        caseClassesLable,
        gathererId,
        status,
        gatherDate,
        gatherCategoryLable,
        personCategoryLable,
        receiveTime,
        birthdayst,
        birthdaystLable,
        birthCode,
        birthCodeLable,
        birthStreet,
        birthdetail,
        door,
        doorLable,
        doorStreet,
        doordetail,
        address,
        addressLable,
        addressStreet,
        addressdetail,
        specialidentityCode,
        specialidentityCodeLable,
        sourceincomeCode,
        sourceincomeCodeLable,
        jobCode,
        jobCodeLable,
        employunit,
        employaddress,
        iseyeglass,
        iseyeglassLable,
        isservice,
        isserviceLable,
        istransientpop,
        istransientpopLable,
        istempregist,
        istempregistLable,
        havepermit,
        havepermitLable,
        haveresidence,
        haveresidenceLable,
        remark,
        inputtime,
        imgid,
        toneCode,
        toneCodeLable,
        tone,
        cityCode,
        deletag,
        isThan,
        isXjssmz
      )
    }.update.apply()

    new GafisPersonCx(
      personid = personid,
      idcardno = idcardno,
      name = name,
      sexCodeLable = sexCodeLable,
      gatherOrgCodeLable = gatherOrgCodeLable,
      gathererIdLable = gathererIdLable,
      gatherTypeIdLable = gatherTypeIdLable,
      statusLable = statusLable,
      gatherDateLable = gatherDateLable,
      schedule = schedule,
      gatherOrgCode = gatherOrgCode,
      approval = approval,
      gatherTypeId = gatherTypeId,
      gatherCategory = gatherCategory,
      personCategory = personCategory,
      receiveTimeLable = receiveTimeLable,
      gatherOrgCodeLableArea = gatherOrgCodeLableArea,
      usedname = usedname,
      aliasname = aliasname,
      sexCode = sexCode,
      nationCode = nationCode,
      nationCodeLable = nationCodeLable,
      caseName = caseName,
      caseClasses = caseClasses,
      caseClassesLable = caseClassesLable,
      gathererId = gathererId,
      status = status,
      gatherDate = gatherDate,
      gatherCategoryLable = gatherCategoryLable,
      personCategoryLable = personCategoryLable,
      receiveTime = receiveTime,
      birthdayst = birthdayst,
      birthdaystLable = birthdaystLable,
      birthCode = birthCode,
      birthCodeLable = birthCodeLable,
      birthStreet = birthStreet,
      birthdetail = birthdetail,
      door = door,
      doorLable = doorLable,
      doorStreet = doorStreet,
      doordetail = doordetail,
      address = address,
      addressLable = addressLable,
      addressStreet = addressStreet,
      addressdetail = addressdetail,
      specialidentityCode = specialidentityCode,
      specialidentityCodeLable = specialidentityCodeLable,
      sourceincomeCode = sourceincomeCode,
      sourceincomeCodeLable = sourceincomeCodeLable,
      jobCode = jobCode,
      jobCodeLable = jobCodeLable,
      employunit = employunit,
      employaddress = employaddress,
      iseyeglass = iseyeglass,
      iseyeglassLable = iseyeglassLable,
      isservice = isservice,
      isserviceLable = isserviceLable,
      istransientpop = istransientpop,
      istransientpopLable = istransientpopLable,
      istempregist = istempregist,
      istempregistLable = istempregistLable,
      havepermit = havepermit,
      havepermitLable = havepermitLable,
      haveresidence = haveresidence,
      haveresidenceLable = haveresidenceLable,
      remark = remark,
      inputtime = inputtime,
      imgid = imgid,
      toneCode = toneCode,
      toneCodeLable = toneCodeLable,
      tone = tone,
      cityCode = cityCode,
      deletag = deletag,
      isThan = isThan,
      isXjssmz = isXjssmz)
  }

  def save(entity: GafisPersonCx)(implicit session: DBSession = autoSession): GafisPersonCx = {
    withSQL {
      update(GafisPersonCx).set(
        column.personid -> entity.personid,
        column.idcardno -> entity.idcardno,
        column.name -> entity.name,
        column.sexCodeLable -> entity.sexCodeLable,
        column.gatherOrgCodeLable -> entity.gatherOrgCodeLable,
        column.gathererIdLable -> entity.gathererIdLable,
        column.gatherTypeIdLable -> entity.gatherTypeIdLable,
        column.statusLable -> entity.statusLable,
        column.gatherDateLable -> entity.gatherDateLable,
        column.schedule -> entity.schedule,
        column.gatherOrgCode -> entity.gatherOrgCode,
        column.approval -> entity.approval,
        column.gatherTypeId -> entity.gatherTypeId,
        column.gatherCategory -> entity.gatherCategory,
        column.personCategory -> entity.personCategory,
        column.receiveTimeLable -> entity.receiveTimeLable,
        column.gatherOrgCodeLableArea -> entity.gatherOrgCodeLableArea,
        column.usedname -> entity.usedname,
        column.aliasname -> entity.aliasname,
        column.sexCode -> entity.sexCode,
        column.nationCode -> entity.nationCode,
        column.nationCodeLable -> entity.nationCodeLable,
        column.caseName -> entity.caseName,
        column.caseClasses -> entity.caseClasses,
        column.caseClassesLable -> entity.caseClassesLable,
        column.gathererId -> entity.gathererId,
        column.status -> entity.status,
        column.gatherDate -> entity.gatherDate,
        column.gatherCategoryLable -> entity.gatherCategoryLable,
        column.personCategoryLable -> entity.personCategoryLable,
        column.receiveTime -> entity.receiveTime,
        column.birthdayst -> entity.birthdayst,
        column.birthdaystLable -> entity.birthdaystLable,
        column.birthCode -> entity.birthCode,
        column.birthCodeLable -> entity.birthCodeLable,
        column.birthStreet -> entity.birthStreet,
        column.birthdetail -> entity.birthdetail,
        column.door -> entity.door,
        column.doorLable -> entity.doorLable,
        column.doorStreet -> entity.doorStreet,
        column.doordetail -> entity.doordetail,
        column.address -> entity.address,
        column.addressLable -> entity.addressLable,
        column.addressStreet -> entity.addressStreet,
        column.addressdetail -> entity.addressdetail,
        column.specialidentityCode -> entity.specialidentityCode,
        column.specialidentityCodeLable -> entity.specialidentityCodeLable,
        column.sourceincomeCode -> entity.sourceincomeCode,
        column.sourceincomeCodeLable -> entity.sourceincomeCodeLable,
        column.jobCode -> entity.jobCode,
        column.jobCodeLable -> entity.jobCodeLable,
        column.employunit -> entity.employunit,
        column.employaddress -> entity.employaddress,
        column.iseyeglass -> entity.iseyeglass,
        column.iseyeglassLable -> entity.iseyeglassLable,
        column.isservice -> entity.isservice,
        column.isserviceLable -> entity.isserviceLable,
        column.istransientpop -> entity.istransientpop,
        column.istransientpopLable -> entity.istransientpopLable,
        column.istempregist -> entity.istempregist,
        column.istempregistLable -> entity.istempregistLable,
        column.havepermit -> entity.havepermit,
        column.havepermitLable -> entity.havepermitLable,
        column.haveresidence -> entity.haveresidence,
        column.haveresidenceLable -> entity.haveresidenceLable,
        column.remark -> entity.remark,
        column.inputtime -> entity.inputtime,
        column.imgid -> entity.imgid,
        column.toneCode -> entity.toneCode,
        column.toneCodeLable -> entity.toneCodeLable,
        column.tone -> entity.tone,
        column.cityCode -> entity.cityCode,
        column.deletag -> entity.deletag,
        column.isThan -> entity.isThan,
        column.isXjssmz -> entity.isXjssmz
      ).where.eq(column.personid, entity.personid).and.eq(column.idcardno, entity.idcardno).and.eq(column.name, entity.name).and.eq(column.sexCodeLable, entity.sexCodeLable).and.eq(column.gatherOrgCodeLable, entity.gatherOrgCodeLable).and.eq(column.gathererIdLable, entity.gathererIdLable).and.eq(column.gatherTypeIdLable, entity.gatherTypeIdLable).and.eq(column.statusLable, entity.statusLable).and.eq(column.gatherDateLable, entity.gatherDateLable).and.eq(column.schedule, entity.schedule).and.eq(column.gatherOrgCode, entity.gatherOrgCode).and.eq(column.approval, entity.approval).and.eq(column.gatherTypeId, entity.gatherTypeId).and.eq(column.gatherCategory, entity.gatherCategory).and.eq(column.personCategory, entity.personCategory).and.eq(column.receiveTimeLable, entity.receiveTimeLable).and.eq(column.gatherOrgCodeLableArea, entity.gatherOrgCodeLableArea).and.eq(column.usedname, entity.usedname).and.eq(column.aliasname, entity.aliasname).and.eq(column.sexCode, entity.sexCode).and.eq(column.nationCode, entity.nationCode).and.eq(column.nationCodeLable, entity.nationCodeLable).and.eq(column.caseName, entity.caseName).and.eq(column.caseClasses, entity.caseClasses).and.eq(column.caseClassesLable, entity.caseClassesLable).and.eq(column.gathererId, entity.gathererId).and.eq(column.status, entity.status).and.eq(column.gatherDate, entity.gatherDate).and.eq(column.gatherCategoryLable, entity.gatherCategoryLable).and.eq(column.personCategoryLable, entity.personCategoryLable).and.eq(column.receiveTime, entity.receiveTime).and.eq(column.birthdayst, entity.birthdayst).and.eq(column.birthdaystLable, entity.birthdaystLable).and.eq(column.birthCode, entity.birthCode).and.eq(column.birthCodeLable, entity.birthCodeLable).and.eq(column.birthStreet, entity.birthStreet).and.eq(column.birthdetail, entity.birthdetail).and.eq(column.door, entity.door).and.eq(column.doorLable, entity.doorLable).and.eq(column.doorStreet, entity.doorStreet).and.eq(column.doordetail, entity.doordetail).and.eq(column.address, entity.address).and.eq(column.addressLable, entity.addressLable).and.eq(column.addressStreet, entity.addressStreet).and.eq(column.addressdetail, entity.addressdetail).and.eq(column.specialidentityCode, entity.specialidentityCode).and.eq(column.specialidentityCodeLable, entity.specialidentityCodeLable).and.eq(column.sourceincomeCode, entity.sourceincomeCode).and.eq(column.sourceincomeCodeLable, entity.sourceincomeCodeLable).and.eq(column.jobCode, entity.jobCode).and.eq(column.jobCodeLable, entity.jobCodeLable).and.eq(column.employunit, entity.employunit).and.eq(column.employaddress, entity.employaddress).and.eq(column.iseyeglass, entity.iseyeglass).and.eq(column.iseyeglassLable, entity.iseyeglassLable).and.eq(column.isservice, entity.isservice).and.eq(column.isserviceLable, entity.isserviceLable).and.eq(column.istransientpop, entity.istransientpop).and.eq(column.istransientpopLable, entity.istransientpopLable).and.eq(column.istempregist, entity.istempregist).and.eq(column.istempregistLable, entity.istempregistLable).and.eq(column.havepermit, entity.havepermit).and.eq(column.havepermitLable, entity.havepermitLable).and.eq(column.haveresidence, entity.haveresidence).and.eq(column.haveresidenceLable, entity.haveresidenceLable).and.eq(column.remark, entity.remark).and.eq(column.inputtime, entity.inputtime).and.eq(column.imgid, entity.imgid).and.eq(column.toneCode, entity.toneCode).and.eq(column.toneCodeLable, entity.toneCodeLable).and.eq(column.tone, entity.tone).and.eq(column.cityCode, entity.cityCode).and.eq(column.deletag, entity.deletag).and.eq(column.isThan, entity.isThan).and.eq(column.isXjssmz, entity.isXjssmz)
    }.update.apply()
    entity
  }

  def destroy(entity: GafisPersonCx)(implicit session: DBSession = autoSession): Unit = {
    withSQL { delete.from(GafisPersonCx).where.eq(column.personid, entity.personid).and.eq(column.idcardno, entity.idcardno).and.eq(column.name, entity.name).and.eq(column.sexCodeLable, entity.sexCodeLable).and.eq(column.gatherOrgCodeLable, entity.gatherOrgCodeLable).and.eq(column.gathererIdLable, entity.gathererIdLable).and.eq(column.gatherTypeIdLable, entity.gatherTypeIdLable).and.eq(column.statusLable, entity.statusLable).and.eq(column.gatherDateLable, entity.gatherDateLable).and.eq(column.schedule, entity.schedule).and.eq(column.gatherOrgCode, entity.gatherOrgCode).and.eq(column.approval, entity.approval).and.eq(column.gatherTypeId, entity.gatherTypeId).and.eq(column.gatherCategory, entity.gatherCategory).and.eq(column.personCategory, entity.personCategory).and.eq(column.receiveTimeLable, entity.receiveTimeLable).and.eq(column.gatherOrgCodeLableArea, entity.gatherOrgCodeLableArea).and.eq(column.usedname, entity.usedname).and.eq(column.aliasname, entity.aliasname).and.eq(column.sexCode, entity.sexCode).and.eq(column.nationCode, entity.nationCode).and.eq(column.nationCodeLable, entity.nationCodeLable).and.eq(column.caseName, entity.caseName).and.eq(column.caseClasses, entity.caseClasses).and.eq(column.caseClassesLable, entity.caseClassesLable).and.eq(column.gathererId, entity.gathererId).and.eq(column.status, entity.status).and.eq(column.gatherDate, entity.gatherDate).and.eq(column.gatherCategoryLable, entity.gatherCategoryLable).and.eq(column.personCategoryLable, entity.personCategoryLable).and.eq(column.receiveTime, entity.receiveTime).and.eq(column.birthdayst, entity.birthdayst).and.eq(column.birthdaystLable, entity.birthdaystLable).and.eq(column.birthCode, entity.birthCode).and.eq(column.birthCodeLable, entity.birthCodeLable).and.eq(column.birthStreet, entity.birthStreet).and.eq(column.birthdetail, entity.birthdetail).and.eq(column.door, entity.door).and.eq(column.doorLable, entity.doorLable).and.eq(column.doorStreet, entity.doorStreet).and.eq(column.doordetail, entity.doordetail).and.eq(column.address, entity.address).and.eq(column.addressLable, entity.addressLable).and.eq(column.addressStreet, entity.addressStreet).and.eq(column.addressdetail, entity.addressdetail).and.eq(column.specialidentityCode, entity.specialidentityCode).and.eq(column.specialidentityCodeLable, entity.specialidentityCodeLable).and.eq(column.sourceincomeCode, entity.sourceincomeCode).and.eq(column.sourceincomeCodeLable, entity.sourceincomeCodeLable).and.eq(column.jobCode, entity.jobCode).and.eq(column.jobCodeLable, entity.jobCodeLable).and.eq(column.employunit, entity.employunit).and.eq(column.employaddress, entity.employaddress).and.eq(column.iseyeglass, entity.iseyeglass).and.eq(column.iseyeglassLable, entity.iseyeglassLable).and.eq(column.isservice, entity.isservice).and.eq(column.isserviceLable, entity.isserviceLable).and.eq(column.istransientpop, entity.istransientpop).and.eq(column.istransientpopLable, entity.istransientpopLable).and.eq(column.istempregist, entity.istempregist).and.eq(column.istempregistLable, entity.istempregistLable).and.eq(column.havepermit, entity.havepermit).and.eq(column.havepermitLable, entity.havepermitLable).and.eq(column.haveresidence, entity.haveresidence).and.eq(column.haveresidenceLable, entity.haveresidenceLable).and.eq(column.remark, entity.remark).and.eq(column.inputtime, entity.inputtime).and.eq(column.imgid, entity.imgid).and.eq(column.toneCode, entity.toneCode).and.eq(column.toneCodeLable, entity.toneCodeLable).and.eq(column.tone, entity.tone).and.eq(column.cityCode, entity.cityCode).and.eq(column.deletag, entity.deletag).and.eq(column.isThan, entity.isThan).and.eq(column.isXjssmz, entity.isXjssmz) }.update.apply()
  }

}
