package nirvana.hall.api.jpa;
// Generated Jan 6, 2016 6:08:10 PM by hall orm generator 4.3.1.Final


import javax.persistence.Column;
import javax.persistence.Embeddable;
import nirvana.hall.orm.services.ActiveRecord;
import nirvana.hall.orm.services.ActiveRecordInstance;

/**
 * OnlineUserId generated by hall orm 
 */
object OnlineUserId extends ActiveRecordInstance[OnlineUserId]

@Embeddable
class OnlineUserId extends ActiveRecord {


      @Column(name="LOGIN", unique=true, nullable=false, length=50)
     var login:java.lang.String =  _
      @Column(name="LOGIN_TIME", nullable=false)
     var loginTime:Int =  _
      @Column(name="LATEST_TIME", nullable=false)
     var latestTime:Int =  _
      @Column(name="TOKEN", unique=true, nullable=false, length=50)
     var token:java.lang.String =  _


    def this(login:java.lang.String, loginTime:Int, latestTime:Int, token:java.lang.String) {
       this()
       this.login = login
       this.loginTime = loginTime
       this.latestTime = latestTime
       this.token = token
    }
   


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof OnlineUserId) ) return false;
		 OnlineUserId castOther = ( OnlineUserId ) other; 
         
		 return ( (this.getLogin()==castOther.getLogin()) || ( this.getLogin()!=null && castOther.getLogin()!=null && this.getLogin().equals(castOther.getLogin()) ) )
 && (this.getLoginTime()==castOther.getLoginTime())
 && (this.getLatestTime()==castOther.getLatestTime())
 && ( (this.getToken()==castOther.getToken()) || ( this.getToken()!=null && castOther.getToken()!=null && this.getToken().equals(castOther.getToken()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getLogin() == null ? 0 : this.getLogin().hashCode() );
         result = 37 * result + this.getLoginTime();
         result = 37 * result + this.getLatestTime();
         result = 37 * result + ( getToken() == null ? 0 : this.getToken().hashCode() );
         return result;
   }   


}


